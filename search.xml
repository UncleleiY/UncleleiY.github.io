<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>未来</title>
      <link href="/2023/11/05/blog-pictures/"/>
      <url>/2023/11/05/blog-pictures/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><!DOCTYPE html><html lang="zh"><style>    body {text-align: center;}    p, font {line-height: 5em;}</style><body>    <div><img src="https://cdn.jsdelivr.net/gh/UncleleiY/image@main/blog/images/self.jpg"></div>    <font color="#30acf4" style="font-weight:bolder;"> 昨天，前天 </font></body></html>]]></content>
      
      
      <categories>
          
          <category> none </category>
          
      </categories>
      
      
        <tags>
            
            <tag> none </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒狗科研（三）</title>
      <link href="/2023/10/25/blog-shell-vasp-script-3/"/>
      <url>/2023/10/25/blog-shell-vasp-script-3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>网上收集的一些脚本经过魔改，以及自己写的一小部分脚本，用于实现：</p><ul><li>查看结构优化过程中能量和力的变化</li><li>查看结构优化过程中晶格参数的变化</li><li>清理结构优化之后其他不常用的文件</li><li>监控超算任务执行的相关情况</li></ul><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-comment">########################################&lt;&lt;&lt;&lt;energy-force&gt;&gt;&gt;&gt;#####################################</span><span class="hljs-function"><span class="hljs-title">f01</span></span>()&#123;<span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment"># choose ion steps to eliminate forces of fixed atoms</span><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;Choose Ion Steps: &quot;</span> steps<span class="hljs-comment"># plot energies of structure in optimization</span>awk <span class="hljs-string">&#x27;/E0/&#123;if ( i&lt;=5 ) i++;else print $0 &#125;&#x27;</span> OSZICAR &gt;temp.egnuplot &lt;&lt;<span class="hljs-string">EOF</span><span class="hljs-string">set term dumb</span><span class="hljs-string">set title &#x27;Energy of each ion steps (OSZICAR)&#x27;</span><span class="hljs-string">set xlabel &#x27;Ion steps&#x27;</span><span class="hljs-string">set ylabel &#x27;Energy(eV)&#x27;</span><span class="hljs-string">plot &#x27;temp.e&#x27; u 1:5 w l</span><span class="hljs-string">EOF</span><span class="hljs-built_in">rm</span> temp.e<span class="hljs-comment"># eliminate forces of fixed atoms</span>fix=<span class="hljs-variable">$1</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> -z <span class="hljs-variable">$1</span>; <span class="hljs-keyword">then</span>fix=0<span class="hljs-keyword">fi</span><span class="hljs-comment"># get force form OUTCAR</span>awk -v fix=<span class="hljs-string">&quot;<span class="hljs-variable">$fix</span>&quot;</span> <span class="hljs-string">&#x27;/POSITION/,/drift/&#123;</span><span class="hljs-string">if($1~/^[0-9.]+$/&amp;&amp;$3&gt;=fix) print $1,$2,$3,sqrt($4*$4+$5*$5+$6*$6i);</span><span class="hljs-string">else if($1==&quot;total&quot;) print $0</span><span class="hljs-string">&#125;&#x27;</span> OUTCAR &gt;temp.fawk <span class="hljs-string">&#x27;&#123;</span><span class="hljs-string">if($1==&quot;total&quot;) &#123;print ++i,a;a=0&#125;</span><span class="hljs-string">else &#123;if(a&lt;$4) a=$4&#125;</span><span class="hljs-string">&#125;&#x27;</span> temp.f &gt;force.conv<span class="hljs-comment">#sed -i &#x27;1,9d&#x27; force.conv</span><span class="hljs-comment">#rm temp.f</span><span class="hljs-built_in">tail</span> -<span class="hljs-variable">$steps</span> force.conv &gt;temp.f<span class="hljs-comment">#plot</span>gnuplot &lt;&lt;<span class="hljs-string">EOF</span><span class="hljs-string">set term dumb</span><span class="hljs-string">set title &#x27;Max force of each ion steps (EDIFFG)&#x27;</span><span class="hljs-string">set xlabel &#x27;Ion steps&#x27;</span><span class="hljs-string">set ylabel &#x27;Force (eV/Angstrom)&#x27;</span><span class="hljs-string">plot &#x27;temp.f&#x27; w l t &quot; Force &quot;</span><span class="hljs-string">EOF</span><span class="hljs-built_in">rm</span> force.conv  temp.f&#125;<span class="hljs-comment">########################################&lt;&lt;&lt;&lt;energy-force&gt;&gt;&gt;&gt;#####################################</span><span class="hljs-comment">#########################################&lt;&lt;&lt;&lt;lattice-script&gt;&gt;&gt;&gt;##################################</span><span class="hljs-function"><span class="hljs-title">f02</span></span>()&#123;<span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">#Purpose: compare lattice constant between POSCAR and CONTCAR.</span>dos2unix POSCAR<span class="hljs-comment">#lattice constant components from POSCAR without scaling</span>scale_posc=$(awk <span class="hljs-string">&#x27;NR==2 &#123;print $1&#125;&#x27;</span> POSCAR)x1_posc=$(awk <span class="hljs-string">&#x27;NR==3 &#123;print $1&#125;&#x27;</span> POSCAR)x2_posc=$(awk <span class="hljs-string">&#x27;NR==3 &#123;print $2&#125;&#x27;</span> POSCAR)x3_posc=$(awk <span class="hljs-string">&#x27;NR==3 &#123;print $3&#125;&#x27;</span> POSCAR)y1_posc=$(awk <span class="hljs-string">&#x27;NR==4 &#123;print $1&#125;&#x27;</span> POSCAR)y2_posc=$(awk <span class="hljs-string">&#x27;NR==4 &#123;print $2&#125;&#x27;</span> POSCAR)y3_posc=$(awk <span class="hljs-string">&#x27;NR==4 &#123;print $3&#125;&#x27;</span> POSCAR)z1_posc=$(awk <span class="hljs-string">&#x27;NR==5 &#123;print $1&#125;&#x27;</span> POSCAR)z2_posc=$(awk <span class="hljs-string">&#x27;NR==5 &#123;print $2&#125;&#x27;</span> POSCAR)z3_posc=$(awk <span class="hljs-string">&#x27;NR==5 &#123;print $3&#125;&#x27;</span> POSCAR)<span class="hljs-comment">#lattice constant from POSCAR without scaling</span>xL_posc=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;(sqrt(&quot;</span><span class="hljs-variable">$x1_posc</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$x2_posc</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$x3_posc</span><span class="hljs-string">&quot;^2) * &quot;</span><span class="hljs-variable">$scale_posc</span><span class="hljs-string">&quot;/1)&quot;</span> |bc)yL_posc=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;(sqrt(&quot;</span><span class="hljs-variable">$y1_posc</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$y2_posc</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$y3_posc</span><span class="hljs-string">&quot;^2) * &quot;</span><span class="hljs-variable">$scale_posc</span><span class="hljs-string">&quot;/1)&quot;</span> |bc)zL_posc=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;(sqrt(&quot;</span><span class="hljs-variable">$z1_posc</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$z2_posc</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$z3_posc</span><span class="hljs-string">&quot;^2) * &quot;</span><span class="hljs-variable">$scale_posc</span><span class="hljs-string">&quot;/1)&quot;</span> |bc)<span class="hljs-comment">#lattice constant components from CONTCAR without scaling</span>scale_cont=$(awk <span class="hljs-string">&#x27;NR==2 &#123;print $1&#125;&#x27;</span> CONTCAR)x1_cont=$(awk <span class="hljs-string">&#x27;NR==3 &#123;print $1&#125;&#x27;</span> CONTCAR)x2_cont=$(awk <span class="hljs-string">&#x27;NR==3 &#123;print $2&#125;&#x27;</span> CONTCAR)x3_cont=$(awk <span class="hljs-string">&#x27;NR==3 &#123;print $3&#125;&#x27;</span> CONTCAR)y1_cont=$(awk <span class="hljs-string">&#x27;NR==4 &#123;print $1&#125;&#x27;</span> CONTCAR)y2_cont=$(awk <span class="hljs-string">&#x27;NR==4 &#123;print $2&#125;&#x27;</span> CONTCAR)y3_cont=$(awk <span class="hljs-string">&#x27;NR==4 &#123;print $3&#125;&#x27;</span> CONTCAR)z1_cont=$(awk <span class="hljs-string">&#x27;NR==5 &#123;print $1&#125;&#x27;</span> CONTCAR)z2_cont=$(awk <span class="hljs-string">&#x27;NR==5 &#123;print $2&#125;&#x27;</span> CONTCAR)z3_cont=$(awk <span class="hljs-string">&#x27;NR==5 &#123;print $3&#125;&#x27;</span> CONTCAR)<span class="hljs-comment">#lattice constant from CONTCAR without scaling</span>xL_cont=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;(sqrt(&quot;</span><span class="hljs-variable">$x1_cont</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$x2_cont</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$x3_cont</span><span class="hljs-string">&quot;^2) * &quot;</span><span class="hljs-variable">$scale_cont</span><span class="hljs-string">&quot;/1)&quot;</span> |bc)yL_cont=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;(sqrt(&quot;</span><span class="hljs-variable">$y1_cont</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$y2_cont</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$y3_cont</span><span class="hljs-string">&quot;^2) * &quot;</span><span class="hljs-variable">$scale_cont</span><span class="hljs-string">&quot;/1)&quot;</span> |bc)zL_cont=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;(sqrt(&quot;</span><span class="hljs-variable">$z1_cont</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$z2_cont</span><span class="hljs-string">&quot;^2 + &quot;</span><span class="hljs-variable">$z3_cont</span><span class="hljs-string">&quot;^2) * &quot;</span><span class="hljs-variable">$scale_cont</span><span class="hljs-string">&quot;/1)&quot;</span> |bc)<span class="hljs-comment">#diff: in unit of percentage, subt: in unit of angstrom </span>j=1refer_num=0.001<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x1 x2 x3 y1 y2 y3 z1 z2 z3 ; <span class="hljs-keyword">do</span>        flag1=<span class="hljs-variable">$i</span>\_posc        posc_flag=$(<span class="hljs-built_in">eval</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$&#x27;</span><span class="hljs-string">&quot;<span class="hljs-variable">$flag1</span>&quot;</span>)        flag2=<span class="hljs-variable">$i</span>\_cont        cont_flag=$(<span class="hljs-built_in">eval</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;$&#x27;</span><span class="hljs-string">&quot;<span class="hljs-variable">$flag2</span>&quot;</span>)        <span class="hljs-keyword">if</span> [ $( <span class="hljs-built_in">expr</span> <span class="hljs-variable">$posc_flag</span> \&gt; <span class="hljs-variable">$refer_num</span> ) -eq 0 ] ; <span class="hljs-keyword">then</span>                diff[<span class="hljs-variable">$j</span>]=--        <span class="hljs-keyword">else</span>                diff[<span class="hljs-variable">$j</span>]=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;((&quot;</span><span class="hljs-variable">$posc_flag</span><span class="hljs-string">&quot; * &quot;</span><span class="hljs-variable">$scale_posc</span><span class="hljs-string">&quot; - &quot;</span><span class="hljs-variable">$cont_flag</span><span class="hljs-string">&quot; * &quot;</span><span class="hljs-variable">$scale_cont</span><span class="hljs-string">&quot;) / &quot;</span><span class="hljs-variable">$posc_flag</span><span class="hljs-string">&quot; / &quot;</span><span class="hljs-variable">$scale_posc</span><span class="hljs-string">&quot; * 100)&quot;</span> |bc)        <span class="hljs-keyword">fi</span>        subt[<span class="hljs-variable">$j</span>]=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;((&quot;</span><span class="hljs-variable">$posc_flag</span><span class="hljs-string">&quot; * &quot;</span><span class="hljs-variable">$scale_posc</span><span class="hljs-string">&quot; - &quot;</span><span class="hljs-variable">$cont_flag</span><span class="hljs-string">&quot; * &quot;</span><span class="hljs-variable">$scale_cont</span><span class="hljs-string">&quot;) / 1)&quot;</span> |bc)        j=$( <span class="hljs-built_in">expr</span> <span class="hljs-variable">$j</span> + 1)<span class="hljs-keyword">done</span>xL_diff=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;((&quot;</span><span class="hljs-variable">$xL_posc</span><span class="hljs-string">&quot; - &quot;</span><span class="hljs-variable">$xL_cont</span><span class="hljs-string">&quot;) / &quot;</span><span class="hljs-variable">$xL_posc</span><span class="hljs-string">&quot; * 100)&quot;</span> |bc)yL_diff=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;((&quot;</span><span class="hljs-variable">$yL_posc</span><span class="hljs-string">&quot; - &quot;</span><span class="hljs-variable">$yL_cont</span><span class="hljs-string">&quot;) / &quot;</span><span class="hljs-variable">$yL_posc</span><span class="hljs-string">&quot; * 100)&quot;</span> |bc)zL_diff=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;((&quot;</span><span class="hljs-variable">$zL_posc</span><span class="hljs-string">&quot; - &quot;</span><span class="hljs-variable">$zL_cont</span><span class="hljs-string">&quot;) / &quot;</span><span class="hljs-variable">$zL_posc</span><span class="hljs-string">&quot; * 100)&quot;</span> |bc)xL_subt=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;((&quot;</span><span class="hljs-variable">$xL_posc</span><span class="hljs-string">&quot; - &quot;</span><span class="hljs-variable">$xL_cont</span><span class="hljs-string">&quot;) / 1)&quot;</span> |bc)yL_subt=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;((&quot;</span><span class="hljs-variable">$yL_posc</span><span class="hljs-string">&quot; - &quot;</span><span class="hljs-variable">$yL_cont</span><span class="hljs-string">&quot;) / 1)&quot;</span> |bc)zL_subt=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=4;((&quot;</span><span class="hljs-variable">$zL_posc</span><span class="hljs-string">&quot; - &quot;</span><span class="hljs-variable">$zL_cont</span><span class="hljs-string">&quot;) / 1)&quot;</span> |bc)<span class="hljs-comment"># mv lattice-difference lattice-difference.before</span><span class="hljs-built_in">echo</span> &gt;&gt; lattice-difference<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;I am in <span class="hljs-variable">$PWD</span>&quot;</span> &gt;&gt; lattice-difference<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;======== the difference of lattice constant between POSCAR and CONTCAR ========&#x27;</span> &gt;&gt; lattice-difference<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %12s\t %12s\t %12s\t %12s\t \n&#x27;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;diff(%)  component1  component2  component3  Total&quot;</span>)     &gt;&gt; lattice-difference<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %12s\t %12s\t %12s\t %12s\t \n&#x27;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;======== ==========  ==========  ==========  ========&quot;</span>)  &gt;&gt; lattice-difference<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %12s\t %12s\t %12s\t %12s\t \n&#x27;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;X_axis   <span class="hljs-variable">$&#123;diff[1]&#125;</span>% <span class="hljs-variable">$&#123;diff[2]&#125;</span>% <span class="hljs-variable">$&#123;diff[3]&#125;</span>% <span class="hljs-variable">$xL_diff</span>%&quot;</span>) &gt;&gt; lattice-difference<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %12s\t %12s\t %12s\t %12s\t \n&#x27;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y_axis   <span class="hljs-variable">$&#123;diff[4]&#125;</span>% <span class="hljs-variable">$&#123;diff[5]&#125;</span>% <span class="hljs-variable">$&#123;diff[6]&#125;</span>% <span class="hljs-variable">$yL_diff</span>%&quot;</span>) &gt;&gt; lattice-difference<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %12s\t %12s\t %12s\t %12s\t \n&#x27;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Z_axis   <span class="hljs-variable">$&#123;diff[7]&#125;</span>% <span class="hljs-variable">$&#123;diff[8]&#125;</span>% <span class="hljs-variable">$&#123;diff[9]&#125;</span>% <span class="hljs-variable">$zL_diff</span>%&quot;</span>) &gt;&gt; lattice-difference<span class="hljs-built_in">echo</span> &gt;&gt; lattice-difference<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %12s\t %12s\t %12s\t %12s\t \n&#x27;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;subt(A)  component1   component2   component3   Total&quot;</span>)     &gt;&gt; lattice-difference<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %12s\t %12s\t %12s\t %12s\t \n&#x27;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;======== ==========   ==========   ==========   ========&quot;</span>)  &gt;&gt; lattice-difference<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %12s\t %12s\t %12s\t %12s\t \n&#x27;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;X_axis   <span class="hljs-variable">$&#123;subt[1]&#125;</span>/A <span class="hljs-variable">$&#123;subt[2]&#125;</span>/A <span class="hljs-variable">$&#123;subt[3]&#125;</span>/A <span class="hljs-variable">$xL_subt</span>/A&quot;</span>) &gt;&gt; lattice-difference<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %12s\t %12s\t %12s\t %12s\t \n&#x27;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y_axis   <span class="hljs-variable">$&#123;subt[4]&#125;</span>/A <span class="hljs-variable">$&#123;subt[5]&#125;</span>/A <span class="hljs-variable">$&#123;subt[6]&#125;</span>/A <span class="hljs-variable">$yL_subt</span>/A&quot;</span>) &gt;&gt; lattice-difference<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %12s\t %12s\t %12s\t %12s\t \n&#x27;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Z_axis   <span class="hljs-variable">$&#123;subt[7]&#125;</span>/A <span class="hljs-variable">$&#123;subt[8]&#125;</span>/A <span class="hljs-variable">$&#123;subt[9]&#125;</span>/A <span class="hljs-variable">$zL_subt</span>/A&quot;</span>) &gt;&gt; lattice-difference<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; &quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;****************************Lattice of POSCAR****************************&quot;</span>sed -n <span class="hljs-string">&#x27;3,5p&#x27;</span> POSCAR<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;*************************************************************************&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; &quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;****************************Lattice of CONTCAR***************************&quot;</span>sed -n <span class="hljs-string">&#x27;3,5p&#x27;</span> CONTCAR<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;*************************************************************************&quot;</span><span class="hljs-built_in">cat</span> lattice-difference<span class="hljs-built_in">rm</span> lattice-difference&#125;<span class="hljs-comment">###########################################&lt;&lt;&lt;&lt;lattice-script&gt;&gt;&gt;&gt;########################################</span><span class="hljs-comment">###########################################&lt;&lt;&lt;&lt;summary-script&gt;&gt;&gt;&gt;########################################</span><span class="hljs-function"><span class="hljs-title">f03</span></span>()&#123;<span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">#generate comment-file after VASP calculation</span><span class="hljs-built_in">dir</span>=<span class="hljs-variable">$1</span>nsw=$(grep <span class="hljs-string">&quot;NSW&quot;</span> OUTCAR | <span class="hljs-built_in">tail</span> -1 | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span>)E0=$(grep <span class="hljs-string">&quot;without&quot;</span> OUTCAR |<span class="hljs-built_in">tail</span> -1| awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.6f \n&quot;, $7&#125;&#x27;</span>)EENTRO=$(grep <span class="hljs-string">&quot;EENTRO&quot;</span> OUTCAR |<span class="hljs-built_in">tail</span> -1| awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.6f \n&quot;, $5&#125;&#x27;</span>)Edisp=$(grep <span class="hljs-string">&quot;Edisp&quot;</span> OUTCAR |<span class="hljs-built_in">tail</span> -1| awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.5f \n&quot;, $3&#125;&#x27;</span>)MAGNE=$(grep <span class="hljs-string">&quot;mag&quot;</span> OSZICAR |<span class="hljs-built_in">tail</span> -1| awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.4f \n&quot;, $10&#125;&#x27;</span>)require=$(grep <span class="hljs-string">&quot;require&quot;</span> OUTCAR | awk <span class="hljs-string">&#x27;&#123;printf &quot;%s \n&quot;, $1&#125;&#x27;</span>)dE=$(grep <span class="hljs-string">&quot;E&quot;</span> OSZICAR |<span class="hljs-built_in">tail</span> -2|<span class="hljs-built_in">head</span> -1| awk <span class="hljs-string">&#x27;&#123;printf &quot;%s \n&quot;, $4&#125;&#x27;</span>)pressure=$(grep <span class="hljs-string">&quot;external&quot;</span> OUTCAR |<span class="hljs-built_in">tail</span> -1| awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.2f \n&quot;, $4&#125;&#x27;</span>)Pullay=$(grep <span class="hljs-string">&quot;external&quot;</span> OUTCAR |<span class="hljs-built_in">tail</span> -1| awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.2f \n&quot;, $9&#125;&#x27;</span>)Time=$(grep <span class="hljs-string">&quot;Elapsed&quot;</span> OUTCAR |<span class="hljs-built_in">tail</span> -1| awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.0f \n&quot;, $4&#125;&#x27;</span>)sta_sym=$(grep <span class="hljs-string">&quot;static configuration&quot;</span> OUTCAR | awk <span class="hljs-string">&#x27;&#123;printf &quot;%s \n&quot;, $8&#125;&#x27;</span>)dyn_sym=$(grep <span class="hljs-string">&quot;dynamic configuration&quot;</span> OUTCAR | awk <span class="hljs-string">&#x27;&#123;printf &quot;%s \n&quot;, $8&#125;&#x27;</span>)mag_sym=$(grep <span class="hljs-string">&quot;magnetic configuration&quot;</span> OUTCAR | awk <span class="hljs-string">&#x27;&#123;printf &quot;%s \n&quot;, $8&#125;&#x27;</span>)<span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$Edisp</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ] ; <span class="hljs-keyword">then</span>        Edisp=--<span class="hljs-keyword">else</span>        a=a<span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$MAGNE</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ] ; <span class="hljs-keyword">then</span>        MAGNE=--<span class="hljs-keyword">else</span>        a=a<span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$require</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ] ; <span class="hljs-keyword">then</span>        require=o_o<span class="hljs-keyword">else</span>        a=a<span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> ====================<span class="hljs-variable">$dir</span>==================== &gt; comment-<span class="hljs-variable">$dir</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$nsw</span>&quot;</span> = <span class="hljs-string">&quot;0&quot;</span> ] ; <span class="hljs-keyword">then</span>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;E0       EENTRO   dE       pressure time     MAGNE    Edisp    Pullay&quot;</span>` &gt;&gt;comment-<span class="hljs-variable">$dir</span>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;======== ======== ======== ======== ======== ======== ======== ========&quot;</span>` &gt;&gt;comment-<span class="hljs-variable">$dir</span>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-variable">$E0</span>           <span class="hljs-variable">$EENTRO</span>  <span class="hljs-variable">$dE</span>      <span class="hljs-variable">$pressure</span> <span class="hljs-variable">$Time</span>       <span class="hljs-variable">$MAGNE</span>   <span class="hljs-variable">$Edisp</span>   <span class="hljs-variable">$Pullay</span>` &gt;&gt;comment-<span class="hljs-variable">$dir</span>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sta_sym  dyn_sym  mag_sym  xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx&quot;</span>` &gt;&gt;comment-<span class="hljs-variable">$dir</span>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;======== ======== ======== ======== ======== ======== ======== ========&quot;</span>` &gt;&gt;comment-<span class="hljs-variable">$dir</span>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-variable">$sta_sym</span>  <span class="hljs-variable">$dyn_sym</span> <span class="hljs-variable">$mag_sym</span> ` &gt;&gt;comment-<span class="hljs-variable">$dir</span>        <span class="hljs-keyword">else</span>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;E0       EENTRO   require  pressure time     MAGNE    Edisp    Pullay&quot;</span>` &gt;&gt;comment-<span class="hljs-variable">$dir</span>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;======== ======== ======== ======== ======== ======== ======== ========&quot;</span>` &gt;&gt;comment-<span class="hljs-variable">$dir</span>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-variable">$E0</span>           <span class="hljs-variable">$EENTRO</span>  <span class="hljs-variable">$require</span> <span class="hljs-variable">$pressure</span> <span class="hljs-variable">$Time</span>   <span class="hljs-variable">$MAGNE</span>   <span class="hljs-variable">$Edisp</span>   <span class="hljs-variable">$Pullay</span>` &gt;&gt;comment-<span class="hljs-variable">$dir</span>     <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sta_sym  dyn_sym  mag_sym  xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx&quot;</span>` &gt;&gt;comment-<span class="hljs-variable">$dir</span>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;======== ======== ======== ======== ======== ======== ======== ========&quot;</span>` &gt;&gt;comment-<span class="hljs-variable">$dir</span>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-variable">$sta_sym</span>  <span class="hljs-variable">$dyn_sym</span> <span class="hljs-variable">$mag_sym</span> ` &gt;&gt;comment-<span class="hljs-variable">$dir</span><span class="hljs-keyword">fi</span><span class="hljs-built_in">cat</span> comment-<span class="hljs-built_in">rm</span> comment-&#125;<span class="hljs-comment">###########################################&lt;&lt;&lt;&lt;summary-script&gt;&gt;&gt;&gt;########################################</span><span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;mag-script&gt;&gt;&gt;&gt;##########################################</span><span class="hljs-function"><span class="hljs-title">f04</span></span>()&#123;<span class="hljs-comment">#!/bin/bash</span><span class="hljs-comment">#=====================================</span><span class="hljs-comment"># HOW TO USE : ./gene-mag.sh</span><span class="hljs-comment"># extracting total and local magnetization information from OSZICAR and OUTCAR</span><span class="hljs-comment"># read file: POSCAR, OUTCAR, OSZICAR</span><span class="hljs-comment">#=====================================</span><span class="hljs-comment">#==== get dir ====</span><span class="hljs-built_in">dir</span>=$(<span class="hljs-built_in">basename</span> `<span class="hljs-built_in">pwd</span>`)<span class="hljs-built_in">echo</span> ---- <span class="hljs-built_in">dir</span>=<span class="hljs-variable">$dir</span> ----         &gt; magne_atom.dat<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;atom_nam  atom_mag&quot;</span>`   &gt;  magne.tmp<span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;========  ========&quot;</span>`   &gt;&gt; magne.tmpispin=$(grep ISPIN OUTCAR | awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span>)<span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$ispin</span>&quot;</span> = 2 ] ; <span class="hljs-keyword">then</span><span class="hljs-comment">#==== get atom_num ====</span>    num_tot=0    i_flag=0    atom_num=    atom_lis=    <span class="hljs-keyword">for</span> i_atom <span class="hljs-keyword">in</span> $(sed -n <span class="hljs-string">&#x27;6p&#x27;</span> POSCAR) ; <span class="hljs-keyword">do</span>                i_flag=$[ i_flag + 1 ]        j_flag=0    <span class="hljs-comment">#echo i_atom=$i_atom    i_flag=$i_flag</span>        <span class="hljs-keyword">for</span> j_num <span class="hljs-keyword">in</span> $(sed -n <span class="hljs-string">&#x27;7p&#x27;</span> POSCAR) ; <span class="hljs-keyword">do</span>            j_flag=$[ j_flag + 1 ]    <span class="hljs-comment">#echo j_num=$j_num      j_flag=$j_flag</span>                <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$i_flag</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$j_flag</span>&quot;</span> ] ; <span class="hljs-keyword">then</span>                atom_num=<span class="hljs-variable">$atom_num</span>\ <span class="hljs-variable">$i_atom</span>\_<span class="hljs-variable">$j_num</span>                num_tot=$[ num_tot + j_num ]                    <span class="hljs-keyword">for</span> k_elem <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 <span class="hljs-variable">$j_num</span>) ; <span class="hljs-keyword">do</span>                   atom_lis=<span class="hljs-variable">$atom_lis</span>\ <span class="hljs-variable">$i_atom</span>    <span class="hljs-comment">#echo i_atom=$i_atom</span>                <span class="hljs-keyword">done</span>                <span class="hljs-keyword">fi</span>        <span class="hljs-keyword">done</span>    <span class="hljs-keyword">done</span><span class="hljs-comment">#==== get mag_tota ====</span>    mag_tota=$(grep <span class="hljs-string">&quot;mag&quot;</span> OSZICAR |<span class="hljs-built_in">tail</span> -1| awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.4f \n&quot;, $10&#125;&#x27;</span>)    <span class="hljs-comment">#==== get mag_atom ====    </span>    start_line=$(grep -n <span class="hljs-string">&#x27;magnetization (x)&#x27;</span> OUTCAR | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;:&quot;</span> -f 1 | <span class="hljs-built_in">tail</span> -1)    mag_atom=    mag_flag=0    <span class="hljs-keyword">for</span> i_line <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 <span class="hljs-variable">$num_tot</span>) ; <span class="hljs-keyword">do</span>        line_num=$[ start_line + 3 + i_line ]        mag=$(awk <span class="hljs-string">&#x27;NR==&#x27;</span><span class="hljs-variable">$line_num</span><span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span> OUTCAR)        mag_atom=<span class="hljs-variable">$mag_atom</span>\ <span class="hljs-variable">$mag</span>        atom_nam=$( <span class="hljs-built_in">echo</span> <span class="hljs-variable">$atom_lis</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot; &quot;</span> -f <span class="hljs-variable">$i_line</span> )            <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$( echo <span class="hljs-string">&quot; ( <span class="hljs-variable">$mag</span> &lt; 0.01) &amp;&amp; ( <span class="hljs-variable">$mag</span> &gt; -0.01 )&quot;</span> |bc)</span>&quot;</span> = 1 ] ; <span class="hljs-keyword">then</span>            mag_flag=$[ mag_flag + 1 ]        <span class="hljs-keyword">fi</span>                <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$atom_nam</span>  <span class="hljs-variable">$mag</span>&quot;</span>`      &gt;&gt; magne.tmp        <span class="hljs-keyword">done</span>        <span class="hljs-built_in">echo</span> mag_flag=<span class="hljs-variable">$mag_flag</span> num_tot=<span class="hljs-variable">$num_tot</span>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$mag_flag</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$num_tot</span>&quot;</span> ] ; <span class="hljs-keyword">then</span>            ispin=1        <span class="hljs-keyword">else</span>            ispin=2        <span class="hljs-keyword">fi</span>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;--------  --------&quot;</span>`   &gt;&gt; magne_atom.dat    <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;mag_tota  <span class="hljs-variable">$mag_tota</span>&quot;</span>`  &gt;&gt; magne_atom.dat<span class="hljs-keyword">fi</span>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%10s\t %10s\t \n&#x27;</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ISPIN=    <span class="hljs-variable">$ispin</span>&quot;</span>`     &gt;&gt; magne_atom.dat        <span class="hljs-built_in">cat</span> magne.tmp &gt;&gt; magne_atom.dat<span class="hljs-built_in">cat</span> magne.tmp<span class="hljs-built_in">cat</span> magne_atom.dat<span class="hljs-built_in">rm</span> magne.tmp<span class="hljs-built_in">rm</span> magne_atom.dat&#125;<span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;mag-script&gt;&gt;&gt;&gt;##########################################</span><span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;sort-script&gt;&gt;&gt;&gt;#########################################</span><span class="hljs-function"><span class="hljs-title">f05</span></span>()&#123;<span class="hljs-comment">#!/bin/bash</span><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;File Name : &quot;</span> namesdata=$(<span class="hljs-built_in">cat</span> <span class="hljs-variable">$names</span>)<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;*********input data*********&quot;</span><span class="hljs-built_in">cat</span> <span class="hljs-variable">$names</span><span class="hljs-comment"># 按照第一列数据大小排序</span>sorted_data=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$data</span>&quot;</span> | <span class="hljs-built_in">sort</span> -n)<span class="hljs-comment"># 输出排序结果</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;*********output data********* &quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$sorted_data</span>&quot;</span> &gt; new_<span class="hljs-variable">$names</span><span class="hljs-built_in">cat</span> new_<span class="hljs-variable">$names</span>&#125;<span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;sort-script&gt;&gt;&gt;&gt;#########################################</span><span class="hljs-comment">##############################################&lt;&lt;&lt;&lt;job-monitor&gt;&gt;&gt;&gt;#########################################</span><span class="hljs-function"><span class="hljs-title">f00</span></span>()&#123;<span class="hljs-comment">#!/bin/bash</span><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ] ; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: speek [-e] [-f] jobid&quot;</span>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot; -e: show error log.\n -f: output appended data as the file grows.\n\nYour jobs are:&quot;</span>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$USER</span> != <span class="hljs-string">&#x27;root&#x27;</span> ]; <span class="hljs-keyword">then</span>        squeue -u <span class="hljs-variable">$USER</span> -t r -o <span class="hljs-string">&quot;%.8i %10P %12j %19S %.12M %.7C %.5D %R&quot;</span>    <span class="hljs-keyword">else</span>        squeue -t r -o <span class="hljs-string">&quot;%.8i %10u %10P %12j %19S %.12M  %.7C %.5D %R&quot;</span>    <span class="hljs-keyword">fi</span>    <span class="hljs-built_in">exit</span><span class="hljs-keyword">fi</span>NO=1STD=StdOut<span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&#x27;ef&#x27;</span> OPT; <span class="hljs-keyword">do</span>    <span class="hljs-keyword">case</span> <span class="hljs-variable">$OPT</span> <span class="hljs-keyword">in</span>        e)           STD=StdErr           ;;        f)           T=<span class="hljs-string">&#x27;-f&#x27;</span>           ;;    <span class="hljs-keyword">esac</span><span class="hljs-keyword">done</span>JOBID=<span class="hljs-variable">$&#123;!#&#125;</span>F=`scontrol show job <span class="hljs-variable">$JOBID</span> 2&gt;/dev/null | awk -v STD=<span class="hljs-variable">$STD</span> -F= <span class="hljs-string">&#x27;&#123;if($1~&#x27;</span>STD<span class="hljs-string">&#x27;) print $2&#125;&#x27;</span>`<span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;<span class="hljs-variable">$F</span>&quot;</span> ]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">tail</span> <span class="hljs-variable">$T</span> <span class="hljs-variable">$F</span><span class="hljs-keyword">else</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Job <span class="hljs-variable">$JOBID</span> has no <span class="hljs-variable">$STD</span> file or you have no authority to access.&quot;</span><span class="hljs-keyword">fi</span>&#125;<span class="hljs-comment">###########################################&lt;&lt;&lt;job-monitor&gt;&gt;&gt;#############################################</span><span class="hljs-comment">###########################################&lt;&lt;&lt;clear-some-files&gt;&gt;&gt;########################################</span><span class="hljs-function"><span class="hljs-title">f06</span></span>()&#123;<span class="hljs-comment">#!/bin/bash</span><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;continuely GeoOpt？(y/n) : &quot;</span> input<span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$input</span>&quot;</span> = <span class="hljs-string">&quot;y&quot;</span> ]; <span class="hljs-keyword">then</span>        <span class="hljs-built_in">rm</span> CHG CHGCAR DOSCAR IBZKPT OSZICAR REPORT WAVECAR XDATCAR vasprun.xml OUTCAR EIGENVAL PCDAT        find . -maxdepth 1 -name <span class="hljs-string">&#x27;*.out&#x27;</span> -delete        <span class="hljs-built_in">mv</span> POSCAR POSCAR.init        <span class="hljs-built_in">mv</span> CONTCAR CONTCAR.init        <span class="hljs-built_in">cp</span> CONTCAR.init POSCAR        sed -i <span class="hljs-string">&#x27;/\bEDIFF\b/s/.*/EDIFF = 1E-5/&#x27;</span> INCAR        sed -i <span class="hljs-string">&#x27;/\bEDIFFG\b/s/.*/EDIFFG = -0.02/&#x27;</span> INCAR        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Updated the POSCAR successfully !&quot;</span><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$input</span>&quot;</span> = <span class="hljs-string">&quot;n&quot;</span> ]; <span class="hljs-keyword">then</span>        <span class="hljs-built_in">rm</span> CHG CHGCAR DOSCAR IBZKPT OSZICAR REPORT WAVECAR XDATCAR vasprun.xml OUTCAR EIGENVAL PCDAT        find . -maxdepth 1 -name <span class="hljs-string">&#x27;*.out&#x27;</span> -delete        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Just removed the old output files !&quot;</span><span class="hljs-keyword">else</span>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Nothing was done !&quot;</span><span class="hljs-keyword">fi</span>&#125;<span class="hljs-comment">#########################################&lt;&lt;&lt;clear-some-files&gt;&gt;&gt;###########################################</span><span class="hljs-comment">###########################################&lt;&lt;&lt;&lt;control-script&gt;&gt;&gt;&gt;#########################################</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This script is for GeoOpt monitor !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;---------------------------------------------------------                                               </span><span class="hljs-string">01) Energy-Force</span><span class="hljs-string">02) Lattice-Difference</span><span class="hljs-string">03) Summary-GeoOpt</span><span class="hljs-string">04) Mag-Variation</span><span class="hljs-string">05) Data-Sort</span><span class="hljs-string">06) Clear-Some-Files</span><span class="hljs-string">00) sbatch-job-monitor </span><span class="hljs-string">---------------------------------------------------------&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Here you can choose the tasks as shown above ----&gt; &quot;</span><span class="hljs-built_in">read</span> task<span class="hljs-keyword">case</span> <span class="hljs-variable">$task</span> <span class="hljs-keyword">in</span>    01) f01 ;;    02) f02 ;;    03) f03 ;;    04) f04 ;;    05) f05 ;;    06) f06 ;;    00) f00 ;;    *)  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;please check the inputation !&quot;</span> ;;<span class="hljs-keyword">esac</span><span class="hljs-comment">###########################################&lt;&lt;&lt;&lt;control-script&gt;&gt;&gt;&gt;#########################################</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒狗科研（二）</title>
      <link href="/2023/10/10/blog-shell-vasp-script-2/"/>
      <url>/2023/10/10/blog-shell-vasp-script-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="辅助脚本（by-Uncle-yang）"><a href="#辅助脚本（by-Uncle-yang）" class="headerlink" title="辅助脚本（by Uncle-yang）"></a>辅助脚本（by Uncle-yang）</h1><p>自己写的一个小脚本，用于免除大量重复操作：</p><ul><li>结构优化后自洽的参数辅助修改</li><li>自洽完成后能带态密度参数辅助修改以及后处理</li><li>自洽完成后bader和ELF计算参数修改以及后处理</li></ul><pre><code class="hljs bash"><span class="hljs-comment">#！/bin/bash</span><span class="hljs-comment"># Attention ! Make sure you finished GeoOpt calculation and stay in the GeoOpt directory waiting for the next step !</span><span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;scf-script&gt;&gt;&gt;&gt;#######################################################</span><span class="hljs-function"><span class="hljs-title">scf</span></span>()&#123;<span class="hljs-built_in">mkdir</span> scf<span class="hljs-built_in">cp</span> INCAR KPOINTS POTCAR slurm.sh scf/<span class="hljs-built_in">cp</span> CONTCAR scf/POSCAR<span class="hljs-built_in">cd</span> scf/sed -i <span class="hljs-string">&#x27;/\bISTART\b/s/.*/ISTART = 0/&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bICHARG\b/s/.*/ICHARG = 2/&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bLWAVE\b/s/.*/LWAVE = .TRUE./&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bLCHARG\b/s/.*/LCHARG = .TRUE./&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bIBRION\b/s/.*/IBRION = -1/&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bNSW\b/s/.*/NSW = 0/&#x27;</span> INCAR<span class="hljs-built_in">cd</span> ..<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Attention ! All arguments rely on your calculation system !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Attention ! Check the value of IBRION, NSW, ENCUT, ISMEAR, SIGMA, KPOINTS !&quot;</span>&#125;<span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;scf-script&gt;&gt;&gt;&gt;#######################################################</span><span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;band-script&gt;&gt;&gt;&gt;######################################################</span><span class="hljs-function"><span class="hljs-title">band</span></span>()&#123;<span class="hljs-built_in">cd</span> scf/<span class="hljs-built_in">mkdir</span> band<span class="hljs-built_in">cp</span> INCAR POSCAR POTCAR WAVECAR CHGCAR slurm.sh band/<span class="hljs-built_in">mv</span> band/ ..<span class="hljs-built_in">cd</span> ../band/sed -i <span class="hljs-string">&#x27;/\bISTART\b/s/.*/ISTART = 1/&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bICHARG\b/s/.*/ICHARG = 11/&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bLWAVE\b/s/.*/LWAVE = .FALSE./&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bLCHARG\b/s/.*/LCHARG = .FALSE./&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bISMEAR\b/s/.*/ISMEAR = 0/&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bSIGMA\b/s/.*/SIGMA = 0.05/&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bLORBIT\b/s/.*/LORBIT = 11/&#x27;</span> INCAR<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;3\n302\n&quot;</span> | vaspkit &gt; information<span class="hljs-built_in">cp</span> KPATH.<span class="hljs-keyword">in</span> KPOINTS<span class="hljs-built_in">cd</span> ..<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Attention ! Check the value of SIGMA, LORBIT, NBANDS !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Attention ! Use primitive-cell to do band calculation !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Attention ! Check the KPATH whether it meets your system !&quot;</span>&#125;<span class="hljs-function"><span class="hljs-title">band_data_process</span></span>()&#123;<span class="hljs-built_in">cd</span> band/<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;21\n211\n1\n&quot;</span>| vaspkit &gt; information<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;61\n&quot;</span>| yang<span class="hljs-built_in">cd</span> ..&#125;<span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;band-script&gt;&gt;&gt;&gt;######################################################</span><span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;dos-script&gt;&gt;&gt;&gt;######################################################</span><span class="hljs-function"><span class="hljs-title">dos</span></span>()&#123;<span class="hljs-built_in">cd</span> scf/<span class="hljs-built_in">mkdir</span> dos<span class="hljs-built_in">cp</span> INCAR KPOINTS POSCAR POTCAR WAVECAR CHGCAR slurm.sh dos/<span class="hljs-built_in">mv</span> dos/ ..<span class="hljs-built_in">cd</span> ../dos/sed -i <span class="hljs-string">&#x27;/\bISTART\b/s/.*/ISTART = 1/&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bICHARG\b/s/.*/ICHARG = 11/&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bLWAVE\b/s/.*/LWAVE = .FALSE./&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bLCHARG\b/s/.*/LCHARG = .FALSE./&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bISMEAR\b/s/.*/ISMEAR = -5/&#x27;</span> INCARsed -i <span class="hljs-string">&#x27;/\bLORBIT\b/s/.*/LORBIT = 11/&#x27;</span> INCAR<span class="hljs-built_in">cd</span> ..<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Attention ! Check the value of LORBIT, NEDOS, ISMEAR !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Attention ! All arguments rely on your calculation system !&quot;</span>&#125;<span class="hljs-function"><span class="hljs-title">dos_data_process</span></span>()&#123;<span class="hljs-built_in">cd</span> dos/<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;11\n111\n1\n&quot;</span>| vaspkit &gt; information<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;71\n&quot;</span>| yang <span class="hljs-built_in">cd</span> ..&#125;<span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;dos-script&gt;&gt;&gt;&gt;######################################################</span><span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;ELF-script&gt;&gt;&gt;&gt;######################################################</span><span class="hljs-function"><span class="hljs-title">ELF</span></span>()&#123;<span class="hljs-built_in">cd</span> scf/<span class="hljs-built_in">mkdir</span> ELF<span class="hljs-built_in">cp</span> POSCAR POTCAR WAVECAR slurm.sh ELF/<span class="hljs-built_in">mv</span> ELF/ ..<span class="hljs-built_in">cd</span> ../ELF/<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;1\n101\nEL\n&quot;</span>| vaspkit &gt; information<span class="hljs-built_in">cd</span> ..&#125;<span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;ELF-script&gt;&gt;&gt;&gt;######################################################</span><span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;bader-script&gt;&gt;&gt;&gt;####################################################</span><span class="hljs-function"><span class="hljs-title">bader_charge</span></span>()&#123;<span class="hljs-built_in">cd</span> scf/<span class="hljs-built_in">mkdir</span> bader<span class="hljs-built_in">cp</span> POSCAR POTCAR slurm.sh bader/<span class="hljs-built_in">mv</span> bader/ ..<span class="hljs-built_in">cd</span> ../bader/<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;1\n101\nBD\n&quot;</span>| vaspkit &gt; information<span class="hljs-built_in">cd</span> ..&#125;<span class="hljs-function"><span class="hljs-title">bader_data_process</span></span>()&#123;<span class="hljs-built_in">cd</span> bader/chgsum.pl AECCAR0 AECCAR2 <span class="hljs-built_in">wait</span>bader CHGCAR -ref CHGCAR_sum <span class="hljs-built_in">cd</span> ..&#125;<span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;bader-script&gt;&gt;&gt;&gt;#####################################################</span><span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;auto-script&gt;&gt;&gt;&gt;#####################################################</span><span class="hljs-function"><span class="hljs-title">auto_submit</span></span>()&#123;<span class="hljs-built_in">cd</span> band/ sbatch slurm.sh<span class="hljs-built_in">cd</span> ..<span class="hljs-built_in">cd</span> dos/sbatch slurm.sh<span class="hljs-built_in">cd</span> ..<span class="hljs-comment">## cd ELF/</span><span class="hljs-comment">## sbatch slurm.sh</span><span class="hljs-comment">## cd ..</span><span class="hljs-comment">## cd bader/</span><span class="hljs-comment">## sbatch slurm.sh</span><span class="hljs-comment">## cd ..</span>&#125;<span class="hljs-function"><span class="hljs-title">auto_process</span></span>()&#123;<span class="hljs-built_in">cd</span> band/ <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;21\n211\n1\n&quot;</span>| vaspkit &gt; information<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;61\n&quot;</span>| yang<span class="hljs-built_in">cd</span> ..<span class="hljs-built_in">cd</span> dos/<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;11\n111\n1\n&quot;</span>| vaspkit &gt; information<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;71\n&quot;</span>| yang <span class="hljs-built_in">cd</span> ..<span class="hljs-comment">## cd bader/</span><span class="hljs-comment">## chgsum.pl AECCAR0 AECCAR2 </span><span class="hljs-comment">## wait</span><span class="hljs-comment">## bader CHGCAR -ref CHGCAR_sum </span><span class="hljs-comment">## cd ..</span>&#125;<span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;auto-script&gt;&gt;&gt;&gt;#####################################################</span><span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;control-script&gt;&gt;&gt;&gt;###################################################</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This script is used to help you to be a lazy dog !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Attention ! Make sure you finished GeoOpt calculation and stay in the GeoOpt directory !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Attention ! SCF calculation must be the first step before you start NONSCF calculation !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;-----------------------------------------------------------------------------------------</span><span class="hljs-string">1) scf                                               </span><span class="hljs-string">2) band(2D)                                            </span><span class="hljs-string">3) band-plot(simple view)                                  </span><span class="hljs-string">4) dos(2D)                                                       </span><span class="hljs-string">5) dos-plot(simple view)                                            </span><span class="hljs-string">6) ELF                                                             </span><span class="hljs-string">7) bader                                                             </span><span class="hljs-string">8) bader_data_process                                </span><span class="hljs-string">9)  auto_submit(band&amp;&amp;dos)                                            </span><span class="hljs-string">10) auto_process(band&amp;&amp;dos)                                           </span><span class="hljs-string">-----------------------------------------------------------------------------------------&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Here you can choose the tasks as shown above ----&gt; &quot;</span><span class="hljs-built_in">read</span> task<span class="hljs-keyword">case</span> <span class="hljs-variable">$task</span> <span class="hljs-keyword">in</span>    1) scf ;;    2) band ;;    3) band_data_process ;;    4) dos ;;    5) dos_data_process ;;    6) ELF ;;    7) bader_charge ;;    8) bader_data_process ;;    9) auto_submit ;;    10) auto_process ;;    *) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;please check the inputation !&quot;</span> ;;<span class="hljs-keyword">esac</span><span class="hljs-comment">#############################################&lt;&lt;&lt;&lt;control-script&gt;&gt;&gt;&gt;###################################################</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒狗科研（一）</title>
      <link href="/2023/09/25/blog-shell-vasp-script-1/"/>
      <url>/2023/09/25/blog-shell-vasp-script-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="辅助脚本（by-Uncle-yang）"><a href="#辅助脚本（by-Uncle-yang）" class="headerlink" title="辅助脚本（by Uncle-yang）"></a>辅助脚本（by Uncle-yang）</h1><p>自己写的一个小脚本，用于免除大量重复操作：</p><ul><li>参数测试脚本生成及简单数据处理</li><li>创建任务目录以及复制相关文件</li><li>调度其他辅助脚本的操作主盘</li></ul><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;slurm-script&gt;&gt;&gt;&gt;#####################################</span></span>f11()&#123;cat &gt; slurm.sh &lt;&lt;EOF<span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><span class="hljs-meta prompt_">#</span><span class="language-bash">SBATCH -J vasp                                 <span class="hljs-comment">## Job name</span></span><span class="hljs-meta prompt_">#</span><span class="language-bash">SBATCH -N 1                                    <span class="hljs-comment">## Number of nodes</span></span><span class="hljs-meta prompt_">#</span><span class="language-bash">SBATCH --ntasks-per-node=64                    <span class="hljs-comment">## Each node has 64 tasks</span></span><span class="hljs-meta prompt_">#</span><span class="language-bash">SBATCH -p xahcnormal                           <span class="hljs-comment">## operation Partition</span></span><span class="hljs-meta prompt_">#</span><span class="language-bash">SBATCH -t 10:00:00                             <span class="hljs-comment">## time for your job eg:02-02:02:02 means 2d2h2min2s</span></span>module purgemodule load compiler/intel/2017.5.239module load mpi/intelmpi/2017.4.239export MKL_DEBUG_CPU_TYPE=5  export MKL_CBWR=AVX2      export I_MPI_PIN_DOMAIN=numa   <span class="hljs-meta prompt_">#</span><span class="language-bash">srun --mpi=pmi2  /path/to/vasp_std</span>srun --mpi=pmi2 /work/home/yanglei1/software/vasp.5.4.4/bin/vasp_stdEOF&#125;<span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;slurm-script&gt;&gt;&gt;&gt;#####################################</span></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;encut-script&gt;&gt;&gt;&gt;#####################################</span></span>f21()&#123;cat &gt; encut.sh &lt;&lt;&#x27;EOF&#x27;<span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>num=&quot;300 350 400 450 500&quot;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">remove the old <span class="hljs-built_in">dirs</span></span>for i in $num ; do rm -rf Encut$i; done<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">make a <span class="hljs-built_in">set</span> of <span class="hljs-built_in">dirs</span> <span class="hljs-keyword">for</span> encut <span class="hljs-built_in">test</span></span>for i in $num ; domkdir Encut$i &amp;&amp; cd Encut$icp ../INCAR .cp ../POTCAR .cp ../POSCAR .cp ../KPOINTS .cp ../slurm.sh .sed -i &quot;s/^.*\\bENCUT\\b.*$/ENCUT = $i/&quot; INCARsbatch slurm.sh cd ..doneEOF&#125;f22()&#123;rm encut.datfor dir in Encut*; do        Encut=$(grep &quot;ENCUT&quot; $dir/INCAR | tail -1 | awk &#x27;&#123;print $3&#125;&#x27;)        Energy=$(grep &quot;  without&quot; $dir/OUTCAR | tail -1 | awk &#x27;&#123;printf &quot;%12.6f\n&quot;, $4&#125;&#x27;)        echo $Encut $Energy &gt;&gt; encut.datdonecat encut.datcat &gt; encut.py &lt;&lt;EOF<span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/env python3</span>import matplotlib.pyplot as pltimport numpy as npx,y = np.loadtxt(&#x27;encut.dat&#x27;, delimiter = &#x27; &#x27;, usecols=(0, 1), unpack=True)plt.xlabel(&#x27;ENCUT/eV&#x27;)plt.ylabel(&#x27;Total energy/eV&#x27;)plt.plot(x,y, &#x27;rs-&#x27;, linewidth=2.0)plt.savefig(&#x27;encut.png&#x27;)plt.show()EOFpython3 encut.py&#125;<span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;encut-script&gt;&gt;&gt;&gt;#####################################</span></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;sigma-script&gt;&gt;&gt;&gt;#####################################</span></span>f31()&#123;cat &gt; sigma.sh &lt;&lt;&#x27;EOF&#x27;<span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><span class="hljs-meta prompt_"># </span><span class="language-bash">remove the old <span class="hljs-built_in">dirs</span></span>start=0.01step=0.01end=0.09sequence=$(seq $start $step $end)for i in $sequence ; do rm -rf Sigma$i; done<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">make a <span class="hljs-built_in">set</span> of <span class="hljs-built_in">dirs</span> <span class="hljs-keyword">for</span> sigma <span class="hljs-built_in">test</span></span>for i in $sequence ; domkdir Sigma$i &amp;&amp; cd Sigma$icp ../INCAR .cp ../POTCAR .cp ../POSCAR .cp ../KPOINTS .cp ../slurm.sh .sed -i &quot;s/^.*\\bSIGMA\\b.*$/SIGMA = $i/&quot; INCARsbatch slurm.sh cd ..doneEOF&#125;f32()&#123;rm sigma.datfor dir in Sigma*; do        r=$(grep &quot;SIGMA&quot; $dir/INCAR | tail -1 | awk &#x27;&#123;print $3&#125;&#x27;)        TS=$(grep &quot;entropy T&quot; $dir/OUTCAR | tail -1 | awk &#x27;&#123;printf &quot;%12.8f \n&quot;, $5&#125;&#x27;)        echo $r $TS &gt;&gt; sigma.datdonecat sigma.datcat &gt; sigma.py &lt;&lt;EOF<span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/env python3</span>import matplotlib.pyplot as pltimport numpy as npx,y = np.loadtxt(&#x27;sigma.dat&#x27;, delimiter = &#x27; &#x27;, usecols=(0, 1), unpack=True)plt.xlabel(&#x27;sigma/eV&#x27;)plt.ylabel(&#x27;total energy/eV&#x27;)plt.plot(x,y, &#x27;rs-&#x27;, linewidth=2.0)plt.savefig(&#x27;sigma.png&#x27;)plt.show()EOFpython3 sigma.py&#125;<span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;sigma-script&gt;&gt;&gt;&gt;#####################################</span></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;kpoints-script&gt;&gt;&gt;&gt;#####################################</span></span>f41()&#123;cat &gt; kpoints.sh &lt;&lt;&#x27;EOF&#x27;<span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>num=&quot;3 4 5 6 7&quot;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">remove the old <span class="hljs-built_in">dirs</span></span>for i in $num ; do rm -rf $&#123;i&#125;$&#123;i&#125;$&#123;i&#125;; done<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">make a <span class="hljs-built_in">set</span> of <span class="hljs-built_in">dirs</span> <span class="hljs-keyword">for</span> kpoints <span class="hljs-built_in">test</span></span>for i in $num ; domkdir $&#123;i&#125;$&#123;i&#125;$&#123;i&#125; &amp;&amp; cd $&#123;i&#125;$&#123;i&#125;$&#123;i&#125;cp ../INCAR .cp ../POTCAR .cp ../POSCAR .cp ../KPOINTS .cp ../slurm.sh .<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">here you need to modify</span> sed -i &quot;4s/3 3 3/$i $i $i/g&quot; KPOINTSsbatch slurm.sh cd ..doneEOF&#125;f42()&#123;rm kpoints.datfor dir in */ ; do        TS=$(grep &quot;irreducible&quot; $dir/OUTCAR | tail -1 | awk &#x27;&#123;printf &quot;%5i \n&quot;, $2&#125;&#x27;)        En=$(grep &quot;  without&quot; $dir/OUTCAR | tail -1 | awk &#x27;&#123;printf &quot;%12.6f \n&quot;, $4&#125;&#x27;)        echo $TS $En &gt;&gt; kpoints.datdonecat kpoints.datcat &gt; kpoints.py &lt;&lt;EOF<span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/env python3</span>import matplotlib.pyplot as pltimport numpy as npx,y = np.loadtxt(&#x27;kpoints.dat&#x27;, delimiter = &#x27; &#x27;, usecols=(0, 1), unpack=True)plt.xlabel(&#x27;kpoints/number&#x27;)plt.ylabel(&#x27;total energy/eV&#x27;)plt.plot(x,y, &#x27;rs-&#x27;, linewidth=2.0)plt.savefig(&#x27;kpoints.png&#x27;)plt.show()EOFpython3 kpoints.py&#125;<span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;kpoints-script&gt;&gt;&gt;&gt;#####################################</span></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;director-script&gt;&gt;&gt;&gt;#####################################</span></span>f51()&#123;echo &quot;This script is used to make some new directories !&quot;echo &quot;Make sure to stay in the GeoOpt directory right now !&quot;echo &quot;&quot;&quot;-----------------------------------------------------1) scf2) dos3) band4) ELF5) bader6) phonon-----------------------------------------------------&quot;&quot;&quot;echo &quot;Here you can choose tasks as shown above ----&gt; &quot;read inputscase $inputs in         1)        mkdir scf        cp INCAR KPOINTS CONTCAR POTCAR slurm.sh scf/        mv scf/CONTCAR scf/POSCAR        echo &quot;scf directory writing successfully !&quot;        ;;        2)        mkdir dos        cp INCAR KPOINTS POSCAR POTCAR WAVECAR CHGCAR slurm.sh dos/        echo &quot;dos directory writing successfully !&quot;        ;;        3)        mkdir band        cp INCAR POSCAR POTCAR WAVECAR CHGCAR slurm.sh band/        echo &quot;band directory writing successfully !&quot;        ;;        4)        mkdir ELF        cp INCAR POSCAR POTCAR WAVECAR slurm.sh ELF/        echo &quot;ELF directory writing successfully !&quot;        ;;        5)        mkdir bader        cp POSCAR POTCAR slurm.sh bader/        echo &quot;bader directory writing successfully !&quot;        ;;        6)        mkdir phonon        cp CONTCAR POTCAR KPOINTS slurm.sh phonon/        echo &quot;phonon directory writing successfully !&quot;        ;;esac&#125;<span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;director-script&gt;&gt;&gt;&gt;#####################################</span></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;bandplot-script&gt;&gt;&gt;&gt;#####################################</span></span>f61()&#123;<span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>echo -e &quot;check your directory : scf/ band/ dos/ , all of them are existing in the same directory GeoOpt/ \n &quot;<span class="hljs-meta prompt_"># </span><span class="language-bash">Fermi level of scf</span>fermi=`grep E-fermi ../scf/OUTCAR | awk &#x27;&#123;printf &quot;%12.6f \n&quot;, $3 &#125;&#x27;`fermi_number=`grep efermi ../scf/vasprun.xml -n | awk &#x27;&#123;printf &quot;%d\n&quot;, $1&#125;&#x27;`echo -e &quot;fermi level of scf : \n $fermi_number $fermi&quot;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">Fermi level of dos</span>cp ../dos/vasprun.xml dos_vasprun.xmldosfermi1_number=`grep efermi dos_vasprun.xml -n | awk &#x27;&#123;printf &quot;%d\n&quot;, $1&#125;&#x27;`dosfermi1=`grep efermi dos_vasprun.xml | awk &#x27;&#123;printf &quot;%12.6f \n&quot;, $3 &#125;&#x27;`echo -e &quot;fermi level of dos : \n $dosfermi1_number $dosfermi1&quot;sed -i &quot;/\befermi\b/s/.*/ &lt;i name=\&quot;efermi\&quot;&gt;      $fermi &lt;\/i&gt; /&quot; dos_vasprun.xmlsleep 1sdosfermi2=`grep efermi dos_vasprun.xml | awk &#x27;&#123;printf &quot;%12.6f \n&quot;, $3 &#125;&#x27;`echo &quot;After modfied, fermi level of dos : $dosfermi2&quot;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">Fermi level of band</span>cp vasprun.xml band_vasprun.xmlbandfermi1_number=`grep efermi band_vasprun.xml -n | awk &#x27;&#123;printf &quot;%d\n&quot;, $1&#125;&#x27;`bandfermi1=`grep efermi band_vasprun.xml | awk &#x27;&#123;printf &quot;%12.6f \n&quot;, $3 &#125;&#x27;`echo -e &quot;fermi level of band : \n $bandfermi1_number $bandfermi1&quot;sed -i &quot;/\befermi\b/s/.*/ &lt;i name=\&quot;efermi\&quot;&gt;      $fermi &lt;\/i&gt; /&quot; band_vasprun.xmlsleep 1sbandfermi2=`grep efermi band_vasprun.xml | awk &#x27;&#123;printf &quot;%12.6f \n&quot;, $3 &#125;&#x27;`echo -e &quot;After modfied, fermi level of band : $bandfermi2 \n&quot;<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">plot the banddos</span>cat &gt; xxx_banddos_plot_py_xxx &lt;&lt;EOFimport matplotlib.pyplot as pltfrom pymatgen.electronic_structure.plotter import (BSDOSPlotter, BSPlotter,                                                   BSPlotterProjected,                                                   DosPlotter)from pymatgen.io.vasp.outputs import Vasprun<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">read</span> vasprun.xml，get band and dos information</span>bs_vasprun = Vasprun(&quot;band_vasprun.xml&quot;,parse_projected_eigen=True)bs_data = bs_vasprun.get_band_structure(line_mode=True)dos_vasprun=Vasprun(&quot;dos_vasprun.xml&quot;)dos_data=dos_vasprun.complete_dos<span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">set</span> figure parameters, draw figure</span>banddos_fig = BSDOSPlotter(bs_projection=&quot;elements&quot;,                           dos_projection=&quot;elements&quot;,                           vb_energy_range=4,                           cb_energy_range=3,                           font = &#x27;Times New Roman&#x27;,                           axis_fontsize = 36,                           tick_fontsize = 28,                           legend_fontsize = 28,                           fig_size = (30,20))banddos_fig.get_plot(bs=bs_data, dos=dos_data)plt.savefig(&#x27;banddos.pdf&#x27;)plt.savefig(&#x27;banddos.svg&#x27;)EOFpython3 xxx_banddos_plot_py_xxx&#125;<span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;bandplot-script&gt;&gt;&gt;&gt;#####################################</span></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;dosplot-script&gt;&gt;&gt;&gt;######################################</span></span>f71()&#123;cat &gt; dosplot.py &lt;&lt;EOF<span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/env bash</span>import matplotlib.pyplot as pltfrom pymatgen.io.vasp.outputs import Vasprunfrom pymatgen.electronic_structure.plotter import BSDOSPlotter,BSPlotter,BSPlotterProjected,DosPlotter<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">read</span> vasprun.xml and get band and dos information</span>bs_vasprun=Vasprun(&quot;./vasprun.xml&quot;,parse_projected_eigen=True)bs_data=bs_vasprun.get_band_structure(line_mode=False)dos_vasprun=Vasprun(&quot;./vasprun.xml&quot;)dos_data=dos_vasprun.complete_dos<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">set</span> figure parameters, draw figure</span>plt_dos = DosPlotter(stack=False, sigma=0.5) # sigma is changableplt_dos.add_dos(&#x27;total dos&#x27;,dos=dos_data)plt_dos.add_dos_dict(dos_data.get_spd_dos())plt_dos.save_plot(&#x27;dosspd.pdf&#x27;,img_format=&#x27;pdf&#x27;)EOFpython3 dosplot.py&#125;<span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;dosplot-script&gt;&gt;&gt;&gt;######################################</span></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;control-script&gt;&gt;&gt;&gt;######################################</span></span>echo &quot;This script is for helping to do some tasks !&quot;echo &quot;&quot;&quot;---------------------------------------------------------11) generate slurm.sh21) generate encut.sh          22) encut-data-process31) generate sigma.sh          32) sigma-data-process41) generate kpoints.sh        42) kpoints-data-process                            51) taskin-script                61) band-plot.py                71) dosspd-plot.py 81) task-managemant-for-2D-material91) task-managemant-for-3D-material                                              01) task-managemant-for-monitoring-GeoOpt-process---------------------------------------------------------&quot;&quot;&quot;echo &quot;Here you can choose the tasks as shown above ----&gt; &quot;read taskcase $task in    11) f11 ;;    21) f21 &amp;&amp; f11 ;;    22) f22 ;;    31) f31 &amp;&amp; f11 ;;    32) f32 ;;    41) f41 &amp;&amp; f11 ;;    42) f42 ;;    51) f51 ;;    61) f61 ;;    71) f71 ;;    81) exec ~/bin/auto2d ;;    91) exec ~/bin/auto3d ;;    01) exec ~/bin/looks ;;     *)  echo &quot;please check the inputation !&quot; ;;esac<span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#######################################&lt;&lt;&lt;&lt;control-script&gt;&gt;&gt;&gt;#####################################</span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本：费米能级对齐</title>
      <link href="/2023/09/10/blog-vasp-script-1/"/>
      <url>/2023/09/10/blog-vasp-script-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>想起来有个脚本没有优化，今追加一个自动对齐费米能级的脚本</p><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;check your directory : scf/ band/ dos/ , all of them are existing in the same directory GeoOpt/&quot;</span><span class="hljs-comment"># Fermi level of scf</span>fermi=`grep E-fermi ../scf/OUTCAR | awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.6f \n&quot;, $3 &#125;&#x27;</span>`fermi_number=`grep efermi ../scf/vasprun.xml -n | awk <span class="hljs-string">&#x27;&#123;printf &quot;%d\n&quot;, $1&#125;&#x27;</span>`<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;fermi level of scf : \n <span class="hljs-variable">$fermi_number</span> <span class="hljs-variable">$fermi</span>&quot;</span><span class="hljs-comment"># Fermi level of dos</span><span class="hljs-built_in">cp</span> ../dos/vasprun.xml dos_vasprun.xmldosfermi1_number=`grep efermi dos_vasprun.xml -n | awk <span class="hljs-string">&#x27;&#123;printf &quot;%d\n&quot;, $1&#125;&#x27;</span>`dosfermi1=`grep efermi dos_vasprun.xml | awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.6f \n&quot;, $3 &#125;&#x27;</span>`<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;fermi level of dos : \n <span class="hljs-variable">$dosfermi1_number</span> <span class="hljs-variable">$dosfermi1</span>&quot;</span>sed -i <span class="hljs-string">&quot;/\befermi\b/s/.*/ &lt;i name=\&quot;efermi\&quot;&gt;      <span class="hljs-variable">$fermi</span> &lt;\/i&gt; /&quot;</span> dos_vasprun.xml<span class="hljs-built_in">sleep</span> 1sdosfermi2=`grep efermi dos_vasprun.xml | awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.6f \n&quot;, $3 &#125;&#x27;</span>`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;After modfied, fermi level of dos : <span class="hljs-variable">$dosfermi2</span>&quot;</span><span class="hljs-comment"># Fermi level of band</span><span class="hljs-built_in">cp</span> vasprun.xml band_vasprun.xmlbandfermi1_number=`grep efermi band_vasprun.xml -n | awk <span class="hljs-string">&#x27;&#123;printf &quot;%d\n&quot;, $1&#125;&#x27;</span>`bandfermi1=`grep efermi band_vasprun.xml | awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.6f \n&quot;, $3 &#125;&#x27;</span>`<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;fermi level of band : \n <span class="hljs-variable">$bandfermi1_number</span> <span class="hljs-variable">$bandfermi1</span>&quot;</span>sed -i <span class="hljs-string">&quot;/\befermi\b/s/.*/ &lt;i name=\&quot;efermi\&quot;&gt;      <span class="hljs-variable">$fermi</span> &lt;\/i&gt; /&quot;</span> band_vasprun.xml<span class="hljs-built_in">sleep</span> 1sbandfermi2=`grep efermi band_vasprun.xml | awk <span class="hljs-string">&#x27;&#123;printf &quot;%12.6f \n&quot;, $3 &#125;&#x27;</span>`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;After modfied, fermi level of band : <span class="hljs-variable">$bandfermi2</span>&quot;</span><span class="hljs-comment"># plot the banddos</span><span class="hljs-built_in">cat</span> &gt; xxbanddosxx &lt;&lt;!import matplotlib.pyplot as pltfrom pymatgen.electronic_structure.plotter import (BSDOSPlotter, BSPlotter,                                                   BSPlotterProjected,                                                   DosPlotter)from pymatgen.io.vasp.outputs import Vasprun<span class="hljs-comment"># read vasprun.xml，get band and dos information</span>bs_vasprun = Vasprun(<span class="hljs-string">&quot;band_vasprun.xml&quot;</span>,parse_projected_eigen=True)bs_data = bs_vasprun.get_band_structure(line_mode=True)dos_vasprun=Vasprun(<span class="hljs-string">&quot;dos_vasprun.xml&quot;</span>)dos_data=dos_vasprun.complete_dos<span class="hljs-comment"># set figure parameters, draw figure</span>banddos_fig = BSDOSPlotter(bs_projection=<span class="hljs-string">&quot;elements&quot;</span>,                           dos_projection=<span class="hljs-string">&quot;elements&quot;</span>,                           vb_energy_range=4,                           cb_energy_range=3,                           font = <span class="hljs-string">&#x27;Times New Roman&#x27;</span>,                           axis_fontsize = 36,                           tick_fontsize = 28,                           legend_fontsize = 28,                           fig_size = (30,20))banddos_fig.get_plot(bs=bs_data, dos=dos_data)plt.savefig(<span class="hljs-string">&#x27;banddos.pdf&#x27;</span>)plt.savefig(<span class="hljs-string">&#x27;banddos.svg&#x27;</span>)!python3 xxbanddosxx</code></pre>]]></content>
      
      
      <categories>
          
          <category> scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VASP 学习笔记</title>
      <link href="/2023/08/27/blog-vasp-3/"/>
      <url>/2023/08/27/blog-vasp-3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计算演练（VASP）"><a href="#计算演练（VASP）" class="headerlink" title="计算演练（VASP）"></a>计算演练（VASP）</h1><h2 id="VASP资源整合"><a href="#VASP资源整合" class="headerlink" title="VASP资源整合"></a>VASP资源整合</h2><ul><li><p>大师兄教程 <a target="_blank" rel="noopener" href="https://www.bigbrosci.com/archives/page/2/">归档 | Learn VASP The Hard Way (bigbrosci.com)</a></p></li><li><p>侯柱峰教程 <a href="zotero://note/u/GZEU5SVZ/">VASP学习总结</a></p></li><li><p>VASPWiki查找关键词 <a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/The_VASP_Manual">The VASP Manual - Vaspwiki</a></p></li><li><p>b站视频讲解<a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1wo4y1U772/?spm_id_from=333.337.search-card.all.click&vd_source=69e13a57f1883975c63ddff3bda9877e">声子谱和二阶力常数矩阵</a>&amp;&amp;<a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1Nt4y1M7pC/?spm_id_from=333.788&vd_source=69e13a57f1883975c63ddff3bda9877e">VASP晶体结构优化</a></p></li></ul><h2 id="VASP辅助软件"><a href="#VASP辅助软件" class="headerlink" title="VASP辅助软件"></a>VASP辅助软件</h2><ul><li><p>vaspkit：文件生成以及数据后处理</p></li><li><p>material studio：建模（slab）以及晶胞原胞转换</p></li><li><p>VESTA：格式转换（.cif –.vasp）以及数据可视化（CHGCAR、ELF）</p></li><li><p>Origin：数据作图（.dat）</p></li><li><p>p4vasp：查看能带态密度图像（vasprun.xml）</p></li></ul><h2 id="VASP建模学习"><a href="#VASP建模学习" class="headerlink" title="VASP建模学习"></a>VASP建模学习</h2><ul><li><p><strong>material project 里面可以查到晶格弛豫的输入设置：Export as VASP Input Set （MPRelaxSet）</strong></p></li><li><p>一般使用（cif-symmetry）</p></li><li><p>MS模型例子库 D:\MSmaterials\Materials Studio 20.1\share\Structures\metals\pure-metals</p></li><li><p>原胞晶胞格式转换：MS：Build —&gt; Symmetry—&gt; primitive cell</p></li><li><p>phonopy –symmetry POSCAR（超——&gt;原）</p></li><li><p>惯用胞和原胞的格式转换：<a target="_blank" rel="noopener" href="https://blog.sciencenet.cn/blog-3222255-1072291.html">超(晶)胞&lt;——&gt;原胞</a></p></li><li><p>生成POSCAR：VESTA：file—&gt; export data</p></li><li><p>slab模型的结构优化：<a href="zotero://note/u/GZEU5SVZ/?line=19">VASP学习总结（PDF笔记）</a></p></li></ul><h2 id="VASP计算总结"><a href="#VASP计算总结" class="headerlink" title="VASP计算总结"></a>VASP计算总结</h2><pre><code class="hljs">结构优化</code></pre><ul><li><p>参考：<a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1wo4y1U772/?spm_id_from=333.337.search-card.all.click&vd_source=69e13a57f1883975c63ddff3bda9877e">VASP+Phonopy计算声子谱和二阶力常数矩阵的结构优化部分</a></p></li><li><p>不合理的结构会增加计算时间且会导致计算结果没意义！</p></li><li><p>生成INCAR：vaspkit：→ 1 → 101 → SR （注意修改测试参数）（可以控制不生成波函数和电荷密度）</p></li><li><p>生成POTCAR：vaspkit：→ 1 → 103/104（可以指定确定的POTCAR）</p></li><li><p>生成KPOINTS：vaspkit：→ 1 → 102 → 1/2/3 （K点需要修改测试）</p></li><li><p>计算前测试选参数 k-mesh，ENCUT，SIGMA</p></li><li><p>晶格常数的优化方法（状态方程或者直接ISIF参数，收敛性测试）</p></li><li><p>ISIF用来确定是否计算应力张量，以及允许哪些自由度在优化和分子动力学中改变。对于结构优化，其默认值为2，对于分子动力学，其默认值为0</p></li><li><p>如果晶胞来自于实验且希望计算时保持晶胞不变，则使用ISIF=2，只优化离子坐标而不优化晶胞的形状和体积；也可使用ISIF=0，忽略应力张量的计算，进一步加快计算速度</p></li><li><p>如果晶胞来自于各大晶体数据库，建议使用ISIF=3将离子位置、晶胞形状及体积一起优化，<strong>ISIF=3 必须配合 ENCUT参数</strong></p></li><li><p>关于ISIF参数以及结构优化相关的问题：<a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/354087431">结构优化 (zhihu.com)</a></p></li><li><p><a target="_blank" rel="noopener" href="https://www.bigbrosci.com/2018/02/05/ex36/?highlight=isif">Ex36 晶格参数的确定（直接优化晶格常数） | Learn VASP The Hard Way (bigbrosci.com)</a></p></li></ul><pre><code class="hljs maxima">测试（参数ENCUT，SIGMA，k-<span class="hljs-built_in">mesh</span>）</code></pre><ul><li><p>需要在高精度结构优化完毕之后再做测试！</p></li><li><p><strong>关于SIGMA</strong></p></li><li><p><strong>半导体和绝缘体：（只能取ISMEAR&lt;=0）</strong></p><p>  1）K点小于4 的时候，用ISMEAR=0, SIGMA取值小一些；比如SIGMA=0.05; 此时用ISMEAR = -5 会出错；</p><p>  2）K点数目大于4的时候，可以使用ISMEAR= -5；如果用了ISMEAR = -5； SIGMA的值可以忽略。</p></li><li><p><strong>金属：</strong></p></li><li><p>请使用 ISMEAR=1 或 ISMEAR=2 和适当的 <a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/SIGMA" title="SIGMA">SIGMA</a> 值（熵项应小于每个原子 1 meV），通常取SIGMA= 0.2，不放心的话，用0.05；</p></li><li><p><strong>体系不明确：</strong></p></li><li><p>取ISMEAR=0 和 <a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/SIGMA" title="SIGMA">SIGMA</a>=0.03~0.05。</p></li><li><p>VASP计算中不同的体系要求不同的ISMEAR值。</p><p>  ISMEAR决定了如何确定每个波函数的占有数 ，驰豫计算时一般不需要这个参数（可以设置为0）。进行任何的静态计算或态密度计算，且K点数目（从IBZKPT文件中读取）大于4时，取ISMEAR＝－5；当由于原胞较大而K点数目较少（小于4个）时，取ISMEAR＝0，并设置一个合适的SIGMA值。另外对半导体或绝缘体的计算（不论是静态还是结构优化），取ISMEAR＝－5;当体系呈现金属性时，取ISMEAR＝1和2，以及设置一个合适的SIGMA值。在进行能带结构计算时，ISMEAR 和SIGMA用默认值就好。</p><p>  一般说来，无论是对何种体系，进行何种性质的计算，采用ISMEAR＝0 ，并选择一个合适的SIGMA值都能得到合理的结果。</p></li><li><p><strong>关于ENCUT</strong></p></li><li><p>使用脚本循环第一个值通常取POTCAR中ENMAX（若有多个则取最大值），循环间隔一般取50eV；</p></li><li><p>在对体系的变体积结构优化时，要保证ENCUT=1.3*ENMAX，以便得到合理的精度；</p></li><li><p>很多人在刚开始做计算的时候，都会测试一个数值。如果不想测试，查找参考文献是一个很好的办法</p></li><li><p><strong>关于k-mesh</strong></p></li><li><p>计算完得到的K点数目与能量的对应值，总能变化在0.001eV左右</p></li><li><p>选取合适的K点和ENCUT，使结构中每个原子的能量差收敛至0.001 eV/atom,参考：<a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/343909692">《K点收敛性测试》</a>和<a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/348826693">《ENCUT收敛性测试》</a></p></li><li><p>一个10x10x10 \AA3的体相材料，我们计算的时候K点设置为：6x6x6。当我们将材料在x方向增加1倍，变为20x10x10 \AA3。为保持一致的精确度，那么我们的K点需要设置为：3x6x6，<strong>也就是在计算过程中，保持ka保持不变</strong></p></li><li><p>关于KPOINTS中的Gamma：如果你不确定自己的体系，直接用Gamma就可以</p></li><li><p><strong>常见误区</strong></p><p>  1）常见错误（一）： 体系中ENCUT的取值不统一；</p><p>  2）常见错误（二）：采用不同KPOINTS计算出来的结果;</p></li><li><p>关于输入文件的准备：<a target="_blank" rel="noopener" href="https://www.bigbrosci.com/2017/10/14/ex01/">Ex01 VASP基本输入文件的准备（壹） | Learn VASP The Hard Way (bigbrosci.com)</a></p></li><li><p>NCORE= 计算使用的核数 / NPAR。注意：这两个参数只能选取一个来使用</p></li><li><p>说明书上说一般设置为√N，例如对于我们使用的计算资源来讲，若你用2个节点，每个节点上有32个核，一共64个核，√64为8，那NPAR可以设为8，节点使用的越多，NPAR的影响就越大。（NCORE=8）</p></li></ul><pre><code class="hljs">scf单点能</code></pre><ul><li><p>建立新文件夹scf，同时复制结构优化文件夹下的CONTCAR POTCAR KPOINTS（ <a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/KPOINTS" title="KPOINTS">Γ-centered</a> <strong><a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/KPOINTS" title="KPOINTS">k</a></strong><a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/KPOINTS" title="KPOINTS">-mesh</a>）</p></li><li><p>将CONTCAR重命名为POSCAR</p></li><li><p>生成INCAR：vaspkit：→ 1 → 101 → ST</p></li><li><p>修改INCAR：<strong>定义ENCUT、ISTART=0、ICHARG=2、ISMEAR=-5，NSW=0，IBRION=-1</strong>（默认值）</p></li><li><p>ISMEAR=−5: tetrahedron method with Blöchl corrections (use a <a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/KPOINTS" title="KPOINTS">Γ-centered</a> <strong><a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/KPOINTS" title="KPOINTS">k</a></strong><a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/KPOINTS" title="KPOINTS">-mesh</a>)，ISMEAR=-5，不用考虑SIMGA的值</p></li><li><p>单点计算可以写入这两个参数，用于后续的dos计算（加大K点）和能带计算（手动指定）</p></li><li><p>LWAVE  = .TRUE.         (Write WAVECAR or not)</p></li><li><p>LCHARG = .TRUE.        (Write CHGCAR or not)</p></li><li><p>直接运行vasp，得到的若干文件可用于后续性质相关的计算</p></li><li><p>关于收敛性判断与精度设置：<a target="_blank" rel="noopener" href="https://www.bigbrosci.com/2017/12/02/ex09/">Ex09 学会收敛点! | Learn VASP The Hard Way (bigbrosci.com)</a></p></li></ul><pre><code class="hljs erlang"><span class="hljs-keyword">band</span>能带计算</code></pre><ul><li><p>建立新文件夹band，同时复制自洽文件夹scf下的INCAR POSCAR POTCAR WAVECAR CHGCAR</p></li><li><p>修改INCAR：<strong>ISTART=1，ICHAGE=11，LORBIT=10，并增加NBANDS的值，ISMEAR=0</strong> <a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/ISMEAR">ISMEAR - Vaspwiki</a></p></li><li><p>若停电需要续算，则修改INCAR：<strong>ISTART=1，ICHAGE=1</strong></p></li><li><p>K点路径生成：vaspkit → 3 → 301/302/303（1D/2D/Bulk） ，然后将 KPATH . in <strong>复制</strong>为 KPOINTS</p></li><li><p>直接运行vasp得到一系列文件（包括本征值文件EIGENVAL）</p></li><li><p>使用amset plot band vasprun.xml</p></li><li><p>使用pymatgen ，python代码实现：<a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/580857656">画能带（Band）和态密度（DOS）</a></p></li><li><p>使用p4vasp查看band：open → vasprun.xml → Electronic → DOS+bands</p></li><li><p>生成BAND.dat：vaspkit → 21 → 211 ，使用cat命令打开 BAND_GAP 查看带隙，BAND.dat用于Origin作图</p></li><li><p>注：四面体方法（ISMEAR = -5）适用于所有体系的DOS计算，但不适合计算能带</p></li><li><p>注：KPOINTS因计算硬件限制不能设置的很大，数目小于4的时候：对于所有体系均可以使用ISMEAR=0，但SIGMA的数值要测试一下</p></li><li><p>注：设置布里渊区 k 点网格取样大小或能带结构计算时的 k 点。分为自动产生和手动输入：手动选择 k 点只在能带计算的时候是必要的，在做优化和性质计算时我们通常选择自动产生 k 点（Gamma <a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/KPOINTS" title="KPOINTS">Γ-centered</a> <strong><a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/KPOINTS" title="KPOINTS">k</a></strong><a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/KPOINTS" title="KPOINTS">-mesh</a>）</p></li></ul><pre><code class="hljs gauss"><span class="hljs-keyword">dos</span>态密度计算</code></pre><ul><li><p>建立新文件夹dos，同时复制自洽文件夹scf下的INCAR POSCAR POTCAR KPOINTS WAVECAR CHGCAR</p></li><li><p>修改INCAR：<strong>ISTART=1，ICHAGE=11，LORBIT = 11，ISMEAR = -5，NEDOS=301</strong>（自定义）</p></li><li><p>修改KPOINTS：改为高密度的K点（此时即使增加K点的数目，电荷密度和有效势能的收敛依然很快）</p></li><li><p>直接运行vasp得到一系列文件</p></li><li><p>生成TDOS.dat：vaspkit → 21 → 211 （或者使用p4vasp导出）用于Origin作图</p></li><li><p>使用p4vasp查看DOS：open → vasprun.xml → Electronic → DOS+bands</p></li><li><p>使用p4vasp查看d-band：open → vasprun.xml → Electronic → Local DOS+bands control</p></li><li><p>当LORBIT=11时（p4vasp）点击dxy时，则仅仅选择dxy，其他的d轨道不会选中！</p></li><li><p><strong>注：对于PAW型赝势，采用LORBIT=10、11、12，此时就不需要考虑RWIGS值</strong></p></li><li><p>LORBIT = 10 把态密度分解到每个原子以及原子的spd轨道上面，称为为局域态密度，Local DOS (LDOS)</p></li><li><p>LORBIT =11 在10的基础上，还进一步分解到px，py，pz等轨道上，称为投影态密度（Projected DOS）或者分波态密度(Partial DOS)，即PDOS。</p></li><li><p>提示：如果 ICHARG 设置为 11 或 12，强烈建议将 <a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/LMAXMIX" title="LMAXMIX">LMAXMIX</a> 设置为赝势中最大 l 量子数的两倍。因此，对于 s 和 p 元素，LMAXMIX 应设置为 2，对于 d 元素，LMAXMIX 应设置为 4，对于 f 元素，<a target="_blank" rel="noopener" href="https://www.vasp.at/wiki/index.php/LMAXMIX" title="LMAXMIX">LMAXMIX</a> 应设置为 6</p></li><li><p>关于NEDOS产生的空行：<a target="_blank" rel="noopener" href="https://www.bigbrosci.com/2018/02/08/ex39/">Ex-39 DOS 计算(三) | Learn VASP The Hard Way (bigbrosci.com)</a></p></li><li><p>ISTART = 1 读取WAVECAR，为0则不读；关于WAVECAR有则读，无则不读</p></li><li><p>LWAVE =  .TRUE. 控制WAVECAR的输出</p></li><li><p>一步计算DOS（ ISMEAR = -5 ，LORBIT = 11，高密度的K点，然后处理DOSCAR和vasprun.xml文件即可 ）</p></li><li><p>两步计算DOS（其实相当于一步，将scf的部分文件复制，然后改INCAR和KPOINTS）</p></li><li><p>第一步：ISMEAR = -5，LCHARG = .TRUE.，低密度的K点（自洽scf的文件复制过来）</p></li><li><p>第二步：ISMEAR = -5，ICHARGE = 11（读取上一步的CHGCAR），LORBIT = 11，高密度的K点</p></li><li><p>若结构优化时，存了WAVECAR，计算DOS可以读取WAVECAR，直接一步计算搞定</p></li><li><p>注意，做DOS时复制自洽SCF的文件（CHGCAR，WAVECAR，KPOINTS）</p></li><li><p>注意，做DOS时复制BAND文件夹的文件（INCAR，POSCAR，POTCAR）</p></li></ul><pre><code class="hljs">ELF电子局域化函数</code></pre><ul><li><p>参考：<a target="_blank" rel="noopener" href="https://blog.sciencenet.cn/blog-567091-736154.html">科学网—差分电荷密度图、电荷局域密度图(ELF)的画法及分析 - 叶小球的博文 (sciencenet.cn)</a></p></li><li><p>建立新文件夹ELF，同时复制自洽文件夹scf下的POSCAR  POTCAR  WAVECAR</p></li><li><p>生成INCAR：vaspkit :→ 1 → 101 → EL （INCAR：LELF=.TRUE.）</p></li><li><p>直接运行vasp得到ELFCAR、CHGCAR文件，均可通过VESTA可视化</p></li><li><p>VESTA：打开ELFCAR–Utiltties–2D Data Display–Slice</p></li><li><p><strong>单位都是a.u.，即electron/bohr^3，程序不会自动修改格点数据值，单位也因此都是a.u.</strong></p></li><li><p>电荷密度等高线的2维投影： Slice是平面图，截取某一个面上的电荷密度分布；</p></li><li><p>电荷密度等高线：isosurfaces是立体图，晶格立体图中等电荷密度线(isosurface确定的值)的立体显示</p></li><li><p>通常电荷密度图、差分电荷密度图及ELF看原子间成键与否的效果都差不多， 也即用电荷密度图即可看出一般的成键情况 (来自自洽计算的CHGCAR，因算的是价电子，因此也称价电荷密度图)，只是成键非常不明显时，才看差分电荷密度图及ELF</p></li></ul><pre><code class="hljs mipsasm"><span class="hljs-keyword">bader电荷 </span></code></pre><ul><li><p>参考：<a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/541611145">VASP计算笔记-Bader电荷分析 - 知乎 (zhihu.com)</a></p></li><li><p>建立新文件夹Bader，同时复制自洽文件夹scf下的POSCAR POTCAR</p></li><li><p>生成INCAR：vaspkit :→ 1 → 101 → BD （INCAR：LAECHG =.TRUE.，LCHARG =.TRUE.）</p></li><li><p>可以在INCAR中手动调整FFT网格来获得精确电荷数字</p></li><li><p>直接运行vasp得到关键文件AECCAR0，AECCAR1，AECCAR2</p></li><li><p>运行命令：chgsum.pl AECCAR0 AECCAR2</p></li><li><p>再运行命令：bader CHGCAR -ref CHGCAR_sum</p></li><li><p>得到Bader的三个结果文件，ACF.dat, BCF.dat和AtomVolumes.dat，数据可以用来分析电荷转移情况</p></li></ul><pre><code class="hljs">phonon声子谱</code></pre><ul><li><p>参考：<a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/128081412">VASP计算笔记-声子谱计算 - 知乎 (zhihu.com)</a>，<a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/481680637#:~:text=BAND%20%E6%98%AF%E9%AB%98%E5%AF%B9%E7%A7%B0%E7%82%B9%E7%9A%84%E5%9D%90%E6%A0%87%EF%BC%8C%E4%B8%89%E4%B8%AA%E5%9D%90%E6%A0%87%E4%B8%BA%E4%B8%80%E7%BB%84%EF%BC%8C%E5%88%86%E5%88%AB%E4%BB%A3%E8%A1%A8%20XYZ%20%E6%96%B9%E5%90%91%EF%BC%8C%E4%B8%80%E7%BB%84%E4%B9%8B%E5%86%85%E6%AF%8F%E4%B8%AA%E5%9D%90%E6%A0%87%E7%94%A8,%E4%B8%80%E4%B8%AA%E7%A9%BA%E6%A0%BC%20%E9%9A%94%E5%BC%80%EF%BC%8C%E8%80%8C%E7%9B%B8%E9%82%BB%E4%B8%A4%E7%BB%84%E5%9D%90%E6%A0%87%EF%BC%88%E4%B8%A4%E4%B8%AA%E9%AB%98%E5%AF%B9%E7%A7%B0%E7%82%B9%E5%9D%90%E6%A0%87%EF%BC%89%E7%94%A8%20%E4%B8%A4%E4%B8%AA%E7%A9%BA%E6%A0%BC%20%E9%9A%94%E5%BC%80%E3%80%82">声子谱计算流程（VASP+phonopy） - 知乎 (zhihu.com)</a></p></li><li><p>使用phonopy的相关参数设置：<a target="_blank" rel="noopener" href="https://phonopy.github.io/phonopy/input-files.html">Input files — Phonopy v.2.20.0</a></p></li><li><p>建立新文件夹phonon，同时复制结构优化文件夹下的CONTCAR POTCAR KPOINTS</p></li><li><p>修改命名CONTCAR：POSCAR.init</p></li><li><p>生成超胞：phonopy -d –dim=”2 2 2” -c <strong>POSCAR.init</strong> 其中-c表示晶胞的名字，<strong>扩胞经验：10A</strong></p></li><li><p><strong>直接法/有限位移法（frozen-phonon）一般扩胞100个原子左右比较合适</strong></p></li><li><p>新建文件夹disp-*（有多少个POSCAR-*建立多少个文件夹）</p></li><li><p>将扩胞生成的POSCAR-00*放到每一个文件夹下并重新命名为POSCAR</p></li><li><p>生成INCAR，vaspkit：→ 1 → 101 → FD</p></li><li><p>修改INCAR，（增加NSW=0 、IBRION=-1）</p></li><li><p>修改KPOINTS，（可能需要测试）</p></li><li><p>将INCAR，KPOINTS、POTCAR复制到每一个文件夹下</p></li><li><p>在超算直接提交脚本同时运行vasp计算每一个文件夹下的单点能</p></li><li><p>新建文件band.conf，可利用vaspkit：305生成KPATH.phonopy，然后修改文件KPATH.phonopy（注意打开band.conf修改FORCE_CONSTANTS = WRITE）</p></li><li><p>然后依次运行如下命令</p>  <pre><code class="hljs jboss-cli"><span class="hljs-comment">#1. 提取动力学矩阵，进入disp-*的上一级文件夹，生成FORCE_SET</span>phonopy -f <span class="hljs-string">./disp-</span>*<span class="hljs-string">/vasprun.xml</span>    <span class="hljs-comment">#2. 计算声子谱并保存为pdf格式,同时生成FORCE_CONSTANTS</span>phonopy -c POSCAR.init band.conf -p -s    <span class="hljs-comment">#3. 将声子谱进一步输出为数据文件，用于其它软件画图。</span>phonopy-bandplot <span class="hljs-params">--gnuplot</span> &gt; phonon.out<span class="hljs-comment">#phonon.out文件中首行是高对称点在x轴上的坐标</span></code></pre></li><li><p><strong>密度泛函微扰理论/线性响应法 (DFPT)</strong></p></li><li><p>mv SPOSCAR POSCAR</p></li><li><p>生成INCAR，vaspkit：→ 1 → 101 → DT</p></li><li><p>修改INCAR（增加NSW=1 、NELM=100、NELMDL=-5）</p></li><li><p>修改KPOINTS，（可能需要测试）</p></li><li><p>直接运行vasp</p></li><li><p>新建文件band.conf，可利用vaspkit：305生成KPATH.phonopy，然后修改文件KPATH.phonopy（注意打开band.conf修改FORCE_CONSTANTS = READ）</p></li><li><p>然后依次运行如下命令</p>  <pre><code class="hljs stylus">#<span class="hljs-number">1</span>. 提取力常数，得到FORCE_CONSTANTS文件。   phonopy <span class="hljs-attr">--fc</span> vasprun<span class="hljs-selector-class">.xml</span>#<span class="hljs-number">2</span>. 计算声子谱并保存为pdf格式   phonopy -c POSCAR<span class="hljs-selector-class">.init</span> band<span class="hljs-selector-class">.conf</span> -<span class="hljs-selector-tag">p</span> -s （-<span class="hljs-selector-tag">p</span>:plot,-s:save as PDF）#<span class="hljs-number">3</span>. 将声子谱进一步输出为数据文件，用于其它软件画图。     phonopy-bandplot <span class="hljs-attr">--gnuplot</span> &gt; phonon<span class="hljs-selector-class">.out</span><span class="hljs-selector-id">#phonon</span>.out文件中首行是高对称点在x轴上的坐标</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vasp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QE 自动化安装</title>
      <link href="/2023/08/24/blog-qe-installation/"/>
      <url>/2023/08/24/blog-qe-installation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>考虑到有蛮多小兄弟在安装QE上犯愁，笔者在此写了一个安装脚本，实现一键部署安装QE以及自动测试.</p><p>执行命令：bash qe.sh<br>测试版本：QE-7.2<br>测试环境：Ubuntu 18.04.6 LTS<br>压缩包名称：qe-7.2-ReleasePack.tar.gz<br>测试例子文件夹名称：exam-si</p><p>备注：由于时间关系只测试了安装 pw ph pp pwcond neb 这几个模块<br>备注：全套文件百度网盘可下载: <em><a target="_blank" rel="noopener" href="https://pan.baidu.com/s/1RV2nHVsyAa0BH5bMSnX1Jg?pwd=6666">https://pan.baidu.com/s/1RV2nHVsyAa0BH5bMSnX1Jg?pwd=6666</a> 提取码: 6666</em></p><p>脚本: qe.sh </p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This script is used to help install qe-7.2, if you meet any problem please copy your question to Goolge or Bing !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Just install these modules: pw ph pp pwcond neb !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Understand ? (yes/no)&quot;</span><span class="hljs-built_in">read</span> <span class="hljs-built_in">yes</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ok, then it&#x27;s time to install now -------------------------------------------------------&quot;</span><span class="hljs-function"><span class="hljs-title">f_clear</span></span>()&#123;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;clear environment for installation !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;here you need to enter your password !&quot;</span>sudo apt autoremove gfortran -ysudo apt autoremove libblas-dev -ysudo apt autoremove liblapack-dev -ysudo apt autoremove libfftw3-dev -ysudo apt autoremove openmpi-bin libopenmpi-dev -ysudo apt autoremove make -y<span class="hljs-built_in">wait</span>&#125;<span class="hljs-function"><span class="hljs-title">f_build</span></span>()&#123;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;build environment for installation !&quot;</span>sudo apt install gfortran -ysudo apt install libblas-dev -ysudo apt install liblapack-dev -ysudo apt install libfftw3-dev -ysudo apt install openmpi-bin libopenmpi-dev -ysudo apt install make -y<span class="hljs-built_in">wait</span> &#125;<span class="hljs-function"><span class="hljs-title">f_install</span></span>()&#123;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;be ready to install qe-7.2 !&quot;</span>tar -zxvf qe-7.2-ReleasePack.tar.gz<span class="hljs-built_in">wait</span><span class="hljs-built_in">cd</span> qe-7.2 &amp;&amp; make vearyclean./configure<span class="hljs-built_in">wait</span>make pwall<span class="hljs-built_in">cd</span> ~<span class="hljs-built_in">wait</span>&#125;<span class="hljs-function"><span class="hljs-title">f_path</span></span>()&#123;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=\$PATH:~/qe-7.2/bin&quot;</span> &gt;&gt; ~/.bashrc<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=\$PATH:/usr/lib/x86_64-linux-gnu/openmpi/bin&quot;</span> &gt;&gt; ~/.bashrc<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu/openmpi/lib&quot;</span>&gt;&gt; ~/.bashrc<span class="hljs-built_in">wait</span>. ~/.bashrc&#125;<span class="hljs-built_in">cd</span> ~<span class="hljs-built_in">rm</span> -rf qe-7.2<span class="hljs-built_in">rm</span> -rf exam-si<span class="hljs-built_in">wait</span><span class="hljs-built_in">cd</span> qexx/<span class="hljs-built_in">cp</span> -r exam-si ~<span class="hljs-built_in">cp</span> qe-7.2-ReleasePack.tar.gz ~<span class="hljs-built_in">wait</span><span class="hljs-built_in">cd</span> ~f_clear &amp;&amp; f_build &amp;&amp; f_install &amp;&amp; f_path<span class="hljs-built_in">rm</span> qe-7.2-ReleasePack.tar.gz<span class="hljs-built_in">wait</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This is an example for testing installation !&quot;</span><span class="hljs-built_in">cd</span> ~/exam-si/mpirun -np 4 pw.x &lt; si | <span class="hljs-built_in">tee</span> si.out<span class="hljs-built_in">cd</span> ~<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;install successfully !&quot;</span></code></pre><p>例子文件夹exam-si所包含文件： si  Si_r.upf<br>赝势文件可直接复制: cp qe-7.2/pseudo/Si_r.upf ~</p><pre><code class="hljs java">&amp;<span class="hljs-type">CONTROL</span>    <span class="hljs-variable">calculation</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;scf&quot;</span>    restart_mode =<span class="hljs-string">&#x27;from_scratch&#x27;</span>    prefix = <span class="hljs-string">&#x27;si&#x27;</span>    outdir = <span class="hljs-string">&#x27;./outdir&#x27;</span>    pseudo_dir   = <span class="hljs-string">&quot;./&quot;</span>    tstress = .<span class="hljs-literal">true</span>.    tprnfor = .<span class="hljs-literal">true</span>./&amp;<span class="hljs-type">SYSTEM</span>    <span class="hljs-variable">ibrav</span>       <span class="hljs-operator">=</span> <span class="hljs-number">2</span> , celldm(<span class="hljs-number">1</span>) = <span class="hljs-number">10.3356908159</span>,    nat         = <span class="hljs-number">2</span>    ntyp        = <span class="hljs-number">1</span>    ecutwfc     = <span class="hljs-number">40</span>    ecutrho     = <span class="hljs-number">320</span>/&amp;<span class="hljs-type">ELECTRONS</span>    <span class="hljs-variable">mixing_beta</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.7</span>    conv_thr = <span class="hljs-number">1e-8</span>/K_POINTS &#123;automatic&#125;  <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>ATOMIC_SPECIESSi     <span class="hljs-number">28.08550</span>  Si_r.upfATOMIC_POSITIONS &#123;alat&#125;Si      <span class="hljs-number">0.000000</span>   <span class="hljs-number">0.000000</span>   <span class="hljs-number">0.000000</span>Si      <span class="hljs-number">0.250000</span>   <span class="hljs-number">0.250000</span>   <span class="hljs-number">0.250000</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>报错问题汇总</title>
      <link href="/2023/08/06/blog-debug/"/>
      <url>/2023/08/06/blog-debug/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><h2 id="解决手段"><a href="#解决手段" class="headerlink" title="解决手段"></a>解决手段</h2><ul><li><p>Youself</p></li><li><p>Google</p></li><li><p>ChatAI</p></li></ul><h2 id="报错系列"><a href="#报错系列" class="headerlink" title="报错系列"></a><strong>报错系列</strong></h2><p>ModuleNotFoundError: No module named ‘matplotlib’ （vaspkit -211命令作图报错）</p><ul><li><p>问题发生的本源：使用 sudo 安装的 matplotlib 和 使用 conda 安装的 matplotlib 作用优先级不同（可以理解为干涉）</p></li><li><p>使用sudo pip install matplotlib（已换源），则安装的matplotlib具有全局优先级，会覆盖使用conda直接安装（没有建立虚拟环境）的matplotlib，导致vaspkit调用的matplotlib实质上是pip 安装的matplotlib，而vaspkit调用的matplotlib路径在conda里面，因此vaspkit在调用的时候会报错：找不到matplotlib</p></li><li><p>解决方案：卸载使用sudo pip强制安装的matplotlib，重新使用pip 直接安装（需要换源）</p></li><li><p>忽视 Defaulting to user installation because normal site-packages is not writeable，等待安装结束即可</p></li></ul><p>command not found</p><ul><li><p>多半是拼写或者是路径的问题！</p></li><li><p>文件路径问题：绝对路径应该以一个斜杠 / 开始，比如 /home/lei/bin/bader</p></li></ul><p>grep “TOTEN” OUTCAR | tail -1 | awk ‘{printf “%12.6f \n”, $5 }’</p><ul><li><p>awk处理文本，注意单引号不要忘记！注意区分符号，以及反引号转义字符！</p></li><li><p>关于case命令的函数，直接复制你设定的函数名，command not found，多半是拼写的问题！</p></li></ul><p>Defaulting to user installation because normal site-packages is not writeable</p><ul><li><p>这个问题其实是安装权限问题，它告诉你默认选择当前用户安装，忽视即可，因此作用域也在你当前的用户</p></li><li><p>如果安装半天没反应，可以试试换源： <a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/398020802">Python：Defaulting to user installation because normal site-packages is not writeable</a></p></li></ul><p>pip install 之后没反应，多半是源的问题，需要换源来处理</p><ul><li><p><a target="_blank" rel="noopener" href="https://blog.csdn.net/skyyzq/article/details/113417832">python pip 换国内源的办法（永久和临时两种办法）_pip换源</a></p></li><li><p>如果在使用pip安装软件时报错，根据报错补全相关依赖库即可，python的软件极度依赖相关库</p></li><li><p>在虚拟环境中安装的软件需要先打开虚拟环境才可以使用（比如conda的phonopy）</p></li></ul><p>BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES = RANK 0 PID 283516 RUNNING AT DESKTOP-NS9R0G8 = KILLED BY SIGNAL: 9 (Killed)</p><ul><li>是由于本地计算机算力不够和内存不足导致。解决办法是减小k点至1 1 1，或者减小扩胞的数量。</li></ul><p>“FORCE_SETS” was not found“</p><ul><li>FORCE_CONSTANTS = WRITE问题在于这个应该是READ（密度泛函微扰法）</li></ul><p>Number of atoms in supercell (128) is not consistent with the matrix shape of force constants (16, 16) read from FORCE_CONSTANTS. Please carefully check DIM, FORCE_CONSTANTS, and CONTCAR.</p><ul><li><p>扩胞的问题，查看原子数，检查原胞与晶胞，其中超胞的原子数（初始晶胞✖扩胞xyz的倍数）</p></li><li><p>因为之前使用的CONTCAR，在DPFT提交运算之后会生成新的CONTCAR覆盖原来的CONTCAR导致扩胞之前的文件变成了跟超胞一样的文件，所以会出现超胞和力常数的不匹配现象！解决办法，从一开始就把CONTCAR命名为POSCAR.init，然后再扩胞进行计算</p></li></ul><p>RuntimeError: Number of forces is not consistent with supercell setting.</p><ul><li>超胞设置有问题，根源在于文件命名CONTCAR发生覆盖，原胞和超胞对于计算声子谱是有影响的</li></ul><p>ValueError: too many values to unpack (expected 2)</p><ul><li>phonopy -fc vasprun.xml应该改为phonopy –fc vasprun.xml</li></ul><h2 id="安装系列"><a href="#安装系列" class="headerlink" title="安装系列"></a><strong>安装系列</strong></h2><p>安装包管理器（conda）：<a target="_blank" rel="noopener" href="https://docs.conda.io/en/latest/miniconda.html#installing">Miniconda — conda documentation</a></p><p>pip与conda相关问题集合：<a target="_blank" rel="noopener" href="https://www.cnblogs.com/IllidanStormrage/p/15787580.html">conda命令大全: 安装，更新，创建，激活，关闭，查看，卸载，删除，清理，重命名，换源，问题</a></p><p>conda env list 查看现有环境</p><p><strong>安装phonopy</strong></p><p>安装完conda，开始使用conda安装phonopy。可以给phonopy创建一个专门的conda环境：</p><pre><code class="hljs shell"><span class="hljs-meta prompt_">% </span><span class="language-bash">conda create -n myphonopy -c conda-forge   <span class="hljs-comment"># 创建虚拟环境myphonopy</span></span><span class="hljs-meta prompt_">% </span><span class="language-bash">conda activate myphonopy                   <span class="hljs-comment"># 激活虚拟环境</span></span><span class="hljs-meta prompt_">% </span><span class="language-bash">conda install -c conda-forge phonopy</span></code></pre><p><strong>安装pymatgen</strong></p><p>安装完conda，开始使用conda安装pymatgen。可以给pymatgen创建一个专门的conda环境：</p><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>conda create -n mypymatgen python           <span class="hljs-comment"># 创建虚拟环境mypymatgen</span><span class="hljs-variable">$ </span>conda activate mypymatgen                   <span class="hljs-comment"># 激活虚拟环境</span><span class="hljs-variable">$ </span>conda install --channel conda-forge pymatgen</code></pre><h2 id="linux知识"><a href="#linux知识" class="headerlink" title="linux知识"></a><strong>linux知识</strong></h2><ul><li><p>ln -s f1 f2 软连接</p></li><li><p>ln f1 f2 硬链接</p></li><li><p>区别在于软连接依赖另外一个连接；硬链接没有依赖关系，都指向硬盘的一个区域</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行集成</title>
      <link href="/2023/08/03/blog-linux-vasp/"/>
      <url>/2023/08/03/blog-linux-vasp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="命令行集成"><a href="#命令行集成" class="headerlink" title="命令行集成"></a><strong>命令行集成</strong></h1><h2 id="slurm"><a href="#slurm" class="headerlink" title="slurm"></a>slurm</h2><ul><li><p>tail OUTCAR                                            查看任务运行情况，暂停终端ctrl+s，继续终端ctrl+q，退出命令ctrl+c</p></li><li><p>squeue                                                   查看作业号：JOBID下面的数字</p></li><li><p>scancel JOBID                                         取消作业号：JOBID下面的数字</p></li><li><p>sbatch slurm.sh                                       批处理作业（命令行终端关闭不影响作业运行）</p></li><li><p>srun slurm.sh（？）                                 交互式提交作业（命令行终端关闭则作业终止）</p></li><li><p>salloc （？）                                           为分配资源并启动一个shell，然后用此shell执行srun命令去执行并行任务</p></li><li><p>sacct                                                      显示已完成作业或作业的记账信息</p></li><li><p>scontrol  show job                                   查看作业、节点和队列等信息</p></li><li><p>sattach [options] &lt;jobid.stepid&gt;               监测到运行中的作业步的标准输入、输出及出错，监控运行中的作业步的IO等</p></li><li><p>speek JOBID                                           默认显示正常屏幕输出，如加-f参数，则连续监测输出；如加-e参数，则监测错误日志                </p></li><li><p><a target="_blank" rel="noopener" href="https://scc.ustc.edu.cn/zlsc/user_doc/html/slurm/index.html">Slurm作业调度系统 — 中国科大超级计算中心用户使用手册 ：2023-06-29版 文档 (ustc.edu.cn)</a></p></li></ul><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><ul><li><p>display file / eog file / xdg-open file              直接通过终端的命令打开图片img，关闭窗口：Alt+F4</p></li><li><p>evince filename                                          直接通过终端的命令打开pdf，关闭窗口：Alt+F4</p></li><li><p>cp ~/XXXX .                                               复制家目录下的XXXX到当前文件夹下</p></li><li><p>cp ../XXXX .                                               复制上一级的XXXX到当前文件夹下</p></li><li><p>vim：gg / shift+g                                       vi模式下快捷跳到首行 / 末行</p></li><li><p>head -n 10                                                显示首页十行</p></li><li><p>tail -n 10                                                   显示末尾十行</p></li><li><p>|| and |                                                     || 运算符：命令执行失败仍继续执行后续命令。| 运算符：命令执行完毕的结果往后传递</p></li><li><p>&amp; and &amp;&amp;                                                  &amp;&amp;运算符：命令执行失败则停止执行后续命令。&amp;描述符：&amp;&gt;file 标准输出和标准错误输出都重定向到file</p></li><li><p>$()  &lt;=&gt;  ``                                             $()与反引号``等价，都用于命令替换</p></li><li><p>$a   &lt;=&gt;  ${}                                           $a与${}等价，都用于变量替换</p></li></ul><h2 id="vaspkit"><a href="#vaspkit" class="headerlink" title="vaspkit"></a>vaspkit</h2><ul><li><p>vaspkit：→ 1 → 101 → SR/ST                     生成INCAR（选择合适的类型再修改）</p></li><li><p>vaspkit：→ 1 → 103/104                            生成POTCAR（特殊的类型需要指定）</p></li><li><p>vaspkit：→ 1 → 102 → 1/2/3                      生成KPOINTS（需要指定精度）</p></li><li><p>vaspkit：→ 3 → 301/302/303                      生成能带计算所需的K点路径（1D/2D/Bulk）</p></li><li><p>vaspkit：→ 21 → 211                                 生成TDOS.dat</p></li><li><p>vaspkit：→ 21 → 211                                 生成BAND.dat</p></li></ul><h2 id="phonopy"><a href="#phonopy" class="headerlink" title="phonopy"></a>phonopy</h2><ul><li><p>phonopy –symmetry POSCAR                       原胞晶胞转换（BP：PP：）</p></li><li><p>phonopy -d –dim=”5 5 5” -c POSCAR.init      扩胞，其中-c表示晶胞的名字</p></li></ul><p>有限位移法：</p><ul><li><p>phonopy -f */vasprun.xml                            提取动力学矩阵，进入上一级文件夹，生成FORCE_SET  </p></li><li><p>phonopy -c POSCAR-unitcell band.conf -p -s   计算声子谱并保存为pdf格式,同时生成FORCE_CONSTANTS</p></li><li><p>phonopy-bandplot –gnuplot &gt; phonon.out     将声子谱进一步输出为数据文件，用于其它软件画图</p></li></ul><p>密度泛函微扰法：  </p><ul><li><p>phonopy –fc vasprun.xml                            提取力常数，得到FORCE_CONSTANTS文件</p></li><li><p>phonopy -c POSCAR-unitcell band.conf -p -s  计算声子谱并保存为pdf格式（-p:plot,-s:save as PDF）</p></li><li><p>phonopy-bandplot –gnuplot &gt; phonon.out    将声子谱进一步输出为数据文件，用于其它软件画图</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vasp </tag>
            
            <tag> slurm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell+python 作图脚本</title>
      <link href="/2023/07/31/blog-10-shell-scripts/"/>
      <url>/2023/07/31/blog-10-shell-scripts/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="plot-by-pymatgen"><a href="#plot-by-pymatgen" class="headerlink" title="plot by pymatgen"></a>plot by pymatgen</h1><h2 id="dosplot"><a href="#dosplot" class="headerlink" title="dosplot"></a>dosplot</h2><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/env bash</span><span class="hljs-built_in">cat</span> &gt; dosplot.py &lt;&lt;!import matplotlib.pyplot as pltfrom pymatgen.io.vasp.outputs import Vasprunfrom pymatgen.electronic_structure.plotter import BSDOSPlotter,BSPlotter,BSPlotterProjected,DosPlotter<span class="hljs-comment"># read vasprun.xml，get band and dos information</span>bs_vasprun=Vasprun(<span class="hljs-string">&quot;./vasprun.xml&quot;</span>,parse_projected_eigen=True)bs_data=bs_vasprun.get_band_structure(line_mode=False)dos_vasprun=Vasprun(<span class="hljs-string">&quot;./vasprun.xml&quot;</span>)dos_data=dos_vasprun.complete_dos<span class="hljs-comment"># set figure parameters, draw figure</span>plt_dos = DosPlotter(stack=False)        <span class="hljs-comment"># plt_dos = DosPlotter(stack=False,sigma=0.5), here you can choose sigma</span>plt_dos.add_dos(<span class="hljs-string">&#x27;total dos&#x27;</span>,dos=dos_data)plt_dos.add_dos_dict(dos_data.get_spd_dos())plt_dos.save_plot(<span class="hljs-string">&#x27;dosspd.pdf&#x27;</span>,img_format=<span class="hljs-string">&#x27;pdf&#x27;</span>)!python3 dosplot.pyevince dosspd.pdf</code></pre><h2 id="bandplot"><a href="#bandplot" class="headerlink" title="bandplot"></a>bandplot</h2><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/env bash</span><span class="hljs-built_in">cat</span> &gt; bandplot.py &lt;&lt;!import matplotlib.pyplot as pltfrom pymatgen.io.vasp.outputs import Vasprunfrom pymatgen.electronic_structure.plotter import BSDOSPlotter,\BSPlotter,BSPlotterProjected,DosPlotter<span class="hljs-comment"># read vasprun.xml，get band and dos information</span>bs_vasprun = Vasprun(<span class="hljs-string">&quot;./vasprun.xml&quot;</span>,parse_projected_eigen=True)bs_data = bs_vasprun.get_band_structure(line_mode=True)dos_vasprun=Vasprun(<span class="hljs-string">&quot;./vasprun.xml&quot;</span>)dos_data=dos_vasprun.complete_dos<span class="hljs-comment"># set figure parameters, draw figure</span>banddos_fig = BSDOSPlotter(bs_projection=None, dos_projection=None, vb_energy_range=5, fixed_cb_energy=5)banddos_fig.get_plot(bs=bs_data, dos=dos_data)plt.savefig(<span class="hljs-string">&#x27;banddos.png&#x27;</span>)!python3 bandplot.pydisplay banddos.png</code></pre><p><em>reference：<a target="_blank" rel="noopener" href="https://mp.weixin.qq.com/s/y7if55laqS-R16It-QGUiw">https://mp.weixin.qq.com/s/y7if55laqS-R16It-QGUiw</a></em></p>]]></content>
      
      
      <categories>
          
          <category> scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mermaid 基础语法</title>
      <link href="/2023/07/28/blog-mermaid/"/>
      <url>/2023/07/28/blog-mermaid/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script type="module">      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';    </script><h1 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h1><p>Mermaid是一种基于Javascript的绘图工具，使用类似于Markdown的语法，使用户可以方便快捷地通过代码创建图表</p><h2 id="Mermaid绘图功能"><a href="#Mermaid绘图功能" class="headerlink" title="Mermaid绘图功能"></a>Mermaid绘图功能</h2><p>饼状图：使用pie关键字<br>流程图：使用graph关键字<br>序列图：使用sequenceDiagram关键字<br>甘特图：使用gantt关键字<br>类图：使用classDiagram关键字<br>状态图：使用stateDiagram关键字<br>用户旅程图：使用journey关键字</p><h2 id="Mermaid绘图示例"><a href="#Mermaid绘图示例" class="headerlink" title="Mermaid绘图示例"></a>Mermaid绘图示例</h2><h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><pre><code class="hljs ada">pie%%  注意冒号的格式！    title 为什么不喜欢做计算？    <span class="hljs-string">&quot;理论基础学不会&quot;</span> : 100    <span class="hljs-string">&quot;报错搞我心态&quot;</span> : 600    <span class="hljs-string">&quot;很喜欢做计算&quot;</span> : 50    <span class="hljs-string">&quot;不好找工作&quot;</span>: <span class="hljs-number">600</span></code></pre><pre><code class="hljs mermaid">pie    title 为什么不喜欢做计算？    &quot;理论基础学不会&quot; : 225    &quot;报错搞我心态&quot; : 255    &quot;很喜欢做计算&quot; : 100    &quot;不好找工作&quot; : 450</code></pre><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><pre><code class="hljs erlang-repl"><span class="hljs-comment">%% LR：从左往右</span><span class="hljs-comment">%% BT：从下往上</span>flowchart  LR;F--&gt;D;S--&gt;D;C--&gt;D;D&lt;--&gt;M;</code></pre><pre><code class="hljs mermaid">%% LR：从左往右%% BT：从下往上flowchart  LR;F--&gt;D;S--&gt;D;C--&gt;D;D&lt;--&gt;M;</code></pre><h3 id="结点边框"><a href="#结点边框" class="headerlink" title="结点边框"></a>结点边框</h3><pre><code class="hljs scss">graph    默认方形    id1<span class="hljs-selector-attr">[方形]</span>    <span class="hljs-built_in">id2</span>(圆边矩形)    <span class="hljs-built_in">id3</span>([体育场形])    id4<span class="hljs-selector-attr">[[子程序形]</span>]    id5<span class="hljs-selector-attr">[(圆柱形)]</span>    <span class="hljs-built_in">id6</span>((圆形))</code></pre><pre><code class="hljs mermaid">graph    默认方形    id1[方形]    id2(圆边矩形)    id3([体育场形])    id4[[子程序形]]    id5[(圆柱形)]    id6((圆形))</code></pre><h3 id="多重链"><a href="#多重链" class="headerlink" title="多重链"></a>多重链</h3><pre><code class="hljs brainfuck"><span class="hljs-comment">graph</span>    <span class="hljs-comment">a</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">b &amp; c</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">d</span>      <span class="hljs-comment">A &amp; B</span><span class="hljs-literal">--</span>&gt; <span class="hljs-comment">C &amp; D</span>       <span class="hljs-comment">X</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">M</span>    <span class="hljs-comment">X</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">N</span>    <span class="hljs-comment">Y</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">M</span>    <span class="hljs-comment">Y</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">N</span></code></pre><pre><code class="hljs mermaid">graph    a --&gt; b &amp; c--&gt; d      A &amp; B--&gt; C &amp; D       X --&gt; M    X --&gt; N    Y --&gt; M    Y --&gt; N</code></pre><h3 id="测试文本"><a href="#测试文本" class="headerlink" title="测试文本"></a>测试文本</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mermaid&quot;</span>&gt;</span>  graph LR      A --- B      B--&gt;C[fa:fa-ban forbidden]      B--&gt;D(fa:fa-spinner);    <span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">      <span class="hljs-keyword">import</span> mermaid <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs&#x27;</span>;</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><p>文本渲染存在问题</p></blockquote><p><em>参考链接：<a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/355997933">https://zhuanlan.zhihu.com/p/355997933</a></em><br><em>参考笔记（markdown高级用法）：<a target="_blank" rel="noopener" href="https://www.runoob.com/markdown/md-advance.html">https://www.runoob.com/markdown/md-advance.html</a></em></p>]]></content>
      
      
      <categories>
          
          <category> grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mermaid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据流</title>
      <link href="/2023/07/26/blog-data-flow/"/>
      <url>/2023/07/26/blog-data-flow/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="65f68fe855623c40b8ce9f62c3bf5eb366da4c9e6ef17090683cf053ace0e465">29f3454c03c5428f51d8ff21195ddc569c79cba39e0883634a70b95d16aa20c958a080cd357a684c535ed4c706d7665065df4874d648f8c08aa8f06b4d594ef78e76b029e957105c1f25199e5f71b149a4aa88bc6c91517a7227106030895cb10dc778bacd8c0fe77f5e22423296afb98755f0570828230d8d02532a0a6e3c9e2712f27d7f4cf1375f1acb6129f83428b3403d716fde37670ad9ac3d2aa4106aa84c8cc03a5d94df4da11c601d45dfd942d51203ae57a7c00bec70f2f6669cafc4128b0a677272199cab26c8d18e80adb36e42baa7ceb84a547c3abb7ad165208dc6c26bffdae56c46cf57a6605c5f1214e247de431b4662f07ffe99916083c1fd8c7a9ec0f11cbefcc64d57cdfa7833936b7c015780e67ea9538ad5d5f01cfab95e1efc561a4c0cfaab9236493789f948ee22b613ce49ece7f78432237d7dc87650a07319f61a7c77f802ceaf9cd1632ee7c99673f4b73c1566bd9af95ea3295aa4cb74737319cc1042610232840ed7ff91a602642692556813e8ae24e37a4927e5777f059179321e0161e9a41d841e801b099e1783fb06e6f9c607fb95477f330b9bc396520c02114ffc707b72b02352bc3dd2aaa99bb22743c925119d31611f545b89593faf989ae6a924b3b35e4ddf96c5f8d58fb685716deab7d1ca16cf4b714789d5526628a8e89bc7c51844999a0494efddb56c3332251c82ca37c8076d9101e9d10dd525351a9ac53efc33528a3885953444b9afd9e8cbed85f92347b3f5dcb2fe9d82ed0ac7a03daaf6c6128689193ccbb30d2c67ecdff63de160aec2911fdd30bb8166173697232faf61ae146333218ba5f778bf6c05f11d35a86ca2b6d6ba19785f8855a0491831504c60ba7c8ffe28d0c6afb93667025afeb88665c7e64d00133975e568388dbfe9e4ca3f878e449865f83e4050572f56f9e1c8dd085894722df1444838d5ff117513a861cf5a6bf9d3e123171d31e872d1c069f04ac7d6804cbbf523dfba171dd6f228431b89726b122789a59c39f441ca19e403319b45222e79c299cfef5c2699ffe1a199150e71a9f89c317a5a6356a450dc1ade4b3506b453e3390520d710a5cc7d56898659a5cca5dcb729656bd0a98ebc46ccee3221ad6d133682c0bf5b7593b2ef426d406a56b1bd1fef166b4f3936923b6fc91aa7e2a86f0154cc18451216df685b5773f6629333dcc981ef7acfe3193d48d67a0fe843f0d44e5f91a4d0af2b0fbffc69e1040ec0a56ebae1a80c8b9881331e77286f7ecdc80ad473f65baf6273d2285ca9b4a6dde85dcf0129a799470e9c5e5d023e1ccd85173722c369f514398de17fb681dcb5cf0ad1cc9050b713e0040898b05f108a8e3f5d16a43369745c7f3d14ecdc2b0062aad7904ae663a136d51b05d9016b46c9eb05cb928e2f90615d78d7b0928c64ea4c53c08aa51fbb4f1543d620b1e0e69dfd3a74edfc3a1265516b92310c7441f26c5a6c47d3c0898ce0427c410ddc5188a4953363d5e9a6a4f8cb974af845a96931fc92824a2049df9c446a8584ccdc3f20edd2a787761e6883c3ad1c5eec3170a66bc3815b358d3600e970ebd45645079061d3d8f5e71e058f3e9189c88e15bbb2a442e2ec98868e201c9507d2ab67922a6e818824af000c6d2099f8b756f3111223809e5c5ad62822556610f236e2903b6c4e73638b2eed57a40833288a6e57cb377e077f92906acdc0f56e0e182321360e95836a369bc1992d384d0c1ae96eca51e1861e803c18cde3039e96c688f69a3eca7e1232d442acd0aa87eaab62274e5665132c1b2ace7108291904b16a1c391fa25e170b6e80ef90530c302e265bea9072976f8cfdecc9eaef9c4eb76fcc39511614f9dbf213ecb673b3bf9fb2d0fadea4bde15e73109ec515d1571b9e170f30228e16b2096e3c5057f17b8619ed9345b5f023d69308173a8cbc7b58716e80838f2226056a39876089ae5a6246844f890a8695783eae11042068db2006ede3f33c99a7538c4d147ca4b7ea2f1be5567eacaa67c15188afb5275baceea06311b7bcb28760fd39249d8ad247158538bc22362a2551a38d6774f0e79e539aba9836415e4bb7f8bad4e3be14f89734b03dc0fed27b7d2aa90ebd4ab21c23d7413cd571cbef9184620d8647b07ebcfbf7bd0f24e4866bb2d3a60c14c9328cbba86775254cabc9d4e21452aad4ab5c43bddbc118636bcf530fb77c1387eecfcbd7e135c0462e13bd27cae6c6617729ded7dc02e7e97df8050761ec0fd19f21b031b1c7c848e6d8fb1c63400891aaff2a3c5b62a020ce85e0bdb6661582c80c08b808076d1ca7f69ce4902a389b331645f926434660ff47f8bf6ebca6662d2b0605497460e27a6f0e0d44fdfad23ed99c27765d6e24b67ca4aa371665f5bb65cf5305bf150ac5dfeafd0dd214d225b99bfcc440c161e0b1937b52bd6caa2b1ed006f01b44db35871c20df029683c2fce8daab0fc4c89dbb74cd4cffbd8c9b89231c83797699c7fda1b503204edb22affa9a419d192619a54746a8ed410eb6508bebc3b86fa4a35bff1b135543a623f4797b89674525638eb373619a863cec521d8825afbfafc240225a8ce4f3e3ac22e043ffe11771c866d339d9eb77776b2f14e112201a5405c177651d40e76bf4c888d6ac9e91faf865c98248d9bd5ebbcadec06e363cc685f32be0cdf4fe4c3587ef651a7b67f6e793a019a89ab7669a3217a8f36e4a3212f0044082dedc9c0291c132654fd05c9dc99cf6f14e6edc14913b863e59ec50d179443fbdde16ac0caf32ec577aab7bc0aa49a241045da85e85ad20670b9318640157096e7a992501941fe6174580ee8b7b6a65eeeb948da5295d8ea548798c6f590fe591a7810949f7941b5ddab8708beb014953c091a82487cb6f25fdea3e3182d9f28256ad9615f8f394656c128a42f65a03c3b890d1ef61ca46e47f2583dc64e9b4e2c893367c454ac2c87f3ef6fdb08a5c0c940b1404f024ea90322e961f3fadd5438a3559a741c923c26bf281cc360031eea6409285ba5f5ef40068c3c0da72ee4521ec209d61f5c220f7f242c1a47b5be141c833d7636ee94508d9e92db5e4bb7c18c2b485fd8e02c6e68fa57d59c39d5687e2033bb8d4808a39e5fa808136</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dataflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VASP 学习笔记</title>
      <link href="/2023/07/24/blog-vasp-2/"/>
      <url>/2023/07/24/blog-vasp-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h1 id="VASP-学习总结"><a href="#VASP-学习总结" class="headerlink" title="VASP 学习总结"></a>VASP 学习总结</h1><h2 id="1-VASP简介"><a href="#1-VASP简介" class="headerlink" title="1.VASP简介"></a>1.VASP简介</h2><p>VASP是基于密度泛函理论且使用平面波赝势方法进行第一性原理计算的软件，适用领域包括：</p><ul><li><p>使用周期性边界条件（或超原胞模型）处理原子、分子、薄膜等</p></li><li><p>计算材料的结构参数（晶格常数、键长、键角、原子位置）</p></li><li><p>计算材料力学性质（弹性常数、体弹性模量）</p></li><li><p>计算材料的电子结构（能带、能级、、电子态密度、电荷密度等）</p></li><li><p>计算材料的光学、磁学、晶格动力学性质</p></li></ul><h2 id="2-VASP输入文件"><a href="#2-VASP输入文件" class="headerlink" title="2.VASP输入文件"></a>2.VASP输入文件</h2><ul><li><p>INCAR(<a href="zotero://select/library/items/2SS7RBW4">“VASP侯柱峰手册中文版”, p. 6</a>)</p></li><li><p>POSCAR(<a href="zotero://select/library/items/2SS7RBW4">“VASP侯柱峰手册中文版”, p. 7</a>)</p></li><li><p>POTCAR (<a href="zotero://select/library/items/2SS7RBW4">“VASP侯柱峰手册中文版”, p. 8</a>)</p></li><li><p>KPOINTS (<a href="zotero://select/library/items/2SS7RBW4">“VASP侯柱峰手册中文版”, p. 10</a>)</p></li></ul><blockquote><p><strong>INCAR（控制软件进行何种性质的计算）</strong></p><ul><li><p>SYSTEM：定义所计算的体系</p></li><li><p>ISTART,ICHARG,INIWAV：定义如何输入或构造初始电荷密度和波函数</p></li><li><p>定义电子的优化</p><blockquote><p>ENCUT,ENAUG：平面波切断动能和缀加电荷的切断值</p><p>ALGO,IALGO,LDIAG：电子部分优化的方法</p><p>IMIX,AMIX,AMIN,BMIX,WC,INIMIX,MIXPRE,MAXMIX：电荷密度混合的方法</p><p>NELM,NELMIN,NELMDL,EDIFF：自洽迭代步数和收敛标准</p></blockquote></li><li><p>定义离子实或原子的优化</p><blockquote><p>IBRION,NFREE,POTIM,NSW：原子位置优化方法、移动步长和步数</p><p>SMASS,TEBEG,TEEND,POMASS,NBLOCK,KBLOCK,PSTRESS：分子动力学相关参数</p><p>EDIFFG：离子弛豫收敛标准</p></blockquote></li><li><p>定义态密度的积分方法和参数</p><blockquote><p>ISMEAR,SIGMA：smearing方法和参数</p><p>EMIN,EMAX,NEDOS：计算态密度时能量范围和点数</p><p>RWIGS,LORBIT：计算分波态密度的参数</p></blockquote></li><li><p>其他参数</p><blockquote><p>PREC：计算精度控制</p><p>ISPIN,MAGMOM,NUPDOWN：磁性计算</p><p>GGA,VOSKOWN：交换关联函数</p><p>LELF,LVTOT：计算ELF和总的局域势</p><p>ISIF：结构优化参数</p></blockquote></li><li><p>备注：一般要设置的关键词：SYSTEM,ENCUT,ISTART,ICHARG,PREC,ISMEAR,SIGMA；对计算不同的性质，再另外增加相应的关键词</p></li></ul><p><strong>POSCAR（描述计算体系的晶胞参数及原子位置）</strong></p><ul><li><p>Si-fcc 定义注释行</p></li><li><p>1.0 基矢缩放系数</p></li><li><p>晶格基矢坐标（晶胞有多大）</p></li><li><p>1 原子个数</p></li><li><p>0 0 0 坐标系（笛卡尔还是直接）</p></li><li><p>0 0 0 原子的初始位置</p></li></ul><p><strong>POTCAR（包含体系中各类元素的赝势）</strong></p><ul><li><p>LDA、GGA（PW91、PBE）</p></li><li><p>根据处理价电子的数目区分半芯态赝势</p></li><li><p>根据方法分为超软赝势（USPP）和投影缀加波赝势（PAW）</p></li><li><p>赝势的选取与计算体系相关联，参考(<a href="zotero://select/library/items/2SS7RBW4">“VASP侯柱峰手册中文版”, p. 7</a>)</p></li></ul><p><strong>KPOINTS（描述不可约布里渊区中K点取样）</strong></p><blockquote><p><strong>【自动网格取样方法】</strong></p></blockquote><ul><li><p>automatic generation 定义注释行</p></li><li><p>0 自动产生k点的参数值</p></li><li><p>Monhkorst-Pack</p></li><li><p>9 9 9 基矢方向上分割点数（一般是奇数）</p></li><li><p>0 0 0 是否移动网格点以及移动步长</p></li></ul><blockquote><p><strong>【能带计算line-mode】</strong></p></blockquote><ul><li><p>k-points along high symmetry lines</p></li><li><p>10 沿G-X特殊点之间产生的k点数目</p></li><li><p>Line-mode 程序自动产生k点</p></li><li><p>Reciprocal 各k点相对于倒格矢基矢</p></li><li><p>0 0 0  ！Gamma</p></li><li><p>0 0 0  ！X</p></li></ul></blockquote><h2 id="3-VASP输出文件"><a href="#3-VASP输出文件" class="headerlink" title="3.VASP输出文件"></a>3.VASP输出文件</h2><ul><li><p>OUTCAR</p><ul><li>包含计算得到的大部分信息：体积、总能、费米能级、总价电子数、倒格矢基矢、原子受力情况等</li></ul></li><li><p>CHG/CHGCAR</p><ul><li>给出体系的电荷密度，CHG的精度略低，经过迭代后得到自洽的CHG和CHGCAR可以用来画图分析面电荷密度分布，计算能带结构和态密度时，所读入的电荷密度文件CHGCAR必须是经过迭代自洽的文件</li></ul></li><li><p>DOSCAR</p><ul><li>给出计算体系的电子态密度-绝对值</li></ul></li><li><p>EIGENVAL</p><ul><li>给当计算体系的本征值-绝对值</li></ul></li><li><p>WAVECAR</p><ul><li>给出所计算体系的电子波函数，二进制文件，不可编辑</li></ul></li><li><p>OSZICAR</p><ul><li>给出每次迭代离子移动的迭代步</li></ul></li><li><p>CONTCAR</p><ul><li>记录离子弛豫时，每次移动后体系的晶格参数变化、在对体系进行弛豫或分子动力学计算时，最后得到的CONTCAR可以直接拷贝成POSCAR进行后续计算</li></ul></li><li><p>IBZKPT</p><ul><li>给出不可约布里渊区K点的坐标</li></ul></li></ul><h2 id="4-VASP参数设置"><a href="#4-VASP参数设置" class="headerlink" title="4.VASP参数设置"></a>4.VASP参数设置</h2><ul><li><p>ENCUT</p><ul><li>在进行任何性质的计算之前，需要进行ENCUT收敛性的测试，由此来确定一个合适的切断动能值，注意：循环的第一个值，一般取POTCAR中ENMAX中最大的那个值，循环间隔一般取50eV。另外，在对体系的变体积结构优化时，最好保证ENCUT是ENMAX的1.3倍</li></ul></li><li><p>PREC</p><ul><li>PREC是控制计算精度最重要的一个参数，它决定了ENCUT、FFT网格、PORT的默认值，当要提高力和Stress tensor的计算精度时，可以采用High/Accurate，并手动设置ENCUT的值</li></ul></li><li><p>EDIFF</p><ul><li>EDIFF是电子结构部分自洽迭代循环时，判断是否自洽的条件；若EDIFF=0，则进行NELM步迭代后停止</li></ul></li><li><p>EDIFFG</p><ul><li>EDIFFG是控制离子部分的弛豫，注意：当EDIFFG为负数，才是用来控制离子弛豫时，离子或原子所受的力；若EDIFFG=0，则表示离子弛豫NSW步后停止</li></ul></li><li><p>ISTART和ICHARG</p><ul><li>定义如何构建初始的波函数和电荷密度、读入上一次的波函数和电荷密度；计算能带和电子态密度时，一般设置ISTART=1，ICHARG=11；其他情况，一般设置ISTART=0，ICHARG=2；如果计算过程中断需要续算，一般设置ISTART=1，ICHARG=1，其他参数不用变</li></ul></li><li><p>GGA和VOSKOWN</p><ul><li>GGA的选择需要与赝势的类型相一致，采用PW91的GGA需要设置VOSKOWN=1，其他情况使用程序默认值即可</li></ul></li><li><p>ISIF</p><ul><li>用于控制结构参数的优化；当IBRION=0，其默认值为0，其他情况下为2；在对原胞的体积或形状进行优化时，ENCUT要略取大一些，例如取1.3*ENCUT或设置PREC=High，用于减小误差</li></ul></li><li><p>ISMEAR</p><ul><li>用来确定使用何种方法来设置每个波函数的部分占有数fnk，注意：在进行任何静态计算或态密度计算且K点数目大于4时，取ISMEAR=-5；当由于原胞较大而K点数目小于4，取ISMEAR=0，并设置一个合适的SIGMA的值。另外，对于半导体或绝缘体，取ISMEAR=-5；当体系为金属时，取ISMEAR=1或2，并设置一个合适的SIGMA的值；在进行能带结构计算时，ISMEAR和SIGMA采用默认值就好；一般来说，采用ISMEAR=0，并选择合适的SIGMA值都可以得到合理的结果，测试SIGMA后选择entropy T*S最小值所对应的SIGMA，K点若发生变化，也需要重新测试</li></ul></li><li><p>RWIGS</p><ul><li>用于计算分波态密度以及每根能带所对应的波函数按照spd和位置投影；当体系中有多类原子时，一般直接取POTCAR文件中以A为单位的RWIGS的值</li></ul></li><li><p>K-mesh</p><ul><li>计算完得到的K点数目与能量的对应值，总能变化在0.001eV左右，然后由此来选择合适的K点数目</li></ul></li></ul><h2 id="5-VASP计算方法"><a href="#5-VASP计算方法" class="headerlink" title="5.VASP计算方法"></a>5.VASP计算方法</h2><ul><li><p>计算前的准备工作：明确采用何种赝势；平面波切断动能的数值；K点网格的大小；采用Fermi-smearing方法或者Methfessel-Paxton smearing方法时，SIGMA的大小；计算所选取的精度PREC；采用何种交换关联函数</p></li><li><p>不同的计算任务完成后建立相应文件夹保存数据，静态计算完成后得到的自洽电荷密度可以建立目录scf（INCAR，KPOINTS，POSCAR，OUTCAR，CHGCAR，CHG）；计算完能带结构建立目录band（INCAR，KPOINTS，POSCAR，OUTCAR，EIGENVAL）；计算完电子态密度建立目录dos（INCAR，KPOINTS，POSCAR，OUTCAR，DOSCAR）</p>  <pre><code class="hljs">一、基态性质</code></pre></li></ul><blockquote><p><strong>单个原子的计算</strong></p><ul><li><p>检验赝势的好坏（经过检验，无需测试）</p></li><li><p>对称性被破坏后自旋极化情况下的原子基态能量，对体材料的结合能进行修正</p></li></ul><p><strong>结构优化（晶格常数和原子位置参数的优化）</strong></p><ul><li><p><strong>简单情况</strong>（只需优化一个晶格常数，使用脚本采用Birch-Murnaghan状态方程拟合得到晶格常数）</p></li><li><p><strong>复杂情况</strong>（需优化两个以上的参数：1.以实验的晶格结构参数为基础，先进行一次体积不变的离子弛豫计算，通过ISIF来确定；2.再把优化得到的CONTCAR拷贝成POSCAR，进行一次静态计算；3.对基矢缩放系数取10个左右的点，每个点重复前面两步，得到静态计算下的体积-总能关系（可以使用脚本murn.f）；4.之后采用状态方程拟合得到平衡状态下的体积、体弹性模量；5.最后在该体积下，重复前面第二和第三步，得到平衡状态下的其他晶胞参数 (<a href="zotero://select/library/items/2SS7RBW4">“VASP侯柱峰手册中文版”, p. 23</a>)）</p></li><li><p><strong>一次型优化或全部优化</strong>（一般用于估计，通过ISIF设置，可以提高EDIFF和EDIFFG的精度以获得更准确的晶格参数，计算得到的CONTCAR就包含优化后的晶格参数）</p></li></ul><p><strong>结合能修正</strong></p><ul><li>VASP计算得到的总能已经减去了在以原子参考组态计算得到的原子能量（构造赝势时得到的总能，对应于POTCAR文件中的EATOM）要得到准确的结合能，还需要减去前面单个原子计算得到的修正值</li></ul><p><strong>自洽的电荷密度</strong></p><ul><li><p>优化得到晶胞参数后，再进行静态的计算就可以得到自洽的电荷密度，需要保存下来用于后续其他性质的计算；另外也可以根据它画出电荷密度图，分析原子间的键合作用</p></li><li><p>基本步骤：1.准备好INCAR（定义ENCUT、ISTART=0、ICHARG=2、ISMEAR=-5）、POTCAR、KPOINTS、POSCAR（以优化的晶格作为基础，把优化得到的CONTCAR拷贝成POSCAR）2.提交运行 3.保存CHGCAR，并使用VESTA进行面电荷密度的分析</p></li></ul><p><strong>能带结构的计算</strong></p><ul><li><p>计算材料的能带结构即色散曲线E(k)</p></li><li><p>基本步骤：1.根据特殊K点的走向，选取特殊K点及其分割点数，使用vaspkit的303生成Kpath.in并更改为KPOINTS；2.另外设置ISTART=1，ICHARG=11，并增加NBANDS的值，ISMEAR采用默认值，完成设置后利用前面计算得到的自洽电荷密度作一次非自洽计算，得到本征值文件EIGENVAL；3.最后利用vaspkit的211选项生成绘图文件BAND.dat，用软件origin绘图</p></li></ul><p><strong>电子态密度的计算</strong></p><ul><li><p>计算材料的电子态密度包括总态密度（TDOS）和分波态密度（PDOS）</p></li><li><p>基本步骤：1.准备KPOINTS文件，增加K点网格；2.从POTCAR中找到各类原子的RWIGS（grep命令）；3.准备INCAR文件（ISTART=1,ICHARG=11,ISMEAR=-5以及RWIGS）；4..利用前面计算得到的自洽电荷密度作一次非自洽计算，得到包含态密度值的DOSCAR文件。5.采用split_dos对态密度文件DOSCAR进行分割，得到总态密度DOS0，各个原子的分波态密度DOS1，DOS2…</p></li><li><p>备注：spit_dos和vp两个脚本都需要下载，在运行split_dos程序对DOSCAR文件分割时，要保证当前目录下有对应的OUTCAR和POSCAR文件。此外，分割后的DOS0，DOS1… 等文件的能量值是以费米能级作为能量参考零点</p></li><li><p>DOS0的第一列数据是能量值（eV）；第二列数据是总态密度的值（State/eV.unit cell）；第三列数据是总态密度的积分值，（即电子数electrons）；</p></li><li><p>DOS1是第一个原子的分波态密度值，其中第一列数据是能量值（eV）；第二、三、四列数据分别对应于s、p、d态的分波态密度值（State/eV.atom）；其他DOS文件同理</p></li></ul></blockquote><pre><code class="hljs">二、磁性体系</code></pre><blockquote><ul><li><p>磁性的计算，与非磁性体系计算相比，其实只需要在INCAR中加入ISPIN=2以及设置各类原子的初始磁矩（MAGMOM参数），其他更复杂的磁性性质的计算，包括noncollinear磁性、spin sprial磁性、spin orbital相互作用，需要再增加其他关键词</p></li><li><p>备注：磁性计算推荐采用PAW势 (<a href="zotero://select/library/items/2SS7RBW4">“VASP侯柱峰手册中文版”, p. 30</a>)</p></li></ul></blockquote><pre><code class="hljs">三、表面体系</code></pre><ul><li>在作表面性质计算时，一般采用slab模型（薄片）模拟表面体系。基本步骤：1.材料体性质的计算；2.slab模型的构造；3.表面体系的结构优化；4.表面体系性质的计算</li></ul><blockquote><p><strong>1.材料体性质的计算</strong></p><ul><li><p>这一步包含了前面材料基态性质的计算，主要是为确定后面在进行表面计算时所需要的一些参数：ENCUT，SIGMA（ISMEAR=1或0），体材料的晶格参数（构造slab模型以体材料的晶格参数作为基础）</p></li><li><p>备注：SIGMA优化必须进行，因为后面对表面体系的结构进行优化时，smearing方法一般都是采用Gaussian方法或Methfessel-Paxton smearing方法</p></li></ul><p><strong>2.Slab模型的构造</strong></p><ul><li><p>需要明确几个重要的参数：体材料的晶格参数和模拟的表面（表面的米米勒指数和表面的二维周期性），真空层以及原子层的厚度（slab模型就是由原子层和真空层所组成）</p></li><li><p>对于真空层和原子层要取多厚，可以通过测试不同厚度对总能的影响来确定</p></li></ul><p><strong>3.表面体系的结构优化</strong></p><ul><li><p>在对表面体系的结构优化前，还需要对K点数目或k-mesh大小进行优化，可以通过测试完成</p></li><li><p>对于表面体系的结构进行优化时，主要是对原子的位置进行优化，而不再对超原胞（slab模型得到的）进行优化，一般在POSCAR中采用Selective Dynamic（固定原子位置以进行有选择性的位置弛豫）；另外，在INCAR文件中也应加入控制离子弛豫的关键词（EDIFF，EDIFFG，NSW）；生成的CONTCAR文件即弛豫后得到的最后位置，原子受力的情况可以在OUTCAR中查找TOTAL-FORCE来查看</p></li></ul><p><strong>4.表面体系性质的计算</strong></p><ul><li><p>得到优化的结构之后，就可以进行一系列性质的计算，计算步骤与计算体材料基态性质相同</p></li><li><p>备注：无论是对体材料还是表面体系的结构优化，结构优化完成后，还需要进行静态的计算以得到自洽的电荷密度，再使用这个自洽的电荷密度进行后面的性质计算</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vasp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VASP 学习笔记</title>
      <link href="/2023/07/22/blog-vasp-1/"/>
      <url>/2023/07/22/blog-vasp-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h1 id="1-VASP计算原理"><a href="#1-VASP计算原理" class="headerlink" title="1.VASP计算原理"></a>1.VASP计算原理</h1><h2 id="1-1-自洽原理"><a href="#1-1-自洽原理" class="headerlink" title="1.1 自洽原理"></a>1.1 自洽原理</h2><p><img src="https://cdn.jsdelivr.net/gh/UncleleiY/image@main/blog/images/vasp.scf.png" alt="vasp.scf"></p><h2 id="1-2-程序框图"><a href="#1-2-程序框图" class="headerlink" title="1.2 程序框图"></a>1.2 程序框图</h2><p><img src="https://cdn.jsdelivr.net/gh/UncleleiY/image@main/blog/images/vasp.process.png" alt="vasp.process"></p><h1 id="2-VASP计算流程"><a href="#2-VASP计算流程" class="headerlink" title="2.VASP计算流程"></a>2.VASP计算流程</h1><h2 id="2-1-参数测试：k-mesh、ENCUT……"><a href="#2-1-参数测试：k-mesh、ENCUT……" class="headerlink" title="2.1 参数测试：k-mesh、ENCUT……"></a>2.1 参数测试：k-mesh、ENCUT……</h2><p>K点数量直接影响计算精度，K点数量越少，计算精度越低；K点数量越多，计算精度越高，但相应计算成本就会增大，因此K点的取值往往需要进行收敛性测试。</p><p>ENCUT决定体系的截断能，其值越大代表计算精度越高，相应计算成本越大。注意：是对于多元素体系，ENCUT的值必须大于POTCAR中各元素ENMAX值的最大值，且不能小于各元素ENMIN值的最小值。一般设定为ENMAX最大值的1.25到1.5倍，除非对精度有很大的要求。随着ENCUT值的降低，计算精度降低，收敛速度逐渐减慢。</p><h2 id="2-2-结构优化：（GeoOpt）"><a href="#2-2-结构优化：（GeoOpt）" class="headerlink" title="2.2 结构优化：（GeoOpt）"></a>2.2 结构优化：（GeoOpt）</h2><p>结构优化是进行后续计算的前提，在输入文件INCAR中设置相应参数，通过离子驰豫和电子驰豫优化晶胞结构，使得计算体系在限制条件下达到能量最低的状态，优化后的结构将被输出在CONTCAR文件中。结构优化可分为单步优化和多步优化，对于难优化的体系，通过逐步提高精度进行多步优化可以大大缩短时间，减小计算成本。</p><h2 id="2-3-单点计算：（SinglePoint）"><a href="#2-3-单点计算：（SinglePoint）" class="headerlink" title="2.3 单点计算：（SinglePoint）"></a>2.3 单点计算：（SinglePoint）</h2><p>单点计算也称静态计算或者静态自洽，几何结构计算前后不发生变化，其目的是在结构优化的基础上，在体系能量达到较低、体系较稳定的情况下固定原子的位置坐标，再对体系中的电子进行调整，以达到体系的最低能量。单点计算需要设置NSW=0，IBRION=-1。</p><h2 id="2-4-能带计算：（Band）"><a href="#2-4-能带计算：（Band）" class="headerlink" title="2.4 能带计算：（Band）"></a>2.4 能带计算：（Band）</h2><p>能带的计算是在静态自洽的基础上完成的，静态自洽计算完成之后会有CHGCAR这个文件，新建一个文件夹名字叫band，把前者目录中的INCAR、POSCAR、POTCAR、CHGCAR复制过来，并通过vaspkit的303选项自动生成高对称点路径文件KPATH.in文件，将其复制为KPOINTS文件并提交计算，其中输入文件INCAR中需要修改和增加参数ISTART=1，ICHAGE=11，LORBIT=10。计算完成后再次使用vaspkit的211选项生成绘图文件BAND.dat。</p><h2 id="2-5-态密度：（DOS）"><a href="#2-5-态密度：（DOS）" class="headerlink" title="2.5 态密度：（DOS）"></a>2.5 态密度：（DOS）</h2><p>态密度即单位能量范围内的能级数，态密度和能带高度相关。能带按照纵坐标轴投影就得到态密度，能带越平，态密度峰就越尖锐，能带越宽，态密度就越平缓。先新建一个目录，命名为DOS，然后复制静态自洽计算里面的INCAR、POSCAR、POTCAR、KPOINTS，CHGCAR过来。并修改一下INCAR，增加EMIN和EMAX参数指定能量范围，LORBIT=10，采点参数NEDOS，计算完成后使用vaspkit的111选项导出TDOS.dat文件并作图。注意：vaspkit处理数据时，将费米能级自动设置为0 ev的位置，若费米能级穿过体系的能带，则其为导体。</p><h2 id="2-6-晶体轨道重叠布局：（Lobster）"><a href="#2-6-晶体轨道重叠布局：（Lobster）" class="headerlink" title="2.6 晶体轨道重叠布局：（Lobster）"></a>2.6 晶体轨道重叠布局：（Lobster）</h2><p>晶体轨道重叠布局COOP(crystal orbital overlap population)可以呈现详细的分子轨道信息，描述体系的成键，非键和反键特征，相应的正值和负值分别代表成键和反键作用，而数值的绝对值大小表示成键强度。它一个更为直观的名称是重叠布局权重的态密度 (overlap population-weighted density of states)，COOP可以很好的研究周期性体系中的局域化学键性质，但这种方法基于中心化的局域基组，不适用于平面波基组。因此在此基础上提出了COHP以便于处理平面波基组。目前最流行的COHP计算程序是Lobster，通过这个程序可以得到计算体系的COHP来分析材料的电子性质。计算COHP需要在静态计算时关掉对称性即设置ISYM=0或-1，然后增加参数NBANDS，计算完成后运行lobster可以生成COHPCAR.lobster文件用于作图。 该文件中第一列为能量，第二列为全部原子对的pCOHP，第三列为第二列的积分，第四列为No.1原子对的pCOHP，第五列为第四列的积分……示例：由于COHP计算引入了能量项，对于能量为负值的贡献是成键态，对于能量为正值的贡献是反键态，所以为了和COOP的计算结果看起来统一，一般在文章中看到的图都是-COHP，即右边的峰是成键贡献，左边的峰是反键贡献。若结构在费米能级以下的占据态中只有少量的反键态，大部分是成键态，则该结构比较稳定。</p><h2 id="2-7-声子谱：-Phonon"><a href="#2-7-声子谱：-Phonon" class="headerlink" title="2.7 声子谱：(Phonon)"></a>2.7 声子谱：(Phonon)</h2><p>在第一性原理计算过程中考察体系稳定性是经常遇到的一个问题，通常使用声子谱研究体系的动力学稳定性，使用分子动力学研究体系的热稳定性。声子谱的计算主要有两种方法，一种是直接法，另一种是微扰密度泛函方法(DFPT)。直接法，或称frozen-phonon方法，计算声子谱需要高精度的结构优化，否则容易出现虚频，此外还需要处理软件phonopy。优化结束后用生成的CONTCAR扩胞生成多个超胞,准备band.conf文件之后对各个超胞进行静态计算生成vasprun.xml文件，最后通过phonopy软件处理得到声子谱数据文件band.dat。有些情况下计算得来的的声子谱会出现负的频率，即被称为虚频，声子谱出现虚频，说明结构不稳定。声子谱中包含3个声学支和3N-3个光学支，若计算出现一部分虚频，但是都相对很小，则该结构仍然是动力学稳定的。</p><h2 id="2-8-电子化局域化函数：（ELF）"><a href="#2-8-电子化局域化函数：（ELF）" class="headerlink" title="2.8 电子化局域化函数：（ELF）"></a>2.8 电子化局域化函数：（ELF）</h2><p>ELF是研究电子结构的手段之一，数值范围在0至1之间。简而言之，数值较高的ELF的等值面包围的区域，电子在里面定域性较强，不容易跑出去，相对地，电子能够容易地在这样的区域内随意运动（在此区域里随意离域）。在那些ELF数值较低的区域，电子定域性弱，即如果把电子放在那里，就很容易离域到其它区域去。计算ELF需要在自洽计算结束后在INCAR中设置LELF=.TRUE.，其他不变。计算结束后，得到ELFCAR文件，通过ELFCAR文件在VESTA中作图。</p><h2 id="2-9-Bader电荷：（BaderCharge）"><a href="#2-9-Bader电荷：（BaderCharge）" class="headerlink" title="2.9 Bader电荷：（BaderCharge）"></a>2.9 Bader电荷：（BaderCharge）</h2><p>Bader电荷分析在第一性原理计算中经常用到，利用VASP计算bader电荷，可以得到原子周围的电子数，从而近似得到原子的化合价。计算Bader电荷需要下载Bader执行程序，在自洽计算后在INCAR文件中增加输入参数LAECHG =.TRUE.，LCHARG =.TRUE.，然后提交计算，计算完成后生成文件 AECCAR0，AECCAR1，AECCAR2，最后运行Bader程序生成 ACF.dat 文件用于分析。注意：ACF.dat文件的CHARGE那一列对应的是每个原子上总的价电子数目，判断原子带电情况时需要用该列的数值减去该原子POTCAR中对应的价电子数目。</p><h2 id="2-10-范德华修正：-VDW"><a href="#2-10-范德华修正：-VDW" class="headerlink" title="2.10 范德华修正：(VDW)"></a>2.10 范德华修正：(VDW)</h2><p>VDW即范德华修正，范德华力在化学中指分子之间非定向、无饱和性的，较弱的相互作用力。比化学键弱的多，来源主要有静电力，诱导力，色散力。范德华修正的主要作用是使计算过程中晶格常数以及原子位置算的更合理，特别是对于长程相互作用的体系，比如分子晶体，表面吸附和表面催化以及长链烷烃之类的大分子构象、弱极性分子团簇。范德华修正分为两种，一是基于半经验参数，在传统计算的Kohn-Sham总能基础上加上额外的能量修正项，即考虑了色散力的作用，二是vdW-DF,通过修改交换关联泛函来考虑范德华修正。</p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vasp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QE 安装</title>
      <link href="/2023/07/20/blog-software-installation/"/>
      <url>/2023/07/20/blog-software-installation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="两种安装方法（Ubuntu：quantum-espresso）"><a href="#两种安装方法（Ubuntu：quantum-espresso）" class="headerlink" title="两种安装方法（Ubuntu：quantum-espresso）"></a>两种安装方法（Ubuntu：quantum-espresso）</h1><h2 id="1-GNU-compile"><a href="#1-GNU-compile" class="headerlink" title="1. GNU(compile)"></a>1. GNU(compile)</h2><pre><code class="hljs elixir">sudo apt-get install - gfortran （<span class="hljs-title class_">Compiler</span>）- libblas-dev（<span class="hljs-title class_">Math</span> library）- liblapack-dev（<span class="hljs-title class_">Math</span> library）- libfftw3-dev （<span class="hljs-title class_">Math</span> library）- openmpi-bin libopenmpi-dev （<span class="hljs-title class_">Parallel</span> library）- gedit （<span class="hljs-title class_">Text</span> editor）- make （linux make）<span class="hljs-title class_">Download</span> <span class="hljs-title class_">QE</span>（wget + http）tar -zxvf qe-raleasepack.tar.gz./configure make all <span class="hljs-title class_">Environment</span> configuration of <span class="hljs-title class_">QE</span> &amp; openmpi whereis : find path of <span class="hljs-title class_">QE</span> &amp; openmpigedit ~/.bashrcexport <span class="hljs-title class_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/home/lei/qe/bin</span>export <span class="hljs-title class_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/lib/x86_64-linux-gnu/openmpi/bin</span>export <span class="hljs-title class_">LD_LIBRARY_PATH</span>=<span class="hljs-variable">$LD_LIBRARY_PATH</span><span class="hljs-symbol">:/usr/lib/x86_64-linux-gnu/openmpi/lib</span>source ~/.bashrc<span class="hljs-title class_">Then</span> find some examples online to start your first project of <span class="hljs-title class_">QE</span> （successfully）</code></pre><h2 id="2-intel-compile"><a href="#2-intel-compile" class="headerlink" title="2. intel(compile)"></a>2. intel(compile)</h2><pre><code class="hljs gradle">Download   oneMKL + oneHPC （wget + http ）bash l_HPCKit_p_2021.<span class="hljs-number">3.0</span>.<span class="hljs-number">3219</span>_offline.sh bash l_onemkl_p_2021.<span class="hljs-number">3.0</span>.<span class="hljs-number">3219</span>_offline.sh<span class="hljs-number">1</span>.oneMKL （Math library）<span class="hljs-number">2</span>.oneMPI（Parallel library）included in oneHPC <span class="hljs-number">3</span>.compiler （ifort、icc、icpc）included in oneHPCEnvironment configuration of  oneMKL + oneHPCgedit ~/.bashrc <span class="hljs-keyword">source</span> ~<span class="hljs-regexp">/intel/</span>oneapi/setvars.sh intel64 --force<span class="hljs-keyword">source</span> ~/.bashrcDownload QE（wget + http）tar -zxvf qe-raleasepack.tar.gz.<span class="hljs-regexp">/configure --prefix=/</span>home<span class="hljs-regexp">/lei/</span>qe CC=icc CXX=icpc FC=ifortmake all Environment configuration of  QEgedit ~/.bashrc export PATH=$PATH:<span class="hljs-regexp">/home/</span>lei<span class="hljs-regexp">/qe/</span>bin <span class="hljs-keyword">source</span> ~/.bashrc<span class="hljs-keyword">source</span> ~/.bashrcThen <span class="hljs-keyword">find</span> some examples online to start your first <span class="hljs-keyword">project</span> of QE（successfully）</code></pre>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 学习记录(3)</title>
      <link href="/2023/07/14/blog-C-9/"/>
      <url>/2023/07/14/blog-C-9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-学习笔记"><a href="#C-学习笔记" class="headerlink" title="C++学习笔记"></a>C++学习笔记</h1><h2 id="第一章至第四章范例"><a href="#第一章至第四章范例" class="headerlink" title="第一章至第四章范例"></a>第一章至第四章范例</h2><pre><code class="hljs powershell">/*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-comment">#include &lt;cmath&gt;</span>int main()&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    double area;    cin &gt;&gt; area;    double x;    x = sqrt(area);     cout &lt;&lt; x &lt;&lt; endl;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">2.4</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span>void simon(int n);int main()&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    int k;    cout &lt;&lt; <span class="hljs-string">&quot;input an number&quot;</span> &lt;&lt; endl;    cin &gt;&gt; k;    simon(k);     cout &lt;&lt; <span class="hljs-string">&quot;done!&quot;</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;&#125;void simon(int n)&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    cout &lt;&lt; <span class="hljs-string">&quot;thsi is :&quot;</span> &lt;&lt; n &lt;&lt; endl;&#125;*///<span class="hljs-number">2.5</span>  /*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;int multiplication(int  m);int main()&#123;    cout &lt;&lt; <span class="hljs-string">&quot;enter one number :&quot;</span>&lt;&lt; <span class="hljs-string">&quot;a=&quot;</span>;    int a;    cin &gt;&gt; a;    int ok;    ok= multiplication(a);    cout &lt;&lt; <span class="hljs-string">&quot;the answer is :&quot;</span>&lt;&lt; <span class="hljs-string">&quot;ok=&quot;</span> &lt;&lt; ok;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;int multiplication(int m)&#123;    m = m * <span class="hljs-number">100</span>;    <span class="hljs-keyword">return</span> m;&#125;*///<span class="hljs-number">2.6</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-comment">#include &lt;climits&gt;</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;int main()&#123;    int n_int = INT_MAX;    short n_short = SHRT_MAX;    long n_long = LONG_MAX;    long long n_long_long = LLONG_MAX;    cout &lt;&lt; <span class="hljs-string">&quot;int is &quot;</span> &lt;&lt; sizeof (int) &lt;&lt; <span class="hljs-string">&quot; bytes. &quot;</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;short is &quot;</span> &lt;&lt; sizeof n_short &lt;&lt; <span class="hljs-string">&quot; bytes. &quot;</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;short is &quot;</span> &lt;&lt; sizeof (short) &lt;&lt; <span class="hljs-string">&quot; bytes. &quot;</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;long is &quot;</span> &lt;&lt; sizeof (long) &lt;&lt; <span class="hljs-string">&quot; bytes. &quot;</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;long long is &quot;</span> &lt;&lt; sizeof(long long) &lt;&lt; <span class="hljs-string">&quot; bytes. &quot;</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;max value: &quot;</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;int : &quot;</span> &lt;&lt; n_int &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;short : &quot;</span> &lt;&lt; n_short &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;long : &quot;</span> &lt;&lt; n_long &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;long long : &quot;</span> &lt;&lt; n_long_long &lt;&lt; endl;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.1</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-comment">#include &lt;climits&gt;</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;int main()&#123;    short sam = SHRT_MAX;    unsigned short sum = sam;    cout &lt;&lt; <span class="hljs-string">&quot;sam has &quot;</span> &lt;&lt; sam &lt;&lt; <span class="hljs-string">&quot; yuan. &quot;</span> &lt;&lt; <span class="hljs-string">&quot;and sum has &quot;</span> &lt;&lt; sum &lt;&lt; <span class="hljs-string">&quot; yuan. &quot;</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;add 1 yuan to each account. &quot;</span> &lt;&lt; endl &lt;&lt; <span class="hljs-string">&quot;now :&quot;</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;sum has &quot;</span> &lt;&lt; sum + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; yuan. &quot;</span> &lt;&lt; <span class="hljs-string">&quot;and sam has &quot;</span> &lt;&lt; sam + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; yuan. &quot;</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;the longth is &quot;</span> &lt;&lt; sam &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;the longth is &quot;</span> &lt;&lt; sum &lt;&lt; endl;     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.2</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span>int main()&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    int chest = <span class="hljs-number">42</span>;    int waist = <span class="hljs-number">0</span>x42;    int inseam = <span class="hljs-number">042</span>;    cout &lt;&lt; <span class="hljs-string">&quot;monsieur cuts a striking figure !\n&quot;</span>;    cout &lt;&lt; <span class="hljs-string">&quot;chest = &quot;</span> &lt;&lt; chest &lt;&lt; <span class="hljs-string">&quot; (42 in decimal)\n&quot;</span>;    cout &lt;&lt; <span class="hljs-string">&quot;waist = &quot;</span> &lt;&lt; waist &lt;&lt; <span class="hljs-string">&quot; (42 in hex)\n&quot;</span>;    cout &lt;&lt; <span class="hljs-string">&quot;inseam = &quot;</span> &lt;&lt; inseam &lt;&lt; <span class="hljs-string">&quot; (42 in octal)\n&quot;</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.3</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;int main()&#123;    int chest = <span class="hljs-number">42</span>;    int waist = <span class="hljs-number">42</span>;    int inseam = <span class="hljs-number">42</span>;    cout &lt;&lt; <span class="hljs-string">&quot;monsieur cuts a striking figure ! \n&quot;</span>;    cout &lt;&lt; <span class="hljs-string">&quot;chest = &quot;</span> &lt;&lt; chest &lt;&lt;<span class="hljs-string">&quot; (decimal for 42 ) \n&quot;</span>;    cout &lt;&lt; hex;    cout &lt;&lt; <span class="hljs-string">&quot;waist = &quot;</span> &lt;&lt; waist &lt;&lt; <span class="hljs-string">&quot; (hexadecimal for 42 ) \n&quot;</span>;    cout &lt;&lt; oct;    cout &lt;&lt; <span class="hljs-string">&quot;inseam = &quot;</span> &lt;&lt; inseam &lt;&lt; <span class="hljs-string">&quot; (octal for 42 ) \n&quot;</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.4</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;int main()&#123;    char ch;    cout &lt;&lt; <span class="hljs-string">&quot;please enter one character : &quot;</span>;    cin &gt;&gt; ch;    cout &lt;&lt; <span class="hljs-string">&quot;the character is : &quot;</span> &lt;&lt; ch &lt;&lt; endl;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.5</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;int main()&#123;      char ch = <span class="hljs-string">&#x27;M&#x27;</span>;    int k = ch;    cout &lt;&lt; <span class="hljs-string">&quot;the ASCII code for &quot;</span> &lt;&lt; ch &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; k &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;add one to the character code : &quot;</span> &lt;&lt; endl;    ch = ch + <span class="hljs-number">1</span>;    k = ch;    cout &lt;&lt; <span class="hljs-string">&quot;the ASCII code for &quot;</span> &lt;&lt; ch &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; k &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;displaying by using cout.put() function : &quot;</span>;    cout.put(ch);    cout.put(<span class="hljs-string">&#x27;!&#x27;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.6</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;int main()&#123;    bool a = true;    bool b = false;    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;    const int m = <span class="hljs-number">1</span>;    cout &lt;&lt; <span class="hljs-string">&quot;m - b + a = &quot;</span> &lt;&lt; m - b + a &lt;&lt; endl;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.7</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span>int main()&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    cout.setf(ios_base::fixed, ios_base::floatfield);//fixed<span class="hljs-literal">-point</span>    float tub = <span class="hljs-number">10.0</span> / <span class="hljs-number">3.0</span>;    double mint = <span class="hljs-number">10.0</span> / <span class="hljs-number">3.0</span>;    const float million = <span class="hljs-number">1.0</span>e6;    cout &lt;&lt; <span class="hljs-string">&quot;tub = &quot;</span> &lt;&lt; tub &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;a million tubs = &quot;</span> &lt;&lt; million * tub &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;nand ten million tubs = &quot;</span>&lt;&lt; <span class="hljs-number">10</span> * million * tub &lt;&lt; endl;        cout &lt;&lt; <span class="hljs-string">&quot;mint = &quot;</span> &lt;&lt; mint &lt;&lt; <span class="hljs-string">&quot; and a million mints = &quot;</span>&lt;&lt; million * mint &lt;&lt; endl;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.8</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;int main()&#123;    float a = <span class="hljs-number">2.34</span>E+<span class="hljs-number">13</span>f;    float b = a + <span class="hljs-number">1.0</span>f;    //double a = <span class="hljs-number">2.34</span>E13;    //double b = a + <span class="hljs-number">1.0</span>;    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;b - a = &quot;</span> &lt;&lt; b - a &lt;&lt; endl;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.9</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span>int main(void)&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    float a;    float b;    cout.setf(ios_base::fixed, ios_base::floatfield);    cout &lt;&lt; <span class="hljs-string">&quot;enter a number :&quot;</span>;    cin &gt;&gt; a;    cout &lt;&lt; <span class="hljs-string">&quot;enter another number :&quot;</span>;    cin &gt;&gt; b;         cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;; b = &quot;</span> &lt;&lt; b &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;a + b = &quot;</span> &lt;&lt; a + b &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;a - b = &quot;</span> &lt;&lt; a - b &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;a * b = &quot;</span> &lt;&lt; a * b &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;a/b = &quot;</span> &lt;&lt; a / b &lt;&lt; endl;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.10</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span>int main()&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    cout.setf(ios_base::fixed, ios_base::floatfield);    cout &lt;&lt; <span class="hljs-string">&quot;Integer division : 9/5 = &quot;</span> &lt;&lt; <span class="hljs-number">9</span> / <span class="hljs-number">5</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;Float-point division : 9.0/5.0 = &quot;</span> &lt;&lt; <span class="hljs-number">9.0</span> / <span class="hljs-number">5.0</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;Mixed division : 9.0/5 = &quot;</span> &lt;&lt; <span class="hljs-number">9.0</span> / <span class="hljs-number">5</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;double constants : 1e7/9.0 = &quot;</span> &lt;&lt; <span class="hljs-number">1</span>e7 / <span class="hljs-number">9.0</span> &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;float constants : 1e7f/9.0f = &quot;</span> &lt;&lt; <span class="hljs-number">1</span>e7f / <span class="hljs-number">9.0</span>f &lt;&lt; endl;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.11</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span>int main(void)&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    const int k = <span class="hljs-number">14</span>;    int lbs;    cout &lt;&lt; <span class="hljs-string">&quot;enter your weight in pounds : &quot;</span>;    cin &gt;&gt; lbs;    int stone = lbs / k;    int pounds = lbs % k;    cout &lt;&lt; lbs &lt;&lt; <span class="hljs-string">&quot; pounds are &quot;</span> &lt;&lt; stone &lt;&lt; <span class="hljs-string">&quot; and &quot;</span> &lt;&lt; pounds &lt;&lt; <span class="hljs-string">&quot; pounds \n&quot;</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.12</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span>int main()&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    cout.setf(ios_base::fixed, ios_base::floatfield);    float tree = <span class="hljs-number">3</span>;    int guess(<span class="hljs-number">3.9832</span>);    int debt = <span class="hljs-number">7.2</span>E12;    cout &lt;&lt; <span class="hljs-string">&quot;tree = &quot;</span> &lt;&lt; tree &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;guess = &quot;</span> &lt;&lt; guess &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;debt = &quot;</span> &lt;&lt; debt &lt;&lt; endl;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;*///<span class="hljs-number">3.13</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span>int main()&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    int a, b, c;    a = <span class="hljs-number">19.99</span> + <span class="hljs-number">11.99</span>;    b = int(<span class="hljs-number">19.99</span>) + int(<span class="hljs-number">11.99</span>);    c = (int)<span class="hljs-number">19.99</span> + (int)<span class="hljs-number">11.99</span>;    cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; ,  b= &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">&quot; ,  c = &quot;</span> &lt;&lt; c &lt;&lt; endl;        char ch = <span class="hljs-string">&#x27;Z&#x27;</span>;    cout &lt;&lt; <span class="hljs-string">&quot;ch = &quot;</span> &lt;&lt; ch &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;int(ch) = &quot;</span> &lt;&lt; int(ch) &lt;&lt; endl;    cout &lt;&lt; <span class="hljs-string">&quot;static_cast&lt;int&gt;(ch) = &quot;</span> &lt;&lt; static_cast&lt;int&gt;(ch) &lt;&lt; endl;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">3.14</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span>int main()&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    int yam[<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span> &#125;;    int yamcosts[<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;;    cout &lt;&lt; <span class="hljs-string">&quot;total yams = &quot;</span> &lt;&lt; yam[<span class="hljs-number">0</span>] + yam[<span class="hljs-number">1</span>] + yam[<span class="hljs-number">2</span>] &lt;&lt; endl;    int total = yam[<span class="hljs-number">0</span>] * yamcosts[<span class="hljs-number">0</span>] + yam[<span class="hljs-number">1</span>] * yamcosts[<span class="hljs-number">1</span>] + yam[<span class="hljs-number">2</span>] * yamcosts[<span class="hljs-number">2</span>];    cout &lt;&lt; <span class="hljs-string">&quot;the total expense is &quot;</span> &lt;&lt; total &lt;&lt; <span class="hljs-string">&quot; cents&quot;</span>&lt;&lt;endl;    cout &lt;&lt; <span class="hljs-string">&quot;\nSize of yams array = &quot;</span> &lt;&lt; sizeof yam &lt;&lt; <span class="hljs-string">&quot; bytes.\n&quot;</span>;    cout &lt;&lt; <span class="hljs-string">&quot;Size of one element = &quot;</span> &lt;&lt; sizeof yam[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-string">&quot; bytes.\n&quot;</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*///<span class="hljs-number">4.1</span> /*<span class="hljs-comment">#include &lt;iostream&gt;</span>int main()&#123;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*/</code></pre><h2 id="第四章习题"><a href="#第四章习题" class="headerlink" title="第四章习题"></a>第四章习题</h2><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-comment">//</span><span class="hljs-type">const</span> <span class="hljs-type">int</span> SIZE = <span class="hljs-number">10</span>;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dichotomy</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> num)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-type">int</span> front = <span class="hljs-number">0</span>, end = len, mid = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (front &lt; end)&#123;mid = (front + end) / <span class="hljs-number">2</span>;<span class="hljs-keyword">if</span> (arr[mid] &gt; num)&#123;end = mid - <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; num)&#123;front = mid + <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span>&#123;cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; is the &quot;</span> &lt;&lt; (mid + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-string">&quot; element.&quot;</span> &lt;&lt; endl;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">if</span> (front &gt;= end)&#123;cout &lt;&lt; <span class="hljs-string">&quot;There is no element!&quot;</span> &lt;&lt; endl;&#125;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> num)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-type">int</span> low = <span class="hljs-number">0</span>, high = len, mid = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (low &lt;= high)&#123;mid = (low + high) / <span class="hljs-number">2</span>;<span class="hljs-keyword">if</span> (arr[mid] == num)&#123;<span class="hljs-keyword">return</span> mid;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &gt; num)&#123;high = mid - <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span>&#123;low = mid + <span class="hljs-number">1</span>;&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-type">int</span> arr[SIZE] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span> &#125;;<span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]);<span class="hljs-type">int</span> num;cout &lt;&lt; <span class="hljs-string">&quot;Please enter your num:&quot;</span>;cin &gt;&gt; num;<span class="hljs-comment">//dichotomy(arr, len, num);</span>cout &lt;&lt; <span class="hljs-built_in">test</span>(arr, len, num) &lt;&lt; endl;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 学习记录(2)</title>
      <link href="/2023/07/12/blog-C-8/"/>
      <url>/2023/07/12/blog-C-8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-学习笔记"><a href="#C-学习笔记" class="headerlink" title="C++学习笔记"></a>C++学习笔记</h1><h2 id="第一题，编写小程序转换身高单位，问题主要在与如何表达变量，需要遵循变量有意义的原则；"><a href="#第一题，编写小程序转换身高单位，问题主要在与如何表达变量，需要遵循变量有意义的原则；" class="headerlink" title="//第一题，编写小程序转换身高单位，问题主要在与如何表达变量，需要遵循变量有意义的原则；"></a>//第一题，编写小程序转换身高单位，问题主要在与如何表达变量，需要遵循变量有意义的原则；</h2><pre><code class="hljs excel">/*#include &lt;iostream&gt;<span class="hljs-built_in">int</span> main()&#123;using namespace std;const <span class="hljs-built_in">int</span> <span class="hljs-built_in">t</span> = <span class="hljs-number">10</span>;<span class="hljs-built_in">int</span> height,meter,dmeter,cmeter;cout &lt;&lt; <span class="hljs-string">&quot;enter your height : &quot;</span>;cout.put(&#x27;_&#x27;);cin &gt;&gt; height;meter = height / (<span class="hljs-built_in">t</span>*<span class="hljs-built_in">t</span>);dmeter = height / <span class="hljs-built_in">t</span>-<span class="hljs-built_in">t</span>;cmeter = height % <span class="hljs-built_in">t</span>;cout &lt;&lt; <span class="hljs-string">&quot;your height is &quot;</span> &lt;&lt; meter &lt;&lt; <span class="hljs-string">&quot; meter ,&quot;</span> &lt;&lt; dmeter &lt;&lt; <span class="hljs-string">&quot; dmter ,&quot;</span> &lt;&lt;cmeter &lt;&lt; <span class="hljs-string">&quot; cmeter .&quot;</span>&lt;&lt; endl;return <span class="hljs-number">0</span>;&#125;*/</code></pre><h2 id="第二题，计算BMI；ok，所设置的变量应该有意义；"><a href="#第二题，计算BMI；ok，所设置的变量应该有意义；" class="headerlink" title="//第二题，计算BMI；ok，所设置的变量应该有意义；"></a>//第二题，计算BMI；ok，所设置的变量应该有意义；</h2><pre><code class="hljs nim">/*<span class="hljs-comment">#include&lt;iostream&gt;</span><span class="hljs-type">int</span> main(<span class="hljs-type">void</span>)&#123;<span class="hljs-keyword">using</span> namespace std;double feet, inches, pound, <span class="hljs-type">Eheight</span>, <span class="hljs-type">Cheight</span>, weight, <span class="hljs-type">BMI</span>;<span class="hljs-keyword">const</span> double h = <span class="hljs-number">12</span>;<span class="hljs-keyword">const</span> double m = <span class="hljs-number">0</span>.<span class="hljs-number">0254</span>;<span class="hljs-keyword">const</span> double w = <span class="hljs-number">2</span>.<span class="hljs-number">2</span>;cout &lt;&lt; <span class="hljs-string">&quot;enter your height with feet and inches :&quot;</span>;cin &gt;&gt; feet &gt;&gt; inches;cout &lt;&lt; <span class="hljs-string">&quot;enter your weight with pounds :&quot;</span>;cin &gt;&gt; pound;<span class="hljs-type">Eheight</span> = feet * h + inches;<span class="hljs-type">Cheight</span> = <span class="hljs-type">Eheight</span> * m;weight = pound / w;<span class="hljs-type">BMI</span> = weight / (<span class="hljs-type">Cheight</span> * <span class="hljs-type">Cheight</span>);cout &lt;&lt; <span class="hljs-string">&quot;your BMI is : &quot;</span> &lt;&lt; <span class="hljs-type">BMI</span> &lt;&lt; endl;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*/</code></pre><h2 id="第三题，纬度计算；ok，可以使用类型转换；"><a href="#第三题，纬度计算；ok，可以使用类型转换；" class="headerlink" title="//第三题，纬度计算；ok，可以使用类型转换；"></a>//第三题，纬度计算；ok，可以使用类型转换；</h2><pre><code class="hljs excel">/*#include &lt;iostream&gt;<span class="hljs-built_in">int</span> main(void)&#123;double degree, <span class="hljs-built_in">minute</span>, <span class="hljs-built_in">second</span>, answers;const double <span class="hljs-built_in">t</span> = <span class="hljs-number">60</span>;using namespace std;cout &lt;&lt; <span class="hljs-string">&quot;Enter a latitude in degrees, minutes , and seconds : &quot;</span> &lt;&lt; endl;cout &lt;&lt; <span class="hljs-string">&quot;First, enter the degrees : &quot;</span>;cin &gt;&gt; degree;cout &lt;&lt; <span class="hljs-string">&quot;Next, enter the minutes of arc : &quot;</span>;cin &gt;&gt; <span class="hljs-built_in">minute</span>;cout &lt;&lt; <span class="hljs-string">&quot;Finally, enter the seconds of arc : &quot;</span>;cin &gt;&gt; <span class="hljs-built_in">second</span>;answers = degree + <span class="hljs-built_in">minute</span> / <span class="hljs-built_in">t</span> + <span class="hljs-built_in">second</span> / <span class="hljs-built_in">t</span> / <span class="hljs-built_in">t</span> ;cout &lt;&lt; degree &lt;&lt; <span class="hljs-string">&quot; degrees , &quot;</span> &lt;&lt; <span class="hljs-built_in">minute</span> &lt;&lt; <span class="hljs-string">&quot; minutes , &quot;</span> &lt;&lt; <span class="hljs-built_in">second</span> &lt;&lt; <span class="hljs-string">&quot; seconds = &quot;</span> &lt;&lt; answers &lt;&lt; <span class="hljs-string">&quot; degrees &quot;</span> &lt;&lt; endl;return <span class="hljs-number">0</span>;&#125;*/</code></pre><h2 id="第四题，时间转换；可以使用减法代替取余方式；"><a href="#第四题，时间转换；可以使用减法代替取余方式；" class="headerlink" title="//第四题，时间转换；可以使用减法代替取余方式；"></a>//第四题，时间转换；可以使用减法代替取余方式；</h2><pre><code class="hljs excel">/*#include&lt;iostream&gt;<span class="hljs-built_in">int</span> main(void)&#123;using namespace std;long <span class="hljs-built_in">second</span>, <span class="hljs-built_in">days</span>, hours, minutes, seconds;const long <span class="hljs-built_in">t</span> = <span class="hljs-number">60</span>;const long k = <span class="hljs-number">24</span>;cout &lt;&lt; <span class="hljs-string">&quot;Enter the number of seconds : &quot;</span>;cin &gt;&gt; <span class="hljs-built_in">second</span>;//<span class="hljs-built_in">days</span> = <span class="hljs-built_in">second</span> / (<span class="hljs-built_in">t</span>*<span class="hljs-built_in">t</span>*k);//hours = (<span class="hljs-built_in">second</span> - <span class="hljs-built_in">days</span>*<span class="hljs-built_in">t</span>*<span class="hljs-built_in">t</span>*k)/(<span class="hljs-built_in">t</span>*<span class="hljs-built_in">t</span>);//minutes = (<span class="hljs-built_in">second</span>- <span class="hljs-built_in">days</span>*<span class="hljs-built_in">t</span>*<span class="hljs-built_in">t</span>*k-hours*<span class="hljs-built_in">t</span>*<span class="hljs-built_in">t</span>)/<span class="hljs-built_in">t</span>;//seconds = <span class="hljs-built_in">second</span> - <span class="hljs-built_in">days</span> * <span class="hljs-built_in">t</span> * <span class="hljs-built_in">t</span> * k - hours * <span class="hljs-built_in">t</span> * <span class="hljs-built_in">t</span>-minutes*<span class="hljs-built_in">t</span>;<span class="hljs-built_in">days</span> = <span class="hljs-built_in">second</span> / (<span class="hljs-built_in">t</span> * <span class="hljs-built_in">t</span> * k);<span class="hljs-built_in">second</span> = <span class="hljs-built_in">second</span> % (<span class="hljs-built_in">t</span> * <span class="hljs-built_in">t</span> * k);hours = <span class="hljs-built_in">second</span> / (<span class="hljs-built_in">t</span> * <span class="hljs-built_in">t</span>);<span class="hljs-built_in">second</span> = <span class="hljs-built_in">second</span> % (<span class="hljs-built_in">t</span> * <span class="hljs-built_in">t</span>);minutes = <span class="hljs-built_in">second</span> / <span class="hljs-built_in">t</span>;seconds = <span class="hljs-built_in">second</span> % <span class="hljs-built_in">t</span>;cout &lt;&lt; <span class="hljs-built_in">second</span> &lt;&lt; <span class="hljs-string">&quot; seconds = &quot;</span> &lt;&lt; <span class="hljs-built_in">days</span> &lt;&lt; <span class="hljs-string">&quot; days, &quot;</span> &lt;&lt; hours &lt;&lt; <span class="hljs-string">&quot; hours, &quot;</span> &lt;&lt; minutes &lt;&lt; <span class="hljs-string">&quot; minutes, &quot;</span> &lt;&lt; seconds &lt;&lt; <span class="hljs-string">&quot; seconds .&quot;</span> &lt;&lt; endl;return <span class="hljs-number">0</span>;&#125;*/</code></pre><h2 id="第五题，美国人口占比计算；ok，注意精度；"><a href="#第五题，美国人口占比计算；ok，注意精度；" class="headerlink" title="//第五题，美国人口占比计算；ok，注意精度；"></a>//第五题，美国人口占比计算；ok，注意精度；</h2><pre><code class="hljs coq">/*#include&lt;iostream&gt;int main()&#123;<span class="hljs-built_in">using</span> namespace std;long long world, US;long <span class="hljs-built_in">double</span> percentage;cout &lt;&lt; <span class="hljs-string">&quot;Enter the world&#x27;s population: &quot;</span>;cin &gt;&gt; world;cout &lt;&lt; <span class="hljs-string">&quot;Enter the population of the US: &quot;</span>;cin &gt;&gt; US;percentage = long <span class="hljs-built_in">double</span>(US) / long <span class="hljs-built_in">double</span>(world);cout &lt;&lt; <span class="hljs-string">&quot;the population of the US is &quot;</span> &lt;&lt; <span class="hljs-number">100</span>*percentage &lt;&lt; <span class="hljs-string">&quot;% of the world population. &quot;</span> &lt;&lt; endl;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*/</code></pre><p>//第六题，耗油量的计算；ok，变量的表达；</p><pre><code class="hljs smalltalk">/*<span class="hljs-symbol">#include</span>&lt;iostream&gt;int main(void)&#123;using namespace std;double mile, gallon, per, fuel_in_liter, distance_in_kilometer, fuel_consume;cout &lt;&lt; <span class="hljs-comment">&quot;Enter the length in miles: &quot;</span>;cin &gt;&gt; mile;cout &lt;&lt; <span class="hljs-comment">&quot;Enter the consumption of gasoline in gallon: &quot;</span>;cin &gt;&gt; gallon;per = mile / gallon;cout &lt;&lt; <span class="hljs-comment">&quot;the consumption of gasoline per gallon is &quot;</span> &lt;&lt; per &lt;&lt; endl;cout &lt;&lt; <span class="hljs-comment">&quot;Enter the distance in kilometer: &quot;</span>;cin &gt;&gt; distance_in_kilometer;cout &lt;&lt; <span class="hljs-comment">&quot;Enter the fuel consume in liter: &quot;</span>;cin &gt;&gt; fuel_in_liter;fuel_consume = (fuel_in_liter / distance_in_kilometer) * <span class="hljs-number">100</span>;cout &lt;&lt; <span class="hljs-comment">&quot;the consumption is &quot;</span> &lt;&lt; fuel_consume &lt;&lt; <span class="hljs-comment">&quot; L/100km. &quot;</span> &lt;&lt; endl;return <span class="hljs-number">0</span>;&#125;*/</code></pre><h2 id="第七题，问题在于计算的公式不对；算法一定要符合题目的意思；"><a href="#第七题，问题在于计算的公式不对；算法一定要符合题目的意思；" class="headerlink" title="//第七题，问题在于计算的公式不对；算法一定要符合题目的意思；"></a>//第七题，问题在于计算的公式不对；算法一定要符合题目的意思；</h2><pre><code class="hljs nim">/*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-type">int</span> main(<span class="hljs-type">void</span>)&#123;<span class="hljs-keyword">using</span> namespace std;double esumption , asumption;<span class="hljs-keyword">const</span> double a = <span class="hljs-number">62</span>.<span class="hljs-number">14</span>;<span class="hljs-keyword">const</span> double b = <span class="hljs-number">3</span>.<span class="hljs-number">785</span>;cout &lt;&lt; <span class="hljs-string">&quot;Enter the consumption of gallon of the car : &quot;</span>;cin &gt;&gt; esumption;asumption = a*b/esumption;cout &lt;&lt; <span class="hljs-string">&quot;After translated , the consumption of gallon of the car is: &quot;</span> &lt;&lt; asumption &lt;&lt; endl;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*/</code></pre><h2 id="字符输出的两种表达；"><a href="#字符输出的两种表达；" class="headerlink" title="//字符输出的两种表达；"></a>//字符输出的两种表达；</h2><pre><code class="hljs nim">/*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-type">int</span> main(<span class="hljs-type">void</span>)&#123;<span class="hljs-keyword">using</span> namespace std;cout &lt;&lt; <span class="hljs-type">char</span>(<span class="hljs-number">6</span>) &lt;&lt; endl;cout.put(<span class="hljs-number">6</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*/</code></pre>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 学习记录(1)</title>
      <link href="/2023/07/10/blog-C-7/"/>
      <url>/2023/07/10/blog-C-7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-学习笔记"><a href="#C-学习笔记" class="headerlink" title="C++学习笔记"></a>C++学习笔记</h1><h2 id="number-1-show-your-name-and-address-directly"><a href="#number-1-show-your-name-and-address-directly" class="headerlink" title="//number 1: show your name and address directly;"></a>//number 1: show your name and address directly;</h2><pre><code class="hljs powershell">/*<span class="hljs-comment">#include &lt;iostream&gt;</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;int main()&#123;cout &lt;&lt; <span class="hljs-string">&quot;enter your name:XX&quot;</span> &lt;&lt; endl;cout &lt;&lt; <span class="hljs-string">&quot;enter your address:YY&quot;</span> &lt;&lt; endl;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;*/ //第一题ok；</code></pre><h2 id="number-2-about-multipilcation"><a href="#number-2-about-multipilcation" class="headerlink" title="//number 2: about multipilcation;"></a>//number 2: about multipilcation;</h2><pre><code class="hljs perl">/*<span class="hljs-comment">#include &lt;iostream&gt;</span>using namespace std;<span class="hljs-keyword">int</span> tranfer(<span class="hljs-keyword">int</span> k);<span class="hljs-keyword">int</span> main()&#123;cout &lt;&lt; <span class="hljs-string">&quot;enter long =&quot;</span>;<span class="hljs-keyword">int</span> <span class="hljs-keyword">x</span>;cin &gt;&gt; <span class="hljs-keyword">x</span>;<span class="hljs-keyword">int</span> <span class="hljs-keyword">ma</span> = tranfer(<span class="hljs-keyword">x</span>);cout &lt;&lt; <span class="hljs-string">&quot;after transfered , the answer is ma =&quot;</span> &lt;&lt; <span class="hljs-keyword">ma</span> &lt;&lt; endl;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">int</span> tranfer(<span class="hljs-keyword">int</span> k)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">220</span> * k;&#125;*<span class="hljs-regexp">/</span><span class="hljs-regexp">/</span>/第二题可以直接在cout后面使用乘法输出<span class="hljs-number">220</span>*K；无需调用自定义乘法函数；</code></pre><h2 id="number-3-call-functions"><a href="#number-3-call-functions" class="headerlink" title="//number 3: call functions;"></a>//number 3: call functions;</h2><pre><code class="hljs fsharp"><span class="hljs-operator">/*</span>#include <span class="hljs-operator">&lt;</span>iostream<span class="hljs-operator">&gt;</span><span class="hljs-built_in">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-keyword">void</span> f1(<span class="hljs-keyword">void</span>);<span class="hljs-keyword">void</span> f2(<span class="hljs-keyword">void</span>);int main(<span class="hljs-keyword">void</span>)&#123; f1(); f1(); f2(); f2();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">void</span> f1(<span class="hljs-keyword">void</span>)&#123;cout <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot;three blind mice .&quot;</span> <span class="hljs-operator">&lt;&lt;</span> endl;&#125;<span class="hljs-keyword">void</span> f2(<span class="hljs-keyword">void</span>)&#123;cout <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot;see how they run .&quot;</span> <span class="hljs-operator">&lt;&lt;</span> endl;&#125;<span class="hljs-operator">*/</span><span class="hljs-comment">//第三题直接调用无返回值的函数，调用的时候只需要写出函数名和括号，比如此题中的 f2();</span></code></pre><h2 id="number-4-calculate-the-age-of-mouth"><a href="#number-4-calculate-the-age-of-mouth" class="headerlink" title="//number 4 :calculate the age of mouth;"></a>//number 4 :calculate the age of mouth;</h2><pre><code class="hljs excel">/*#include &lt;iostream&gt;using namespace std;<span class="hljs-built_in">int</span> main()&#123;cout &lt;&lt; <span class="hljs-string">&quot;enter your age : &quot;</span>;<span class="hljs-built_in">int</span> age;cin &gt;&gt; age;<span class="hljs-built_in">int</span> <span class="hljs-built_in">month</span>;<span class="hljs-built_in">month</span> = age * <span class="hljs-number">12</span>;cout &lt;&lt; <span class="hljs-string">&quot;your age include : &quot;</span> &lt;&lt; <span class="hljs-built_in">month</span> &lt;&lt; <span class="hljs-string">&quot; months&quot;</span>;return <span class="hljs-number">0</span>;&#125;*///第四题与第二题类似；在cout中直接计算后输出；</code></pre><h2 id="number-5-：tranfer-the-temperature"><a href="#number-5-：tranfer-the-temperature" class="headerlink" title="//number 5 ：tranfer the temperature;"></a>//number 5 ：tranfer the temperature;</h2><pre><code class="hljs coq">/*#include &lt;iostream&gt;<span class="hljs-built_in">using</span> namespace std;<span class="hljs-built_in">double</span> tranfer(<span class="hljs-built_in">double</span> x);int main()&#123;cout &lt;&lt; <span class="hljs-string">&quot;Please enter a Celsius value: &quot;</span>;<span class="hljs-built_in">double</span> m;cin &gt;&gt; m;<span class="hljs-built_in">double</span> n = tranfer(m);cout &lt;&lt; m &lt;&lt; <span class="hljs-string">&quot; degrees Celsius is &quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot; degrees Fahrenheit.&quot;</span> &lt;&lt; endl;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-built_in">double</span> tranfer(<span class="hljs-built_in">double</span> x)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1.8</span> * x + <span class="hljs-number">32.0</span>;&#125;*///第五题ok；</code></pre><h2 id="number-6-light-year-transfer"><a href="#number-6-light-year-transfer" class="headerlink" title="//number 6 : light year transfer;"></a>//number 6 : light year transfer;</h2><pre><code class="hljs coq">/*#include &lt;iostream&gt;<span class="hljs-built_in">using</span> namespace std;<span class="hljs-built_in">double</span> trans(<span class="hljs-built_in">double</span> x);int main()&#123;cout &lt;&lt; <span class="hljs-string">&quot;enter the number of night years : &quot;</span>;<span class="hljs-built_in">double</span> year;cin &gt;&gt; year;<span class="hljs-built_in">double</span> units = trans(year);cout &lt;&lt; year &lt;&lt; <span class="hljs-string">&quot; light years = &quot;</span> &lt;&lt; units &lt;&lt; <span class="hljs-string">&quot; astronomical units. &quot;</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-built_in">double</span> trans(<span class="hljs-built_in">double</span> x)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">63240</span> * x ;&#125;*///第六题ok；转换的英语单词是convert；</code></pre><h2 id="number-7-show-the-hours-and-the-minutes"><a href="#number-7-show-the-hours-and-the-minutes" class="headerlink" title="//number 7 : show the hours and the minutes ;"></a>//number 7 : show the hours and the minutes ;</h2><pre><code class="hljs fsharp"><span class="hljs-operator">/*</span>#include <span class="hljs-operator">&lt;</span>iostream<span class="hljs-operator">&gt;</span><span class="hljs-built_in">using</span> <span class="hljs-keyword">namespace</span> std;int main()&#123;int m;int n;cin <span class="hljs-operator">&gt;&gt;</span> m;    cin <span class="hljs-operator">&gt;&gt;</span> n;cout <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot; enter the number of hours : &quot;</span> <span class="hljs-operator">&lt;&lt;</span> m <span class="hljs-operator">&lt;&lt;</span> endl;cout <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot; enter the number of minutes : &quot;</span> <span class="hljs-operator">&lt;&lt;</span> n <span class="hljs-operator">&lt;&lt;</span> endl;cout <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot; time : &quot;</span> <span class="hljs-operator">&lt;&lt;</span> m <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot;:&quot;</span> <span class="hljs-operator">&lt;&lt;</span> n ;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-operator">*/</span><span class="hljs-comment">//第七题改写如下：</span><span class="hljs-comment">//number 7 : show the hours and the minutes ;</span><span class="hljs-operator">/*</span>#include <span class="hljs-operator">&lt;</span>iostream<span class="hljs-operator">&gt;</span><span class="hljs-built_in">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-keyword">void</span> <span class="hljs-keyword">function</span>(<span class="hljs-keyword">void</span>);int main(<span class="hljs-keyword">void</span>)&#123;<span class="hljs-keyword">function</span>();&#125;<span class="hljs-keyword">void</span> <span class="hljs-keyword">function</span>(<span class="hljs-keyword">void</span>)&#123;int m;int n;cout <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot;enter the number of hours : &quot;</span>;cin <span class="hljs-operator">&gt;&gt;</span> m;cout <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot;enter the number of minutes : &quot;</span>;cin <span class="hljs-operator">&gt;&gt;</span> n;cout <span class="hljs-operator">&lt;&lt;</span><span class="hljs-string">&quot;time ：&quot;</span> <span class="hljs-operator">&lt;&lt;</span> m <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot;:&quot;</span> <span class="hljs-operator">&lt;&lt;</span> n;&#125;<span class="hljs-operator">*/</span><span class="hljs-comment">//第七题ok；输入函数应该在main函数里面，调用函数显示时间，修改如下：</span><span class="hljs-comment">//number 7 : show the hours and the minutes ;</span><span class="hljs-operator">/*</span>#include <span class="hljs-operator">&lt;</span>iostream<span class="hljs-operator">&gt;</span><span class="hljs-built_in">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-keyword">void</span> display(int a, int b);int main()&#123;cout <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot;enter the number of hours : &quot;</span>;int m;cin <span class="hljs-operator">&gt;&gt;</span> m;cout <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot;enter the number of minutes : &quot;</span>;int n;cin <span class="hljs-operator">&gt;&gt;</span> n;display(m, n);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">void</span> display(int a, int b)&#123;cout <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot;time : &quot;</span> <span class="hljs-operator">&lt;&lt;</span> a <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-string">&quot;:&quot;</span> <span class="hljs-operator">&lt;&lt;</span> b <span class="hljs-operator">&lt;&lt;</span> endl;&#125;<span class="hljs-operator">*/</span><span class="hljs-comment">//第七题完美解决，加油！！！</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 语法学习</title>
      <link href="/2023/07/08/blog-11-python/"/>
      <url>/2023/07/08/blog-11-python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python基本语法归纳"><a href="#python基本语法归纳" class="headerlink" title="python基本语法归纳"></a>python基本语法归纳</h1><pre><code class="hljs python"><span class="hljs-comment">## how to comment in more than one line: using &quot;&quot;&quot; or &#x27;&#x27;&#x27; </span><span class="hljs-comment">## in fact, &#x27; equall to &quot;</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">this is comment one</span><span class="hljs-string">this is comment two</span><span class="hljs-string">this is comment three </span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">this is comment one </span><span class="hljs-string">this is comment two</span><span class="hljs-string">this is comment three</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-comment">## how to define variables </span>a = <span class="hljs-string">&quot;hello, dear ~&quot;</span><span class="hljs-comment">## how to print it </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span>, my pleasure to meet you here !&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">50</span>)<span class="hljs-comment">## how to write codes more than one line: using \</span>argv1 = <span class="hljs-number">1</span> ; argv2 = <span class="hljs-number">2</span> ; argv3 = <span class="hljs-number">3</span> ; argv4 = <span class="hljs-number">4</span> ;b = argv1 + \    argv2 + \    argv3 + \    argv4 <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;1 + 2 + 3 + 4 = <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">50</span>)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">here be attention the order of define variables and use them !!!</span><span class="hljs-string">don&#x27;t use the variable that you never define before !!! </span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-comment">## there are four kinds of number: int, bool, float, complex(a + bi)</span>int1 = <span class="hljs-number">1</span>bool0 = <span class="hljs-literal">False</span>bool00 = <span class="hljs-string">&#x27;false&#x27;</span>float1 = <span class="hljs-number">2E5</span>complex1 = <span class="hljs-number">1</span> + <span class="hljs-number">1j</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;&quot;&quot;int1 = <span class="hljs-subst">&#123;int1&#125;</span>, </span><span class="hljs-string">bool0 = <span class="hljs-subst">&#123;bool0&#125;</span>, </span><span class="hljs-string">bool00 = <span class="hljs-subst">&#123;bool00&#125;</span>, </span><span class="hljs-string">float1 = <span class="hljs-subst">&#123;float1&#125;</span>, </span><span class="hljs-string">complex1 = <span class="hljs-subst">&#123;complex1&#125;</span>&quot;&quot;&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">50</span>)<span class="hljs-comment">## \ can be used to change initial meaning, but we add r in front of the string to avoid </span>a = <span class="hljs-string">&#x27;print(&quot;this is line with \\n&quot;)&#x27;</span>b = <span class="hljs-string">&#x27;print(r&quot;this is line with \\n&quot;)&#x27;</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span>:&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;this is line with \n&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;b&#125;</span>:&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;this is line with \n&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">50</span>)<span class="hljs-comment">## how to conject strings using + and *</span>a = <span class="hljs-string">&#x27;this &#x27;</span>b = <span class="hljs-string">&#x27;is &#x27;</span>c = <span class="hljs-string">&#x27;a&#x27;</span>x = <span class="hljs-string">&#x27; &#x27;</span>d = <span class="hljs-string">&#x27;string&#x27;</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span><span class="hljs-subst">&#123;b&#125;</span><span class="hljs-subst">&#123;c&#125;</span><span class="hljs-subst">&#123;x&#125;</span><span class="hljs-subst">&#123;d&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(a + b + c + x + d)<span class="hljs-built_in">print</span>(a*<span class="hljs-number">2</span> + b*<span class="hljs-number">2</span> + c*<span class="hljs-number">2</span> + x + d*<span class="hljs-number">2</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">50</span>)<span class="hljs-comment">## how to print strings in different ways</span>strs=<span class="hljs-string">&#x27;1234567890&#x27;</span><span class="hljs-built_in">print</span>(strs)<span class="hljs-built_in">print</span>(strs[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])<span class="hljs-built_in">print</span>(strs[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>])<span class="hljs-built_in">print</span>(strs[<span class="hljs-number">2</span>:])<span class="hljs-built_in">print</span>(strs[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])<span class="hljs-built_in">print</span>(strs * <span class="hljs-number">3</span>)<span class="hljs-built_in">print</span>(strs + <span class="hljs-string">&#x27;love&#x27;</span>)<span class="hljs-built_in">print</span>(strs + <span class="hljs-string">&#x27;\\n&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;\n&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\\n&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">50</span>)<span class="hljs-comment">## how to write more statements in one line using &lt;;&gt;</span><span class="hljs-keyword">import</span> sys; x = <span class="hljs-string">&#x27;love never fade away&#x27;</span>; sys.stdout.write(x + <span class="hljs-string">&#x27;\n&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">50</span>)<span class="hljs-comment">## how to print without shifting using end=&quot; &quot;</span>x=<span class="hljs-string">&quot;love&quot;</span>y=<span class="hljs-string">&quot;never&quot;</span>z=<span class="hljs-string">&quot;fade&quot;</span><span class="hljs-comment"># shift</span><span class="hljs-built_in">print</span>(x)<span class="hljs-built_in">print</span>(y)<span class="hljs-built_in">print</span>(z)<span class="hljs-comment"># no shift</span><span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">&quot; &quot;</span>)<span class="hljs-built_in">print</span>(y, end=<span class="hljs-string">&quot; &quot;</span>)<span class="hljs-built_in">print</span>(z, end=<span class="hljs-string">&quot; &quot;</span>)<span class="hljs-built_in">print</span>()<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">50</span> + <span class="hljs-string">&#x27;\n&#x27;</span>)<span class="hljs-comment"># how to use &#x27;import&#x27; to input some functions that you need</span><span class="hljs-comment"># here we are going to find the path of python3  </span><span class="hljs-keyword">import</span> sys<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">25</span> + <span class="hljs-string">&quot; import module &quot;</span> + <span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">25</span>) <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the arguments list as following: &quot;</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sys.argv:    <span class="hljs-built_in">print</span>(i)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n the path of python:&#x27;</span>,sys.path)<span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv,path<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">25</span> + <span class="hljs-string">&quot; import module &quot;</span> + <span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">25</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;path:&#x27;</span>,path)</code></pre><h1 id="python调试结果展示"><a href="#python调试结果展示" class="headerlink" title="python调试结果展示"></a>python调试结果展示</h1><pre><code class="hljs markdown">hello, dear ~, my pleasure to meet you here !<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**1 + 2 + 3 + 4 = 10<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**int1 = 1,bool0 = False,bool00 = false,float1 = 200000.0,complex1 = (1+1j)<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**print(&quot;this is line with \n&quot;):this is line withprint(r&quot;this is line with \n&quot;):this is line with \n<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**this is a stringthis is a stringthis this is is aa stringstring<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**123456789012345678934534567890241234567890123456789012345678901234567890love1234567890\n\n\n<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**love never fade away<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**loveneverfadelove never fade<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>* import module <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>*the arguments list as following:ex1.py the path of python: [&#x27;/home/lei/tvp/ex&#x27;, &#x27;/usr/lib/python38.zip&#x27;, &#x27;/usr/lib/python3.8&#x27;, &#x27;/usr/lib/python3.8/lib-dynload&#x27;, &#x27;/usr/local/lib/python3.8/dist-packages&#x27;, &#x27;/usr/lib/python3/dist-packages&#x27;]<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>* import module <span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>*path: [&#x27;/home/lei/tvp/ex&#x27;, &#x27;/usr/lib/python38.zip&#x27;, &#x27;/usr/lib/python3.8&#x27;, &#x27;/usr/lib/python3.8/lib-dynload&#x27;, &#x27;/usr/local/lib/python3.8/dist-packages&#x27;, &#x27;/usr/lib/python3/dist-packages&#x27;]</code></pre>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 学习记录(21-30)</title>
      <link href="/2023/07/05/blog-10-python/"/>
      <url>/2023/07/05/blog-10-python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python-学习记录"><a href="#python-学习记录" class="headerlink" title="python 学习记录"></a>python 学习记录</h1><h2 id="21-1-使用return返回函数值"><a href="#21-1-使用return返回函数值" class="headerlink" title="21.1 使用return返回函数值"></a>21.1 使用return返回函数值</h2><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;add <span class="hljs-subst">&#123;a&#125;</span> + <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)    <span class="hljs-keyword">return</span> a + b    <span class="hljs-keyword">def</span> <span class="hljs-title function_">subtract</span>(<span class="hljs-params">a, b</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;subtract <span class="hljs-subst">&#123;a&#125;</span> - <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)    <span class="hljs-keyword">return</span> a - b    <span class="hljs-keyword">def</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">a, b</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;multiply <span class="hljs-subst">&#123;a&#125;</span> * <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)    <span class="hljs-keyword">return</span> a * b<span class="hljs-keyword">def</span> <span class="hljs-title function_">divide</span>(<span class="hljs-params">a, b</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;divide <span class="hljs-subst">&#123;a&#125;</span> / <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)    <span class="hljs-keyword">return</span> a / b    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;let&#x27;s do some math with just functions !&quot;</span>)age = add(<span class="hljs-number">20</span>, <span class="hljs-number">3</span>)height = subtract(<span class="hljs-number">166</span>, <span class="hljs-number">0</span>)weight = multiply(<span class="hljs-number">45</span>, <span class="hljs-number">2</span>)IQ = divide(<span class="hljs-number">250</span>, <span class="hljs-number">2</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;age: <span class="hljs-subst">&#123;age&#125;</span>, height: <span class="hljs-subst">&#123;height&#125;</span>, weight: <span class="hljs-subst">&#123;weight&#125;</span>, IQ: <span class="hljs-subst">&#123;IQ&#125;</span>&quot;</span>)amazing = add(age, subtract(height, multiply(weight, divide(IQ, <span class="hljs-number">2</span>))))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wasn&#x27;t it amazing ?&quot;</span>, amazing, <span class="hljs-string">&quot;yeah, it&#x27;s funny !&quot;</span>)</code></pre><pre><code class="hljs apache"><span class="hljs-attribute">let</span>&#x27;s do some math with just functions !<span class="hljs-attribute">add</span> <span class="hljs-number">20</span> + <span class="hljs-number">3</span><span class="hljs-attribute">subtract</span> <span class="hljs-number">166</span> - <span class="hljs-number">0</span><span class="hljs-attribute">multiply</span> <span class="hljs-number">45</span> * <span class="hljs-number">2</span><span class="hljs-attribute">divide</span> <span class="hljs-number">250</span> / <span class="hljs-number">2</span><span class="hljs-attribute">age</span>: <span class="hljs-number">23</span>, height: <span class="hljs-number">166</span>, weight: <span class="hljs-number">90</span>, IQ: <span class="hljs-number">125</span>.<span class="hljs-number">0</span><span class="hljs-attribute">divide</span> <span class="hljs-number">125</span>.<span class="hljs-number">0</span> / <span class="hljs-number">2</span><span class="hljs-attribute">multiply</span> <span class="hljs-number">90</span> * <span class="hljs-number">62</span>.<span class="hljs-number">5</span><span class="hljs-attribute">subtract</span> <span class="hljs-number">166</span> - <span class="hljs-number">5625</span>.<span class="hljs-number">0</span><span class="hljs-attribute">add</span> <span class="hljs-number">23</span> + -<span class="hljs-number">5459</span>.<span class="hljs-number">0</span><span class="hljs-attribute">wasn</span>&#x27;t it amazing ? -<span class="hljs-number">5436</span>.<span class="hljs-number">0</span> yeah, it&#x27;s funny !</code></pre><h3 id="21-2-返回计算后的值"><a href="#21-2-返回计算后的值" class="headerlink" title="21.2 返回计算后的值"></a>21.2 返回计算后的值</h3><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maths</span>(<span class="hljs-params">a, b</span>):    c = a + b; d = a - b; e = a * b; f = a / b;    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a + - * / b = &quot;</span>, c, d, e, f)    <span class="hljs-keyword">return</span> c - d - e - f<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*&quot;</span> * <span class="hljs-number">50</span>) a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter 1first: \n&quot;</span>))b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter 2second: \n&quot;</span>))k = maths(a, b)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;calculated successfully !&quot;</span>)<span class="hljs-built_in">print</span>(k)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;*&quot;</span> * <span class="hljs-number">50</span>)</code></pre><pre><code class="hljs markdown"><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**please enter 1first:13please enter 2second:23a + - * / b =  36 -10 299 0.5652173913043478calculated successfully !-253.56521739130434<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**</span></code></pre><h2 id="22-1-归纳总结（略）"><a href="#22-1-归纳总结（略）" class="headerlink" title="22.1 归纳总结（略）"></a>22.1 归纳总结（略）</h2><h2 id="23-1-语言编码与解码"><a href="#23-1-语言编码与解码" class="headerlink" title="23.1 语言编码与解码"></a>23.1 语言编码与解码</h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys script, input_encoding, error = sys.argv<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">language_file, encoding, errors</span>):    line = language_file.readline()        <span class="hljs-keyword">if</span> line:        print_line(line, encoding, errors)       <span class="hljs-keyword">return</span> main(language_file, encoding, errors)       <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_line</span>(<span class="hljs-params">line, encoding, errors</span>):    next_lang = line.strip()    raw_bytes = next_lang.encode(encoding, errors=errors)           cooked_string = raw_bytes.decode(encoding, errors=errors)        <span class="hljs-built_in">print</span>(raw_bytes, <span class="hljs-string">&quot;&lt;===&gt;&quot;</span>, cooked_string)    languages = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;languages.txt&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)main(languages, input_encoding, error)</code></pre><blockquote><p>测试语言文本</p></blockquote><pre><code class="hljs excel">AfrikaansአማርኛАҧсшәаالعربيةAragonésArpetanAzərbaycancaBamanankanবাংলাBâ<span class="hljs-built_in">n</span>-lâm-gúБеларускаяБългарскиBoarischBosanskiБуряадCatalàЧӑвашлаČeštinaCymraegDanskDeutschEestiΕλληνικάEspañolEsperantoفارسیFrançaisFryskGaelgGàidhligGalego한국어Հայերենहिन्दीHrvatskiIdoInterlinguaItalianoעבריתಕನ್ನಡKapampanganქართულიҚазақшаKreyòl ayisyenLatgaļuLatinaLatviešuLëtzebuergeschLietuviųMagyarМакедонскиMaltiमराठीმარგალურიمازِرونیBahasa MelayuМонголNederlandsनेपाल भाषा日本語Norsk bokmålNouormandOccitanOʻzbekcha/ўзбекчаਪੰਜਾਬੀپنجابیپښتوPlattdüütschPolskiPortuguêsRomâ<span class="hljs-built_in">n</span>ăRomaniРусскийSeelterskShqipSimple EnglishSlovenčinaکوردیی ناوەندیСрпски / srpskiSuomiSvenskaTagalogதமிழ்ภาษาไทยTaqbaylitТатарча/tatarçaతెలుగుТоҷикӣ<span class="hljs-built_in">T</span>ürkçeУкраїнськаاردوTiếng Việ<span class="hljs-built_in">t</span>Võro文言吴语ייִדיש中文</code></pre><h2 id="24-1-归纳总结（详）"><a href="#24-1-归纳总结（详）" class="headerlink" title="24.1 归纳总结（详）"></a>24.1 归纳总结（详）</h2><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;let&#x27;s practice everyting,&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;you\&#x27;d need to know \&#x27;about escapes with \\ that do:&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n newlines and \t tabs.&#x27;</span>)poem = <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">\tthe lovely world</span><span class="hljs-string">with logic so firmly planted</span><span class="hljs-string">can&#x27;t discern \n the needs of love</span><span class="hljs-string">nor comprehend passion from intuition</span><span class="hljs-string">and requires an explanation</span><span class="hljs-string">\n\t\twhere there is none.</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">50</span>)<span class="hljs-built_in">print</span>(poem)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-&quot;</span> * <span class="hljs-number">50</span>)five = <span class="hljs-number">10</span> - <span class="hljs-number">2</span> + <span class="hljs-number">3</span> - <span class="hljs-number">6</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;this should be five : <span class="hljs-subst">&#123;five&#125;</span>&quot;</span>)<span class="hljs-keyword">def</span> <span class="hljs-title function_">secret_formula</span>(<span class="hljs-params">started</span>):    jelly_beans = started * <span class="hljs-number">500</span>    jars = jelly_beans / <span class="hljs-number">1000</span>    crates = jars / <span class="hljs-number">100</span>    <span class="hljs-keyword">return</span> jelly_beans, jars, crates    start_point = <span class="hljs-number">10000</span>beans, jars, crates = secret_formula(start_point)<span class="hljs-comment"># remember that this is another way to format a string</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wiht a starting point of : &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(start_point))<span class="hljs-comment"># it&#x27;s just like with an f&quot;&quot; string</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;we&#x27;d have <span class="hljs-subst">&#123;beans&#125;</span> beans, <span class="hljs-subst">&#123;jars&#125;</span> jars, and <span class="hljs-subst">&#123;crates&#125;</span> crates.&quot;</span>)start_point = start_point / <span class="hljs-number">10</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we can also do that this way:&quot;</span>)formula = secret_formula(start_point)<span class="hljs-comment"># this is an easy to apply a list to format string</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we&#x27;d have &#123;&#125; beans, &#123;&#125; jars, and &#123;&#125; crates.&quot;</span>.<span class="hljs-built_in">format</span>(*formula))</code></pre><pre><code class="hljs pgsql">let<span class="hljs-string">&#x27;s practice everyting,</span><span class="hljs-string">you&#x27;</span>d need <span class="hljs-keyword">to</span> know <span class="hljs-string">&#x27;about escapes with \ that do:</span><span class="hljs-string"></span><span class="hljs-string"> newlines and    tabs.</span><span class="hljs-string">--------------------------------------------------</span><span class="hljs-string"></span><span class="hljs-string">        the lovely world</span><span class="hljs-string">with logic so firmly planted</span><span class="hljs-string">can&#x27;</span>t discern the needs <span class="hljs-keyword">of</span> lovenor comprehend passion <span class="hljs-keyword">from</span> intuition<span class="hljs-keyword">and</span> requires an explanation                <span class="hljs-keyword">where</span> there <span class="hljs-keyword">is</span> <span class="hljs-keyword">none</span>.<span class="hljs-comment">--------------------------------------------------</span>this should be five : <span class="hljs-number">5</span>wiht a starting <span class="hljs-type">point</span> <span class="hljs-keyword">of</span> : <span class="hljs-number">10000</span>w<span class="hljs-string">e&#x27;d have 5000000 beans, 5000.0 jars, and 50.0 crates.</span><span class="hljs-string">we can also do that this way:</span><span class="hljs-string">we&#x27;</span>d have <span class="hljs-number">500000.0</span> beans, <span class="hljs-number">500.0</span> jars, <span class="hljs-keyword">and</span> <span class="hljs-number">5.0</span> crates.</code></pre><h2 id="25-1-引入自定义函数-未知错误：找不到包！"><a href="#25-1-引入自定义函数-未知错误：找不到包！" class="headerlink" title="25.1 引入自定义函数 (未知错误：找不到包！)"></a>25.1 引入自定义函数 (未知错误：找不到包！)</h2><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">break_words</span>(<span class="hljs-params">stuff</span>):    <span class="hljs-string">&quot;&quot;&quot;this function will break up words for us.&quot;&quot;&quot;</span>    words = stuff.split(<span class="hljs-string">&#x27; &#x27;</span>)    <span class="hljs-keyword">return</span> words    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sort_words</span>(<span class="hljs-params">words</span>):    <span class="hljs-string">&quot;&quot;&quot;sorts the words.&quot;&quot;&quot;</span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(words)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_first_word</span>(<span class="hljs-params">words</span>):    <span class="hljs-string">&quot;&quot;&quot;prints the first word after popping it off .&quot;&quot;&quot;</span>    word = words.pop(<span class="hljs-number">0</span>)    <span class="hljs-built_in">print</span>(word)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_last_word</span>(<span class="hljs-params">words</span>):    <span class="hljs-string">&quot;&quot;&quot;prints the last word after popping it off.&quot;&quot;&quot;</span>    word = words.pop(-<span class="hljs-number">1</span>)    <span class="hljs-built_in">print</span>(word)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sort_sentence</span>(<span class="hljs-params">sentence</span>):    <span class="hljs-string">&quot;&quot;&quot;takes in a full sentence and returns the sorted words.&quot;&quot;&quot;</span>    words = break_words(sentence)    <span class="hljs-keyword">return</span> sort_words(words)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_first_and_last</span>(<span class="hljs-params">sentence</span>):    <span class="hljs-string">&quot;&quot;&quot;prints the first and last words of the sentence.&quot;&quot;&quot;</span>    print_first_word(words)    print_last_word(words)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_first_and_last_sorted</span>(<span class="hljs-params">sentence</span>):    <span class="hljs-string">&quot;&quot;&quot;sorts the words then prints the first and last one.&quot;&quot;&quot;</span>    words = sort_sentence(sentence)    print_first_word(words)    print_last_word(words)</code></pre><h2 id="26-1-初识逻辑或非并"><a href="#26-1-初识逻辑或非并" class="headerlink" title="26.1 初识逻辑或非并"></a>26.1 初识逻辑或非并</h2><h2 id="27-1-简单学习逻辑语句"><a href="#27-1-简单学习逻辑语句" class="headerlink" title="27.1 简单学习逻辑语句"></a>27.1 简单学习逻辑语句</h2><h2 id="28-1-逻辑语句的练习"><a href="#28-1-逻辑语句的练习" class="headerlink" title="28.1 逻辑语句的练习"></a>28.1 逻辑语句的练习</h2><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;#&#x27;</span> * <span class="hljs-number">75</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This script is to test true or false! &quot;</span>)<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter: 1 == 1 \n&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> == <span class="hljs-number">1</span>)<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter: 1 == 1 and &#x27;a&#x27; == &#x27;b&#x27; \n&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;a&#x27;</span> == <span class="hljs-string">&#x27;b&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;#&#x27;</span> * <span class="hljs-number">75</span>)</code></pre><pre><code class="hljs clean">###########################################################################This script is to test true or false!please enter: <span class="hljs-number">1</span> == <span class="hljs-number">1</span><span class="hljs-number">1</span> == <span class="hljs-number">1</span><span class="hljs-literal">True</span>please enter: <span class="hljs-number">1</span> == <span class="hljs-number">1</span> and <span class="hljs-string">&#x27;a&#x27;</span> == <span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-number">1</span> == <span class="hljs-number">1</span> and <span class="hljs-string">&#x27;a&#x27;</span> == <span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-literal">False</span>###########################################################################</code></pre><h3 id="28-2-逻辑语句的强化练习"><a href="#28-2-逻辑语句的强化练习" class="headerlink" title="28.2 逻辑语句的强化练习"></a>28.2 逻辑语句的强化练习</h3><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;some key words for logic can be listed as follows:</span><span class="hljs-string">and </span><span class="hljs-string">or </span><span class="hljs-string">not </span><span class="hljs-string">!= (not equal) </span><span class="hljs-string">== (equal) </span><span class="hljs-string">&gt;= (greater-than-equal) </span><span class="hljs-string">&lt;= (less-than-equal) </span><span class="hljs-string">True </span><span class="hljs-string">False&#x27;&#x27;&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 or 1 = &quot;</span> , <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;not 1 = &quot;</span> , <span class="hljs-keyword">not</span> <span class="hljs-number">1</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 != 100 = &quot;</span> , <span class="hljs-number">1</span> != <span class="hljs-number">100</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 &gt;= 1 = &quot;</span> , <span class="hljs-number">1</span> &gt;= <span class="hljs-number">1</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 == &#x27;a&#x27; = &quot;</span> , <span class="hljs-number">1</span> == <span class="hljs-string">&#x27;a&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1 and 1 = &quot;</span> , <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#x27;a&#x27; and &#x27;a&#x27; = &quot;</span> , <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;a&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>)</code></pre><pre><code class="hljs clean">###########################################################################some key words for logic can be listed <span class="hljs-keyword">as</span> follows:andornot!= (not equal)== (equal)&gt;= (greater-than-equal)&lt;= (less-than-equal)<span class="hljs-literal">True</span><span class="hljs-literal">False</span>###########################################################################<span class="hljs-number">1</span> or <span class="hljs-number">1</span> =  <span class="hljs-number">1</span>not <span class="hljs-number">1</span> =  <span class="hljs-literal">False</span><span class="hljs-number">1</span> != <span class="hljs-number">100</span> =  <span class="hljs-literal">True</span><span class="hljs-number">1</span> &gt;= <span class="hljs-number">1</span> =  <span class="hljs-literal">True</span><span class="hljs-number">1</span> == <span class="hljs-string">&#x27;a&#x27;</span> =  <span class="hljs-literal">False</span><span class="hljs-number">1</span> and <span class="hljs-number">1</span> =  <span class="hljs-number">1</span><span class="hljs-string">&#x27;a&#x27;</span> and <span class="hljs-string">&#x27;a&#x27;</span> =  a###########################################################################</code></pre><h2 id="29-1-if判断语句"><a href="#29-1-if判断语句" class="headerlink" title="29.1 if判断语句"></a>29.1 if判断语句</h2><pre><code class="hljs python">people = <span class="hljs-number">20</span>cats = <span class="hljs-number">30</span> dogs = <span class="hljs-number">15</span><span class="hljs-keyword">if</span> people &lt; cats:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;too many cats ! the world is doomed !&quot;</span>)     <span class="hljs-keyword">if</span> people &gt; cats:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;not many cats ! the world is saved !&quot;</span>)     <span class="hljs-keyword">if</span> people &lt; dogs:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The world is drooled on !&quot;</span>)     <span class="hljs-keyword">if</span> people &gt; dogs:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the world is dry !&quot;</span>)dogs += <span class="hljs-number">5</span><span class="hljs-keyword">if</span> people &gt;= dogs:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;people are greater than or equal to dogs. &quot;</span>)   <span class="hljs-keyword">if</span> people &lt;= dogs:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;people are less than or equal to dogs. &quot;</span>)     <span class="hljs-keyword">if</span> people == dogs:     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;people are dogs. &quot;</span>)</code></pre><pre><code class="hljs applescript">too many cats ! <span class="hljs-keyword">the</span> world <span class="hljs-keyword">is</span> doomed !<span class="hljs-keyword">the</span> world <span class="hljs-keyword">is</span> dry !people are <span class="hljs-keyword">greater than</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">equal</span> <span class="hljs-keyword">to</span> dogs.people are <span class="hljs-keyword">less than or equal</span> <span class="hljs-keyword">to</span> dogs.people are dogs.</code></pre><h3 id="29-2-if判断语句的强化练习"><a href="#29-2-if判断语句的强化练习" class="headerlink" title="29.2 if判断语句的强化练习"></a>29.2 if判断语句的强化练习</h3><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>)<span class="hljs-comment"># function : do math calculations</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">math</span>(<span class="hljs-params">a , b</span>):    add = <span class="hljs-string">&quot;+&quot;</span>    minus = <span class="hljs-string">&quot;-&quot;</span>    mutiply = <span class="hljs-string">&quot;*&quot;</span>    division = <span class="hljs-string">&quot;/&quot;</span>    separator = <span class="hljs-string">&quot;...&quot;</span> * <span class="hljs-number">10</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;calculation preparing now :<span class="hljs-subst">&#123;separator&#125;</span>&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> <span class="hljs-subst">&#123;add&#125;</span> <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>,a + b)    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> <span class="hljs-subst">&#123;minus&#125;</span> <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>,a - b)    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> <span class="hljs-subst">&#123;mutiply&#125;</span> <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>,a * b)    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> <span class="hljs-subst">&#123;division&#125;</span> <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>,a / b)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>)    <span class="hljs-comment"># function : do Boolean expressions</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">boolean1</span>(<span class="hljs-params">a, b</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;n1&#125;</span> and <span class="hljs-subst">&#123;n2&#125;</span> = &quot;</span>, n1 <span class="hljs-keyword">and</span> n2)    <span class="hljs-keyword">def</span> <span class="hljs-title function_">boolean2</span>(<span class="hljs-params">a, b</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;not( <span class="hljs-subst">&#123;n1&#125;</span> and <span class="hljs-subst">&#123;n2&#125;</span> ) = &quot;</span>, <span class="hljs-keyword">not</span>(n1 <span class="hljs-keyword">and</span> n2))    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>)n1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter one number: \n---&gt; &quot;</span>))n2 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter another number: \n---&gt; &quot;</span>))<span class="hljs-keyword">if</span> n1 &gt; n2:    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;n1&#125;</span> &gt; <span class="hljs-subst">&#123;n2&#125;</span>&quot;</span>)    math(n1, n2)    <span class="hljs-keyword">if</span> n1 &lt; n2:    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;n1&#125;</span> &lt; <span class="hljs-subst">&#123;n2&#125;</span>&quot;</span>)    boolean1(n1, n2)    boolean2(n1, n2)    <span class="hljs-keyword">if</span> n1 == n2:    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;n1&#125;</span> = <span class="hljs-subst">&#123;n2&#125;</span>&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>)</code></pre><pre><code class="hljs clean">###########################################################################please enter one number:---&gt; <span class="hljs-number">9</span>please enter another number:---&gt; <span class="hljs-number">6</span><span class="hljs-number">9</span> &gt; <span class="hljs-number">6</span>calculation preparing now :..............................<span class="hljs-number">9</span> + <span class="hljs-number">6</span> =  <span class="hljs-number">15</span><span class="hljs-number">9</span> - <span class="hljs-number">6</span> =  <span class="hljs-number">3</span><span class="hljs-number">9</span> * <span class="hljs-number">6</span> =  <span class="hljs-number">54</span><span class="hljs-number">9</span> / <span class="hljs-number">6</span> =  <span class="hljs-number">1.5</span>######################################################################################################################################################please enter one number:---&gt; <span class="hljs-number">6</span>please enter another number:---&gt; <span class="hljs-number">9</span><span class="hljs-number">6</span> &lt; <span class="hljs-number">9</span><span class="hljs-number">6</span> and <span class="hljs-number">9</span> =  <span class="hljs-number">9</span>not( <span class="hljs-number">6</span> and <span class="hljs-number">9</span> ) =  <span class="hljs-literal">False</span>######################################################################################################################################################please enter one number:---&gt; <span class="hljs-number">6</span>please enter another number:---&gt; <span class="hljs-number">6</span><span class="hljs-number">6</span> = <span class="hljs-number">6</span>###########################################################################</code></pre><h2 id="30-1-if-else语句"><a href="#30-1-if-else语句" class="headerlink" title="30.1 if-else语句"></a>30.1 if-else语句</h2><pre><code class="hljs python">people = <span class="hljs-number">30</span>cars = <span class="hljs-number">40</span>trucks = <span class="hljs-number">15</span><span class="hljs-keyword">if</span> cars &gt; people:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we should take the cars.&quot;</span>)<span class="hljs-keyword">elif</span> cars &lt; people:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we should not take the cars.&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we can&#x27;t decide.&quot;</span>)<span class="hljs-keyword">if</span> trucks &gt; cars:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;that&#x27;s too many trucks.&quot;</span>)<span class="hljs-keyword">elif</span> trucks &lt; cars:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;maybe we could take the trucks.&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we still can&#x27;t decide.&quot;</span>)    <span class="hljs-keyword">if</span> people &gt; trucks:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;alright, let&#x27;s just take the trucks.&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fine, let&#x27;s stay home then.&quot;</span>)</code></pre><pre><code class="hljs vbnet">we should <span class="hljs-keyword">take</span> the cars.maybe we could <span class="hljs-keyword">take</span> the trucks.alright, <span class="hljs-keyword">let</span><span class="hljs-comment">&#x27;s just take the trucks.</span></code></pre><h3 id="30-2-if-else强化练习一（判断数字的大小）"><a href="#30-2-if-else强化练习一（判断数字的大小）" class="headerlink" title="30.2 if-else强化练习一（判断数字的大小）"></a>30.2 if-else强化练习一（判断数字的大小）</h3><pre><code class="hljs python"><span class="hljs-comment"># test1.py</span>people = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;enter the first number ---&gt; &quot;</span>))cars = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;enter the second number ---&gt; &quot;</span>))trucks = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;enter the third number ---&gt; &quot;</span>))<span class="hljs-keyword">if</span> cars &gt; people:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we should take the cars.&quot;</span>)<span class="hljs-keyword">elif</span> cars &lt; people:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we should not take the cars.&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we can&#x27;t decide.&quot;</span>)<span class="hljs-keyword">if</span> trucks &gt; cars:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;that&#x27;s too many trucks.&quot;</span>)<span class="hljs-keyword">elif</span> trucks &lt; cars:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;maybe we could take the trucks.&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we still can&#x27;t decide.&quot;</span>)    <span class="hljs-keyword">if</span> people &gt; trucks:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;alright, let&#x27;s just take the trucks.&quot;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fine, let&#x27;s stay home then.&quot;</span>)</code></pre><pre><code class="hljs livecodeserver">enter <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> <span class="hljs-built_in">number</span> <span class="hljs-comment">---&gt; 10</span>enter <span class="hljs-keyword">the</span> <span class="hljs-keyword">second</span> <span class="hljs-built_in">number</span> <span class="hljs-comment">---&gt; 20</span>enter <span class="hljs-keyword">the</span> <span class="hljs-keyword">third</span> <span class="hljs-built_in">number</span> <span class="hljs-comment">---&gt; 10</span>we should take <span class="hljs-keyword">the</span> cars.maybe we could take <span class="hljs-keyword">the</span> trucks.fine, let<span class="hljs-string">&#x27;s stay home then.</span></code></pre><h3 id="30-3-if-else强化练习二（选择文件的处理方式并实现文件的读写删除）"><a href="#30-3-if-else强化练习二（选择文件的处理方式并实现文件的读写删除）" class="headerlink" title="30.3 if-else强化练习二（选择文件的处理方式并实现文件的读写删除）"></a>30.3 if-else强化练习二（选择文件的处理方式并实现文件的读写删除）</h3><pre><code class="hljs python"><span class="hljs-comment"># test2.py</span>choice = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;choose the mode: (read/write/delete) \n---&gt; &quot;</span>)<span class="hljs-keyword">if</span> choice == <span class="hljs-string">&#x27;read&#x27;</span>:        <span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv    script, filename = argv        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;This is the file: <span class="hljs-subst">&#123;filename&#125;</span> \n&quot;</span>)    tar = <span class="hljs-built_in">open</span>(filename, mode=<span class="hljs-string">&#x27;r&#x27;</span>)    content = tar.read()    <span class="hljs-built_in">print</span>(content)    tar.close()        <span class="hljs-comment"># AttributeError: &#x27;str&#x27; object has no attribute &#x27;close&#x27;</span>    <span class="hljs-comment"># Attention to the error from tar.read()</span>    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&#x27;write&#x27;</span>:    <span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv    script, filename = argv        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;This is the file: <span class="hljs-subst">&#123;filename&#125;</span>&quot;</span>)    tar = <span class="hljs-built_in">open</span>(filename, mode=<span class="hljs-string">&#x27;w&#x27;</span>)    add = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please write some additional words: \n ---&gt; &quot;</span>)    content1 = tar.write(add)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is the length of the string: &quot;</span>, content1)    tar.close()    <span class="hljs-comment"># what happened ?</span>    tar = <span class="hljs-built_in">open</span>(filename, mode=<span class="hljs-string">&#x27;r&#x27;</span>)    content2 = tar.read()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is the content of the string: &quot;</span>,content2)    tar.close()    <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&#x27;delete&#x27;</span>:    <span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv    script, filename = argv        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;This is the file: <span class="hljs-subst">&#123;filename&#125;</span>&quot;</span>)    tar = <span class="hljs-built_in">open</span>(filename, mode=<span class="hljs-string">&#x27;w&#x27;</span>)    out = tar.truncate()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is the length of the string: &quot;</span>, out)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Empity the content successfully! &quot;</span>)    tar.close()<span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;please check out the inputation ! &quot;</span>)</code></pre><blockquote><p>python test2.py txt</p></blockquote><pre><code class="hljs gradle">choose the mode: (<span class="hljs-keyword">read</span><span class="hljs-regexp">/write/</span><span class="hljs-keyword">delete</span>)---&gt; <span class="hljs-keyword">read</span><span class="hljs-keyword">This</span> is the <span class="hljs-keyword">file</span>: txtI love you</code></pre><pre><code class="hljs livecodeserver">choose <span class="hljs-keyword">the</span> mode: (<span class="hljs-built_in">read</span>/<span class="hljs-built_in">write</span>/<span class="hljs-built_in">delete</span>)<span class="hljs-comment">---&gt; write</span>This is <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span>: txtplease <span class="hljs-built_in">write</span> some additional <span class="hljs-keyword">words</span>: <span class="hljs-comment">---&gt; I love you , baby</span>This is <span class="hljs-keyword">the</span> <span class="hljs-built_in">length</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">string</span>:  <span class="hljs-number">17</span>This is <span class="hljs-keyword">the</span> content <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">string</span>:  I love you , baby</code></pre><pre><code class="hljs livecodeserver">choose <span class="hljs-keyword">the</span> mode: (<span class="hljs-built_in">read</span>/<span class="hljs-built_in">write</span>/<span class="hljs-built_in">delete</span>)<span class="hljs-comment">---&gt; delete</span>This is <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span>: txtThis is <span class="hljs-keyword">the</span> <span class="hljs-built_in">length</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">string</span>:  <span class="hljs-number">0</span>Empity <span class="hljs-keyword">the</span> content successfully!</code></pre><pre><code class="hljs smali">choose the mode: (read/write/delete)---&gt; noneplease<span class="hljs-built_in"> check </span>out the inputation !</code></pre>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-vasp 任务目录脚本</title>
      <link href="/2023/06/29/blog-9-shell-scripts/"/>
      <url>/2023/06/29/blog-9-shell-scripts/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vasp生成任务目录的脚本（taskin）"><a href="#vasp生成任务目录的脚本（taskin）" class="headerlink" title="vasp生成任务目录的脚本（taskin）"></a>vasp生成任务目录的脚本（taskin）</h1><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This script is used to make some new directories !&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;--------------------------------------------------</span><span class="hljs-string">1) scf</span><span class="hljs-string">2) dos</span><span class="hljs-string">3) band</span><span class="hljs-string">4) ELF</span><span class="hljs-string">5) bader</span><span class="hljs-string">6) phonon</span><span class="hljs-string">--------------------------------------------------&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Here you can choose the tasks as shown above ----&gt; &quot;</span><span class="hljs-built_in">read</span> task<span class="hljs-keyword">case</span> <span class="hljs-variable">$task</span> <span class="hljs-keyword">in</span>     1)       <span class="hljs-built_in">mkdir</span> scf       <span class="hljs-built_in">cp</span> INCAR KPOINTS CONTCAR POTCAR slurm.sh scf/.       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scf directory writing successfully !&quot;</span>     ;;     2)       <span class="hljs-built_in">mkdir</span> dos       <span class="hljs-built_in">cp</span> INCAR KPOINTS POSCAR POTCAR WAVECAR CHGCAR slurm.sh dos/.       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;dos directory writing successfully !&quot;</span>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Attention ! copy INCAR from band&quot;</span>     ;;     3)       <span class="hljs-built_in">mkdir</span> band       <span class="hljs-built_in">cp</span> INCAR POSCAR POTCAR WAVECAR CHGCAR slurm.sh band/.       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;band directory writing successfully !&quot;</span>     ;;     4)       <span class="hljs-built_in">mkdir</span> ELF       <span class="hljs-built_in">cp</span> INCAR POSCAR POTCAR WAVECAR slurm.sh ELF/.       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ELF directory writing successfully !&quot;</span>     ;;     5)       <span class="hljs-built_in">mkdir</span> bader       <span class="hljs-built_in">cp</span> POSCAR POTCAR slurm.sh bader/.       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;bader directory writing successfully !&quot;</span>     ;;     6)     <span class="hljs-built_in">mkdir</span> phonon       <span class="hljs-built_in">cp</span> CONTCAR POTCAR KPOINTS slurm.sh phonon/.       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;phonon directory writing successfully !&quot;</span>     ;;<span class="hljs-keyword">esac</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> vasp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 文件上传下载脚本</title>
      <link href="/2023/06/27/blog-8-shell-scripts/"/>
      <url>/2023/06/27/blog-8-shell-scripts/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="自定义超算上传下载文件的脚本"><a href="#自定义超算上传下载文件的脚本" class="headerlink" title="自定义超算上传下载文件的脚本"></a>自定义超算上传下载文件的脚本</h1><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/env bash</span><span class="hljs-comment"># The script is used to sent or receive files to the Super Calculation Client </span><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Choose to upload or download: (u/d)? &quot;</span> <span class="hljs-built_in">read</span> choicea=u <span class="hljs-comment"># a=upload</span>b=d <span class="hljs-comment"># d=download</span><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> == <span class="hljs-variable">$choice</span> ]<span class="hljs-keyword">then</span>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Enter the name of file you&#x27;re going to upload: &quot;</span>    <span class="hljs-built_in">read</span> file_upload    rayfile-c -a hpccube.com -P 00000 -u hostname -w b1ed11352f8574a48e-d28f-4239-8fb0-8e8d613e8620 -o upload -d / -s ./<span class="hljs-variable">$file_upload</span><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$b</span> == <span class="hljs-variable">$choice</span> ]<span class="hljs-keyword">then</span>     <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Enter the name of file you&#x27;re going to download: &quot;</span>    <span class="hljs-built_in">read</span> file_download    rayfile-c -a hpccube.com -P 00000 -u hostname -w 9380ec0f4b39b5e655-0d2e-477e-838c-c86a40ba3a10 -o download -d ./ -s /<span class="hljs-variable">$file_download</span><span class="hljs-keyword">fi</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell+python 作图脚本</title>
      <link href="/2023/06/25/blog-7-shell-python-scripts/"/>
      <url>/2023/06/25/blog-7-shell-python-scripts/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-使用python作图的脚本-一"><a href="#1-使用python作图的脚本-一" class="headerlink" title="1.使用python作图的脚本(一)"></a>1.使用python作图的脚本(一)</h1><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3 python3</span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npx,y = np.loadtxt(<span class="hljs-string">&#x27;input.dat&#x27;</span>, delimiter = <span class="hljs-string">&#x27;,&#x27;</span>, usecols=(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), unpack=<span class="hljs-literal">True</span>)plt.xlabel(<span class="hljs-string">&#x27;x / units&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y / units&#x27;</span>)plt.plot(x,y, <span class="hljs-string">&#x27;rs-&#x27;</span>, linewidth=<span class="hljs-number">2.0</span>)plt.show()</code></pre><h1 id="2-使用python作图的脚本-二"><a href="#2-使用python作图的脚本-二" class="headerlink" title="2.使用python作图的脚本(二)"></a>2.使用python作图的脚本(二)</h1><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3 python3</span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npx,y,z = np.loadtxt(<span class="hljs-string">&#x27;input.dat&#x27;</span>, delimiter = <span class="hljs-string">&#x27;,&#x27;</span>, usecols=(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), unpack=<span class="hljs-literal">True</span>)plt.xlabel(<span class="hljs-string">&#x27;x / s&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y / s&#x27;</span>)plt.plot(x,y, <span class="hljs-string">&#x27;rs-&#x27;</span>, linewidth=<span class="hljs-number">2.0</span>)plt.plot(x,z*<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;bs-&#x27;</span>, linewidth=<span class="hljs-number">2.0</span>)plt.show()``` <span class="hljs-comment"># 3.二维两列数据作图的脚本(一)</span>```bash<span class="hljs-comment">#!/usr/bin/env bash</span>echo <span class="hljs-string">&quot;This script is used to plot 2D diagram&quot;</span>function_input()&#123;echo -n <span class="hljs-string">&quot;Please name the plot script: (.py)&quot;</span>read nameecho -n <span class="hljs-string">&quot;Please enter the plot data file: &quot;</span>read dataecho -n <span class="hljs-string">&quot;Please name the xlabel(&#x27; / &#x27;): &quot;</span>read xlabelecho -n <span class="hljs-string">&quot;Please name the ylabel(&#x27; / &#x27;): &quot;</span>read ylabel&#125;function_input $name $data $xlabel $ylabelcat &gt; $name &lt;&lt;!<span class="hljs-comment">#!/usr/bin/env python3</span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npx,y = np.loadtxt(<span class="hljs-string">&#x27;$data&#x27;</span>, delimiter = <span class="hljs-string">&#x27; &#x27;</span>, usecols=(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), unpack=<span class="hljs-literal">True</span>)plt.xlabel(<span class="hljs-string">&#x27;$xlabel&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;$ylabel&#x27;</span>)plt.plot(x,y, <span class="hljs-string">&#x27;rs-&#x27;</span>, linewidth=<span class="hljs-number">2.0</span>)plt.show() !python3 $name</code></pre><h1 id="4-二维三列数据作图的脚本-二"><a href="#4-二维三列数据作图的脚本-二" class="headerlink" title="4.二维三列数据作图的脚本(二)"></a>4.二维三列数据作图的脚本(二)</h1><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This script is used to plot 3D diagram&quot;</span><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Please name the plot script(.py): &quot;</span><span class="hljs-built_in">read</span> name<span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Please enter the plot data file: &quot;</span><span class="hljs-built_in">read</span> data<span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Please name the xlabel(&#x27; / &#x27;): &quot;</span><span class="hljs-built_in">read</span> xlabel<span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Please name the ylabel(&#x27; / &#x27;): &quot;</span><span class="hljs-built_in">read</span> ylabel<span class="hljs-built_in">cat</span> &gt; <span class="hljs-variable">$name</span> &lt;&lt;!<span class="hljs-comment">#!/usr/bin/env python3</span>import matplotlib.pyplot as pltimport numpy as npx,y,z = np.loadtxt(<span class="hljs-string">&#x27;$data&#x27;</span>, delimiter = <span class="hljs-string">&#x27; &#x27;</span>, usecols=(0, 1, 2), unpack=True)plt.xlabel(<span class="hljs-string">&#x27;$xlabel&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;$ylabel&#x27;</span>)plt.plot(x,y, <span class="hljs-string">&#x27;rs-&#x27;</span>, linewidth=2.0)plt.plot(x,z*4, <span class="hljs-string">&#x27;bs-&#x27;</span>, linewidth=2.0)plt.show() !python3 <span class="hljs-variable">$name</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 学习记录(11-20)</title>
      <link href="/2023/06/20/blog-6-python/"/>
      <url>/2023/06/20/blog-6-python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python-学习记录"><a href="#python-学习记录" class="headerlink" title="python 学习记录"></a>python 学习记录</h1><h2 id="11-1-input-函数"><a href="#11-1-input-函数" class="headerlink" title="11.1 input()函数"></a>11.1 input()函数</h2><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;how old are you ?&quot;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)age = <span class="hljs-built_in">input</span>()<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;how tall are you ?&quot;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)height = <span class="hljs-built_in">input</span>()<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;how much do you weight ?&quot;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)weight = <span class="hljs-built_in">input</span>()<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ok , you&#x27;re <span class="hljs-subst">&#123;age&#125;</span> years old, <span class="hljs-subst">&#123;height&#125;</span> cm tall and <span class="hljs-subst">&#123;weight&#125;</span> kg heavy.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># my own test one</span>add = <span class="hljs-string">&quot;+&quot;</span>minus = <span class="hljs-string">&quot;-&quot;</span>mutiply = <span class="hljs-string">&quot;*&quot;</span>division = <span class="hljs-string">&quot;/&quot;</span>addwithadd = add * <span class="hljs-number">75</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;&quot;&quot;calculation preparing now ......</span><span class="hljs-string"><span class="hljs-subst">&#123;addwithadd&#125;</span>&quot;&quot;&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here you input the first number : &quot;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here you input the second number : &quot;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> <span class="hljs-subst">&#123;add&#125;</span> <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>,a + b)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> <span class="hljs-subst">&#123;minus&#125;</span> <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>,a - b)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> <span class="hljs-subst">&#123;mutiply&#125;</span> <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>,a * b)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> <span class="hljs-subst">&#123;division&#125;</span> <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>,a / b)</code></pre><pre><code class="hljs coffeescript"><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">###</span><span class="hljs-comment">how old are you ? 23</span><span class="hljs-comment">how tall are you ? 165</span><span class="hljs-comment">how much do you weight ? 96</span><span class="hljs-comment">ok , you&#x27;re 23 years old, 165 cm tall and 96 kg heavy.</span><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span>calculation preparing now ......+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++here you input the first number :  <span class="hljs-number">23</span>here you input the second number :  <span class="hljs-number">65</span><span class="hljs-number">23</span> + <span class="hljs-number">65</span> =  <span class="hljs-number">88</span><span class="hljs-number">23</span> - <span class="hljs-number">65</span> =  <span class="hljs-number">-42</span><span class="hljs-number">23</span> * <span class="hljs-number">65</span> =  <span class="hljs-number">1495</span><span class="hljs-number">23</span> / <span class="hljs-number">65</span> =  <span class="hljs-number">0.35384615384615387</span></code></pre><h2 id="12-1-input-函数与提示"><a href="#12-1-input-函数与提示" class="headerlink" title="12.1 input()函数与提示"></a>12.1 input()函数与提示</h2><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span>age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;How old are you? &quot;</span>)height = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;How tall are you? &quot;</span>)weight = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;How much do you weight? &quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Yeah , you&#x27;re <span class="hljs-subst">&#123;age&#125;</span> years old, <span class="hljs-subst">&#123;height&#125;</span> cm tall and <span class="hljs-subst">&#123;weight&#125;</span> kg heavy.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># my own test one</span>question = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;only number can be input? &quot;</span>)unknown = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;still need time to study...&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;the answer maybe I get : <span class="hljs-subst">&#123;question&#125;</span> , <span class="hljs-subst">&#123;unknown&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;actully, input-function can input not only about numbers but also some strings that you put in !&quot;</span>)</code></pre><pre><code class="hljs coffeescript"><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">###</span><span class="hljs-comment">How old are you? 23</span><span class="hljs-comment">How tall are you? 165</span><span class="hljs-comment">How much do you weight? 46</span><span class="hljs-comment">Yeah , you&#x27;re 23 years old, 165 cm tall and 46 kg heavy.</span><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span>only number can be input? <span class="hljs-number">66</span>still need time to study...the answer maybe I get : <span class="hljs-number">66</span> ,actully, input-function can input <span class="hljs-keyword">not</span> only about numbers but also some strings that you put <span class="hljs-keyword">in</span> !</code></pre><h2 id="13-1-引入三个参数并打印"><a href="#13-1-引入三个参数并打印" class="headerlink" title="13.1 引入三个参数并打印"></a>13.1 引入三个参数并打印</h2><blockquote><p>python3  ex13.1.py  0 1 2</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<span class="hljs-comment"># read the WYSS section for how to run this </span>script, first, second, third = argv<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the script is called:&quot;</span>, script)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;your first variable is:&quot;</span>, first)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;your second variable is:&quot;</span>, second)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;your third variable is:&quot;</span>, third)</code></pre><pre><code class="hljs applescript"><span class="hljs-keyword">the</span> <span class="hljs-keyword">script</span> <span class="hljs-keyword">is</span> called: ex13<span class="hljs-number">.1</span>.pyyour <span class="hljs-keyword">first</span> variable <span class="hljs-keyword">is</span>: <span class="hljs-number">0</span>your <span class="hljs-keyword">second</span> variable <span class="hljs-keyword">is</span>: <span class="hljs-number">1</span>your <span class="hljs-keyword">third</span> variable <span class="hljs-keyword">is</span>: <span class="hljs-number">2</span></code></pre><h3 id="13-2-引入两个参数并打印"><a href="#13-2-引入两个参数并打印" class="headerlink" title="13.2 引入两个参数并打印"></a>13.2 引入两个参数并打印</h3><blockquote><p>python3  ex13.1.py  left right</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<span class="hljs-comment"># read the wyss section for how to run this</span>script, a, b = argv<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;the script is called:&quot;</span>, script)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;your first variable is:&quot;</span>, a)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;your second variable is:&quot;</span>, b)<span class="hljs-comment">#    script, a, b = argv</span><span class="hljs-comment">#    ValueError: too many values to unpack (expected 3)</span><span class="hljs-comment">#    error from the first name: &lt;script&gt; ,it&#x27;s not an argument ! ! !</span></code></pre><pre><code class="hljs vim">the script <span class="hljs-keyword">is</span> called: ex13.<span class="hljs-number">2</span>.<span class="hljs-keyword">py</span>your <span class="hljs-keyword">first</span> variable <span class="hljs-keyword">is</span>: <span class="hljs-keyword">left</span>your second variable <span class="hljs-keyword">is</span>: <span class="hljs-keyword">right</span></code></pre><h3 id="13-3-输入四个参数并打印"><a href="#13-3-输入四个参数并打印" class="headerlink" title="13.3 输入四个参数并打印"></a>13.3 输入四个参数并打印</h3><blockquote><p>python3  ex13.3.py  i m n o</p></blockquote><pre><code class="hljs python"><span class="hljs-comment"># from sys import it (wrong !)</span><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, a, b, c, d = argv<span class="hljs-built_in">print</span>(script)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a = &quot;</span>,a)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b = &quot;</span>,b)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c = &quot;</span>,c)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d = &quot;</span>,d)<span class="hljs-comment"># ImportError: cannot import name &#x27;it&#x27; from &#x27;sys&#x27; (unknown location)</span><span class="hljs-comment"># error from the name of &lt;it&gt;, this argument must be &lt;argv&gt;, defined by system ! ! !</span></code></pre><pre><code class="hljs abnf">ex13.<span class="hljs-number">3</span>.py<span class="hljs-attribute">a</span> <span class="hljs-operator">=</span>  i<span class="hljs-attribute">b</span> <span class="hljs-operator">=</span>  m<span class="hljs-attribute">c</span> <span class="hljs-operator">=</span>  n<span class="hljs-attribute">d</span> <span class="hljs-operator">=</span>  o</code></pre><h3 id="13-4-输入两个参数并做四则运算"><a href="#13-4-输入两个参数并做四则运算" class="headerlink" title="13.4 输入两个参数并做四则运算"></a>13.4 输入两个参数并做四则运算</h3><blockquote><p>python3  ex13.4.py  20  40</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, a, b = argv<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;this script is: <span class="hljs-subst">&#123;script&#125;</span>, It&#x27;s used to do some calculations !&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a + b =&quot;</span>, <span class="hljs-built_in">int</span>(a) + <span class="hljs-built_in">int</span>(b))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a - b =&quot;</span>, <span class="hljs-built_in">int</span>(a) - <span class="hljs-built_in">int</span>(b))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a * b =&quot;</span>, <span class="hljs-built_in">int</span>(a) * <span class="hljs-built_in">int</span>(b))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a / b =&quot;</span>, <span class="hljs-built_in">int</span>(a) / <span class="hljs-built_in">int</span>(b))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span>c = <span class="hljs-built_in">input</span>()<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a * b / c&quot;</span>,<span class="hljs-built_in">int</span>(a) * <span class="hljs-built_in">int</span>(b) / <span class="hljs-built_in">int</span>(c))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># TypeError: unsupported operand type(s) for -: &#x27;str&#x27; and &#x27;str&#x27;</span><span class="hljs-comment"># how to solve ---&gt;  let &quot;a&quot; convert int : int(a)</span><span class="hljs-comment"># SyntaxError: unterminated string literal (detected at line 8)</span><span class="hljs-comment"># how to solve : add &lt;&quot;&gt; in the end </span></code></pre><pre><code class="hljs clean">###########################################################################a + b = <span class="hljs-number">60</span>a - b = <span class="hljs-number">-20</span>a * b = <span class="hljs-number">800</span>a / b = <span class="hljs-number">0.5</span>###########################################################################<span class="hljs-number">20</span>a * b / c <span class="hljs-number">40.0</span>###########################################################################</code></pre><h2 id="14-1-询问个人信息并打印"><a href="#14-1-询问个人信息并打印" class="headerlink" title="14.1 询问个人信息并打印"></a>14.1 询问个人信息并打印</h2><blockquote><p>python3  ex14.1.py  leigeigei</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, user_name = argvprompt = <span class="hljs-string">&#x27;&gt; &#x27;</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hello <span class="hljs-subst">&#123;user_name&#125;</span>, I&#x27;m the <span class="hljs-subst">&#123;script&#125;</span> script.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I&#x27;d like to ask you a few questions.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Do you like me, <span class="hljs-subst">&#123;user_name&#125;</span>?&quot;</span>)likes = <span class="hljs-built_in">input</span>(prompt)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Where do you live, <span class="hljs-subst">&#123;user_name&#125;</span>?&quot;</span>)lives = <span class="hljs-built_in">input</span>(prompt)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;What kind of computer do you have?&quot;</span>)computer = <span class="hljs-built_in">input</span>(prompt)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;&quot;&quot;</span><span class="hljs-string">Alright, so you said <span class="hljs-subst">&#123;likes&#125;</span> about liking me.</span><span class="hljs-string">You live in <span class="hljs-subst">&#123;lives&#125;</span>. Not sure where that is.</span><span class="hljs-string">And you have a <span class="hljs-subst">&#123;computer&#125;</span> computer. Nice.</span><span class="hljs-string">&quot;&quot;&quot;</span>)</code></pre><pre><code class="hljs vbnet">hello leigeigei, I<span class="hljs-comment">&#x27;m the ex14.1.py script.</span>I<span class="hljs-comment">&#x27;d like to ask you a few questions.</span><span class="hljs-keyword">Do</span> you <span class="hljs-built_in">like</span> <span class="hljs-keyword">me</span>, leigeigei?&gt; yes<span class="hljs-keyword">Where</span> <span class="hljs-keyword">do</span> you live, leigeigei?&gt; cqWhat kind <span class="hljs-keyword">of</span> computer <span class="hljs-keyword">do</span> you have?&gt; legionAlright, so you said yes about liking <span class="hljs-keyword">me</span>.You live <span class="hljs-keyword">in</span> cq. <span class="hljs-built_in">Not</span> sure <span class="hljs-keyword">where</span> that <span class="hljs-built_in">is</span>.<span class="hljs-built_in">And</span> you have a legion computer. Nice.</code></pre><h3 id="14-2-询问密码账号并返回"><a href="#14-2-询问密码账号并返回" class="headerlink" title="14.2 询问密码账号并返回"></a>14.2 询问密码账号并返回</h3><blockquote><p>python3  ex14.2.py  leigeigei</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, user_name = argvprompt = <span class="hljs-string">&quot;--&gt; &quot;</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;THIS IS THE LOG IN SYSTEM &amp; VERSION14.2: <span class="hljs-subst">&#123;script&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">50</span>) <span class="hljs-comment">#####</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;please enter your user_name: <span class="hljs-subst">&#123;user_name&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;please enter your QQnumber: <span class="hljs-subst">&#123;user_name&#125;</span>&quot;</span>)QQnumber = <span class="hljs-built_in">input</span>(prompt)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;please enter your QQkey: <span class="hljs-subst">&#123;user_name&#125;</span>&quot;</span>)QQkey = <span class="hljs-built_in">input</span>(prompt)x = <span class="hljs-string">&quot;*&quot;</span> * <span class="hljs-number">6</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;&quot;&quot;WARNING: Make sure what you input is really true,</span><span class="hljs-string">or you can&#x27;t log in the system !&quot;&quot;&quot;</span>)user name: &#123;user_name&#125;user QQnumber: &#123;QQnumber&#125;user QQkey: &#123;x&#125;<span class="hljs-string">&quot;&quot;&quot;)</span><span class="hljs-string">print(&quot;#&quot; * 50) #####</span><span class="hljs-string">print(&quot;log in successfully !&quot;)</span></code></pre><pre><code class="hljs coffeescript">THIS IS THE LOG IN SYSTEM &amp; VERSION14<span class="hljs-number">.2</span>: ex14<span class="hljs-number">.2</span>.py<span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span>please enter your user_name: leigeigeiplease enter your QQnumber: leigeigei--&gt; <span class="hljs-number">2734972186</span>please enter your QQkey: leigeigei--&gt; i don<span class="hljs-string">&#x27;t want show my key to you</span><span class="hljs-string">WARNING: Make sure what you input is really true,</span><span class="hljs-string">or you can&#x27;</span>t log <span class="hljs-keyword">in</span> the system !user name: leigeigeiuser QQnumber: <span class="hljs-number">2734972186</span>user QQkey: ******<span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span>log <span class="hljs-keyword">in</span> successfully !</code></pre><h2 id="15-1-读取文件"><a href="#15-1-读取文件" class="headerlink" title="15.1 读取文件"></a>15.1 读取文件</h2><blockquote><p>python3  ex15.1.py  ex15.txt</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, filename = argv<span class="hljs-comment"># open the file</span>txt = <span class="hljs-built_in">open</span>(filename)<span class="hljs-comment"># print the filename</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;here is the text file <span class="hljs-subst">&#123;filename&#125;</span>:&quot;</span>)<span class="hljs-comment"># read the file</span><span class="hljs-built_in">print</span>(txt.read())<span class="hljs-comment"># do once again</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;type the filename again:&quot;</span>)file_again = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)txt_again = <span class="hljs-built_in">open</span>(file_again)<span class="hljs-built_in">print</span>(txt_again.read())</code></pre><pre><code class="hljs erlang-repl">here is the text file ex15.txt:this is a text for testing !!!!!!    !!!       !!!       !!!!!!    !!!       !!!       !!!       !!!!!!    !type the filename again:&gt; ex15.txtthis is a text for testing !!!!!!    !!!       !!!       !!!!!!    !!!       !!!       !!!       !!!!!!    !</code></pre><h3 id="15-2-读取文件的测试"><a href="#15-2-读取文件的测试" class="headerlink" title="15.2 读取文件的测试"></a>15.2 读取文件的测试</h3><blockquote><p>python3  ex15.2.py  ex15.txt</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, filename = argv<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;THIS IS ONE NEW VERSION OF THE SCRIPT: &#123;filename&#125;&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please enter the filename:&quot;</span>)files = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;____&quot;</span>)files = <span class="hljs-built_in">open</span>(files)<span class="hljs-built_in">print</span>(files.read())</code></pre><pre><code class="hljs erlang-repl">THIS IS ONE NEW VERSION OF THE SCRIPT: &#123;filename&#125;Please enter the filename:____ex15.txtthis is a text for testing !!!!!!    !!!       !!!       !!!!!!    !!!       !!!       !!!       !!!!!!    !</code></pre><blockquote><p>ex15.txt</p></blockquote><pre><code class="hljs erlang-repl">this is a text for testing !!!!!!    !!!       !!!       !!!!!!    !!!       !!!       !  !!       !!!!!!    !</code></pre><h2 id="16-1-删除文件内容后写入三行数据"><a href="#16-1-删除文件内容后写入三行数据" class="headerlink" title="16.1 删除文件内容后写入三行数据"></a>16.1 删除文件内容后写入三行数据</h2><blockquote><p> python3  ex16.1.py  ex16.txt</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, filename = argv <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;we&#x27;re going to erase <span class="hljs-subst">&#123;filename&#125;</span>.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;if you don&#x27;t want that, hit CTRL-C) (^C).&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;if you do want that, hit RETURN.&quot;</span>)<span class="hljs-comment"># input to make one useless choice ,whatever you type in the program will still execuite it&#x27;s command ,hhh</span><span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;?&quot;</span>)<span class="hljs-comment"># open file to the variable &#x27;target&#x27; and be ready to exec &#x27;write&#x27;</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;opening the file...&quot;</span>)target = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>)<span class="hljs-comment"># delete the all content of the file that opened</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;truncating the file. goodbye!&quot;</span>)target.truncate()<span class="hljs-comment"># ask you to prepare for writing three lines </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;now I&#x27;m going to ask you for three lines.&quot;</span>)line1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;line 1: &quot;</span>)line2 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;line 2: &quot;</span>)line3 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;line 3: &quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I&#x27;m going to write these to the file.&quot;</span>)<span class="hljs-comment"># execute the operation : &quot;write&quot;</span>target.write(line1)target.write(<span class="hljs-string">&quot;\n&quot;</span>)target.write(line2)target.write(<span class="hljs-string">&quot;\n&quot;</span>)target.write(line3)target.write(<span class="hljs-string">&quot;\n&quot;</span>)<span class="hljs-comment"># close the file that you wrote in </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;and finally, we close it.&quot;</span>)target.close()<span class="hljs-comment"># target = open(filename, &#x27;W&#x27;) ValueError: invalid mode: &#x27;W&#x27;</span><span class="hljs-comment"># Attention to the word you type in ! </span><span class="hljs-comment"># error from the writing W &amp;&amp; w ! </span><span class="hljs-comment"># target.wrtie(&quot;\n&quot;)</span><span class="hljs-comment"># AttributeError: &#x27;_io.TextIOWrapper&#x27; object has no attribute &#x27;wrtie&#x27;. Did you mean: &#x27;write&#x27;?</span><span class="hljs-comment"># error from the word I typed in &quot;wrtie&quot;, I should revise it to &quot;write&quot; !</span></code></pre><pre><code class="hljs vhdl">we<span class="hljs-symbol">&#x27;re</span> going <span class="hljs-keyword">to</span> erase ex16.txt.<span class="hljs-keyword">if</span> you don<span class="hljs-symbol">&#x27;t</span> want that, hit CTRL-C (^C).<span class="hljs-keyword">if</span> you do want that, hit <span class="hljs-keyword">RETURN</span>.?<span class="hljs-keyword">RETURN</span>opening the <span class="hljs-keyword">file</span>...truncating the <span class="hljs-keyword">file</span>. goodbye!now I<span class="hljs-symbol">&#x27;m</span> going <span class="hljs-keyword">to</span> ask you <span class="hljs-keyword">for</span> three lines.<span class="hljs-literal">line</span> <span class="hljs-number">1</span>: this <span class="hljs-keyword">is</span> ok<span class="hljs-literal">line</span> <span class="hljs-number">2</span>: I am fine<span class="hljs-literal">line</span> <span class="hljs-number">3</span>: I love youI<span class="hljs-symbol">&#x27;m</span> going <span class="hljs-keyword">to</span> write these <span class="hljs-keyword">to</span> the <span class="hljs-keyword">file</span>.<span class="hljs-keyword">and</span> finally, we close it.</code></pre><blockquote><p>ex16.txt:</p></blockquote><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> okI am fineI love you</code></pre><h3 id="16-2-文件写入和关闭测试"><a href="#16-2-文件写入和关闭测试" class="headerlink" title="16.2 文件写入和关闭测试"></a>16.2 文件写入和关闭测试</h3><blockquote><p> python3  ex16.2.py  ex16.txt</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, filename = argv<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Are you ready to add some words to <span class="hljs-subst">&#123;filename&#125;</span> ?&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;please type &lt;ok&gt;&quot;</span>)<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Take few time for you to think what to write...... &quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Opening the file ......&quot;</span>)tar = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Here you can write: &quot;</span>)ok = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;---&gt;&quot;</span>)tar.write(ok)tar.write(<span class="hljs-string">&quot;\n&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Writing successfully !&quot;</span>)tar.close()<span class="hljs-comment"># the process can be summaried as follows :</span><span class="hljs-comment"># 1. open &lt;filename&gt; with &#x27;w&#x27; mode, and assign to &lt;tar&gt; </span><span class="hljs-comment"># 2. let &lt;ok&gt; get strings from outside</span><span class="hljs-comment"># 3. tar.write(ok): &lt;tar&gt; commands &#x27;write&#x27; to execute writing from &lt;ok&gt;</span><span class="hljs-comment"># 4. tar.close(): means to close the file that finished the writing process</span></code></pre><pre><code class="hljs livecodeserver">Are you ready <span class="hljs-built_in">to</span> <span class="hljs-built_in">add</span> some <span class="hljs-keyword">words</span> <span class="hljs-built_in">to</span> ex16.txt ?please type &lt;ok&gt;Take few <span class="hljs-built_in">time</span> <span class="hljs-keyword">for</span> you <span class="hljs-built_in">to</span> think what <span class="hljs-built_in">to</span> <span class="hljs-built_in">write</span>......Opening <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> ......Here you can <span class="hljs-built_in">write</span>:<span class="hljs-comment">---&gt; I wanna go</span>Writing successfully !</code></pre><blockquote><p> ex16.txt:</p></blockquote><pre><code class="hljs css"><span class="hljs-selector-tag">I</span> wanna go</code></pre><h3 id="16-3-读取文件的测试"><a href="#16-3-读取文件的测试" class="headerlink" title="16.3 读取文件的测试"></a>16.3 读取文件的测试</h3><blockquote><p> python3  ex16.3.py  ex16.txt</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, filename = argv<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;This is the file: <span class="hljs-subst">&#123;filename&#125;</span>&quot;</span>)x = <span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;sure to read this file? <span class="hljs-subst">&#123;x&#125;</span>&quot;</span>)tar = <span class="hljs-built_in">open</span>(filename, mode=<span class="hljs-string">&#x27;r&#x27;</span>)tar.seek(<span class="hljs-number">0</span>)y = tar.read()<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Well, let&#x27;s look at what the file include: <span class="hljs-subst">&#123;x&#125;</span><span class="hljs-subst">&#123;y&#125;</span>&quot;</span>)tar.close()</code></pre><pre><code class="hljs applescript">This <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span>: ex16.txtsure <span class="hljs-keyword">to</span> <span class="hljs-built_in">read</span> this <span class="hljs-built_in">file</span>?okWell, let&#x27;s look <span class="hljs-keyword">at</span> what <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> include:I wanna go</code></pre><h3 id="16-4-有关write-close-read-seek-0-readline-truncate的测试"><a href="#16-4-有关write-close-read-seek-0-readline-truncate的测试" class="headerlink" title="16.4 有关write ,close, read, seek(0), readline, truncate的测试"></a>16.4 有关write ,close, read, seek(0), readline, truncate的测试</h3><blockquote><p> python3  ex16.4.py  ex16.txt</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, filename = argv<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">50</span>) <span class="hljs-comment">#####</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;This is the file: <span class="hljs-subst">&#123;filename&#125;</span>&quot;</span>)shift = <span class="hljs-string">&#x27;\n&#x27;</span>cursor = <span class="hljs-string">&#x27;--&gt; &#x27;</span><span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Be sure to write some in the file? <span class="hljs-subst">&#123;shift&#125;</span><span class="hljs-subst">&#123;cursor&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;opening the file.....&quot;</span>)tar = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>)tar.write(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Here you can write down what you want <span class="hljs-subst">&#123;shift&#125;</span><span class="hljs-subst">&#123;cursor&#125;</span>&quot;</span>))tar.close()<span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, filename = argvtar = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>)tar.seek(<span class="hljs-number">0</span>)out = tar.read()<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;what did you write, let&#x27;s have a look, hhh&quot;</span>)<span class="hljs-built_in">print</span>(out)<span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, filename = argvtar = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r+&#x27;</span>)outline = tar.readline()<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;what did you write , let&#x27;s have a look, hhh&quot;</span>)<span class="hljs-built_in">print</span>(outline)<span class="hljs-comment"># empties the file ! ! !</span>tar.truncate()tar.close<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;THIS PROGRAM IS RUNNING SUCCESSFULLY&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">50</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># error : tar.truncate() io.UnsupportedOperation: truncate</span><span class="hljs-comment"># how to solve : change &#x27;r&#x27; ---&gt; &#x27;r+&#x27;</span><span class="hljs-comment"># r : only read //if there is no file ,it will send error information</span><span class="hljs-comment"># r+: read and write //if there is no file ,it will send error information</span><span class="hljs-comment"># w : only write //this mode will delete the content before! //if there is no file ,it will create one </span><span class="hljs-comment"># w+: write and read //this mode will delete the content before! //if there is no file ,it will create one</span><span class="hljs-comment"># a : only write //this mode can write additional content!//if there is no file ,it will create one </span><span class="hljs-comment"># a+: write and read //this mode can write additional content!//if there is no file ,it will create one</span></code></pre><pre><code class="hljs coffeescript"><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span>This <span class="hljs-keyword">is</span> the file: ex16.txtBe sure to write some <span class="hljs-keyword">in</span> the file?--&gt; <span class="hljs-literal">yes</span>opening the file.....Here you can write down what you want--&gt; I like herwhat did you write, let<span class="hljs-string">&#x27;s have a look, hhh</span><span class="hljs-string">I like her</span><span class="hljs-string">what did you write , let&#x27;</span>s have a look, hhhI like herTHIS PROGRAM IS RUNNING SUCCESSFULLY<span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span></code></pre><blockquote><p>ex16.txt</p></blockquote><pre><code class="hljs css"><span class="hljs-selector-tag">I</span> love you</code></pre><h2 id="17-1-复制文件"><a href="#17-1-复制文件" class="headerlink" title="17.1 复制文件"></a>17.1 复制文件</h2><blockquote><p>python3  ex17.1.py  testin  testout</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> existsscript, from_file, to_file = argv<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;copying from <span class="hljs-subst">&#123;from_file&#125;</span> to <span class="hljs-subst">&#123;to_file&#125;</span>&quot;</span>)<span class="hljs-comment"># we could do these two on one line, how?</span>in_file = <span class="hljs-built_in">open</span>(from_file)indata = in_file.read()<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;the input file is <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(indata)&#125;</span> bytes long&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;does the output file exist? <span class="hljs-subst">&#123;exists(to_file)&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ready, hit RETURN to continue, CTRL-C to abort.&quot;</span>)<span class="hljs-built_in">input</span>()out_file = <span class="hljs-built_in">open</span>(to_file, <span class="hljs-string">&#x27;w&#x27;</span>)out_file.write(indata)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;alright, all done.&quot;</span>)out_file.close()in_file.close()</code></pre><pre><code class="hljs livecodeserver">copying <span class="hljs-built_in">from</span> testin <span class="hljs-built_in">to</span> testout<span class="hljs-keyword">the</span> input <span class="hljs-built_in">file</span> is <span class="hljs-number">17</span> <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">long</span>does <span class="hljs-keyword">the</span> output <span class="hljs-built_in">file</span> exist? Trueready, hit <span class="hljs-literal">RETURN</span> <span class="hljs-built_in">to</span> continue, CTRL-C <span class="hljs-built_in">to</span> abort.<span class="hljs-literal">RETURN</span>alright, all done.</code></pre><h3 id="17-2-复制文件"><a href="#17-2-复制文件" class="headerlink" title="17.2 复制文件"></a>17.2 复制文件</h3><blockquote><p>python3  ex17.2.py  testin  testout</p></blockquote><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<span class="hljs-comment"># this is used to distinguish whether the &quot;newf&quot; exists ?</span><span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> existsscript, dataf, newf = argvdata = <span class="hljs-built_in">open</span>(dataf).read()<span class="hljs-comment"># len(file) to find out length of the file</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;the datafile is <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(data)&#125;</span> bytes long&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;does the newfile file exist? <span class="hljs-subst">&#123;exists(newf)&#125;</span>&quot;</span>)tar = <span class="hljs-built_in">open</span>(newf, <span class="hljs-string">&#x27;w&#x27;</span>)tar.write(data)tar.close()<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Copied file successfully !&quot;</span>)<span class="hljs-comment"># f = open(filename).read()</span><span class="hljs-comment"># ...</span><span class="hljs-comment"># f.close()</span><span class="hljs-comment"># AttributeError: &#x27;str&#x27; object has no attribute &#x27;close&#x27;</span><span class="hljs-comment"># here we can easily see the error information !</span><span class="hljs-comment"># because I can&#x27;t distinguish the difference between &quot;files&quot; and &quot;file variables&quot; !</span></code></pre><pre><code class="hljs livecodeserver"><span class="hljs-keyword">the</span> datafile is <span class="hljs-number">17</span> <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">long</span>does <span class="hljs-keyword">the</span> newfile <span class="hljs-built_in">file</span> exist? TrueCopied <span class="hljs-built_in">file</span> successfully !</code></pre><h3 id="17-3-使用分号简化代码行"><a href="#17-3-使用分号简化代码行" class="headerlink" title="17.3 使用分号简化代码行"></a>17.3 使用分号简化代码行</h3><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> exists; script, dataf, newf = argvdata = <span class="hljs-built_in">open</span>(dataf).read()<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;the datafile is <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(data)&#125;</span> bytes long&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;does the newfile file exist? <span class="hljs-subst">&#123;exists(newf)&#125;</span>&quot;</span>)tar = <span class="hljs-built_in">open</span>(newf, <span class="hljs-string">&#x27;w&#x27;</span>); tar.write(data); tar.close()<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Copied file successfully !&quot;</span>)<span class="hljs-comment"># f = open(filename).read()</span><span class="hljs-comment"># ...</span><span class="hljs-comment"># f.close()</span><span class="hljs-comment"># AttributeError: &#x27;str&#x27; object has no attribute &#x27;close&#x27;</span><span class="hljs-comment"># here we can easily see the error information !</span><span class="hljs-comment"># because I can&#x27;t distinguish the difference between &quot;files&quot; and &quot;file variables&quot; !</span></code></pre><pre><code class="hljs livecodeserver"><span class="hljs-keyword">the</span> datafile is <span class="hljs-number">17</span> <span class="hljs-keyword">bytes</span> <span class="hljs-keyword">long</span>does <span class="hljs-keyword">the</span> newfile <span class="hljs-built_in">file</span> exist? TrueCopied <span class="hljs-built_in">file</span> successfully !</code></pre><blockquote><p>17.4 testin file</p></blockquote><pre><code class="hljs ada">THIS <span class="hljs-keyword">IS</span> <span class="hljs-keyword">FOR</span> TEST</code></pre><blockquote><p>17.4 testout file</p></blockquote><pre><code class="hljs ada">THIS <span class="hljs-keyword">IS</span> <span class="hljs-keyword">FOR</span> TEST</code></pre><h2 id="18-1-重定义print函数使其同时打印多个参数"><a href="#18-1-重定义print函数使其同时打印多个参数" class="headerlink" title="18.1 重定义print函数使其同时打印多个参数"></a>18.1 重定义print函数使其同时打印多个参数</h2><pre><code class="hljs python"><span class="hljs-comment"># this one is like your scripts with argv</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_two</span>(<span class="hljs-params">*args</span>):    arg1, arg2 = args    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;arg1: <span class="hljs-subst">&#123;arg1&#125;</span>, arg2: <span class="hljs-subst">&#123;arg2&#125;</span>&quot;</span>)    <span class="hljs-comment"># ok, that *args is actually pointless, we can just do this</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_two_again</span>(<span class="hljs-params">arg1, arg2</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;arg1: <span class="hljs-subst">&#123;arg1&#125;</span>, arg2: <span class="hljs-subst">&#123;arg2&#125;</span>&quot;</span>)    <span class="hljs-comment"># this just takes one argument</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_one</span>(<span class="hljs-params">arg1</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;arg1: <span class="hljs-subst">&#123;arg1&#125;</span>&quot;</span>)<span class="hljs-comment"># this one takes no argument</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_none</span>():    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I got nothing.&quot;</span>)     print_two(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;dear&quot;</span>)print_two_again(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;baby&quot;</span>)print_one(<span class="hljs-string">&quot;world&quot;</span>)print_none()   <span class="hljs-comment"># arg1, arg2 = args</span><span class="hljs-comment"># ValueError: not enough values to unpack (expected 2, got 1)</span><span class="hljs-comment"># error from the function : print_two(&quot;hello&quot;)</span><span class="hljs-comment"># I forgot to take out two values !</span></code></pre><pre><code class="hljs yaml"><span class="hljs-attr">arg1:</span> <span class="hljs-string">hello,</span> <span class="hljs-attr">arg2:</span> <span class="hljs-string">dear</span><span class="hljs-attr">arg1:</span> <span class="hljs-string">hello,</span> <span class="hljs-attr">arg2:</span> <span class="hljs-string">baby</span><span class="hljs-attr">arg1:</span> <span class="hljs-string">world</span><span class="hljs-string">I</span> <span class="hljs-string">got</span> <span class="hljs-string">nothing.</span></code></pre><h3 id="18-2-自定义print函数同时打印多个字符串"><a href="#18-2-自定义print函数同时打印多个字符串" class="headerlink" title="18.2 自定义print函数同时打印多个字符串"></a>18.2 自定义print函数同时打印多个字符串</h3><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printssss</span>(<span class="hljs-params">*args</span>):    a, b, c, d = args    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a: <span class="hljs-subst">&#123;a&#125;</span>, b: <span class="hljs-subst">&#123;b&#125;</span>, c: <span class="hljs-subst">&#123;c&#125;</span>, d: <span class="hljs-subst">&#123;d&#125;</span>&quot;</span>)<span class="hljs-comment"># show the difference of the two kinds of function</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;print(&quot;I&quot;, &quot;love&quot;, &quot;you&quot;, &quot;baby&quot;)&#x27;</span>)  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;you&quot;</span>, <span class="hljs-string">&quot;baby&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;printssss(&quot;I&quot;, &quot;love&quot;, &quot;you&quot;, &quot;baby&quot;)&#x27;</span>)printssss(<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;you&quot;</span>, <span class="hljs-string">&quot;baby&quot;</span>)</code></pre><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;you&quot;</span>, <span class="hljs-string">&quot;baby&quot;</span>)</span></span>I love you baby<span class="hljs-function"><span class="hljs-title">printssss</span><span class="hljs-params">(<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;you&quot;</span>, <span class="hljs-string">&quot;baby&quot;</span>)</span></span><span class="hljs-selector-tag">a</span>: I, <span class="hljs-selector-tag">b</span>: love, c: you, d: baby</code></pre><h2 id="19-1-定义新的函数通过多种方式打印不同参数"><a href="#19-1-定义新的函数通过多种方式打印不同参数" class="headerlink" title="19.1 定义新的函数通过多种方式打印不同参数"></a>19.1 定义新的函数通过多种方式打印不同参数</h2><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cheese_and_crackers</span>(<span class="hljs-params">cheese_count, boxes_of_crackers</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;You have <span class="hljs-subst">&#123;cheese_count&#125;</span> cheeses!&quot;</span>)     <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;You have <span class="hljs-subst">&#123;boxes_of_crackers&#125;</span> boxes of crackers!&quot;</span>)     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Man that&#x27;s enough for a party!&quot;</span>)     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Get a blanket.\n&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;We can just give the function numbers directly: &quot;</span>)cheese_and_crackers(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;OR, we can use variables from our script: &quot;</span>)amounta = <span class="hljs-number">10</span>amountb = <span class="hljs-number">50</span>cheese_and_crackers(amounta, amountb)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;We can even do math inside too: &quot;</span>)cheese_and_crackers(<span class="hljs-number">10</span> + <span class="hljs-number">20</span>, <span class="hljs-number">5</span> + <span class="hljs-number">6</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;And we can combine the two, variables and math: &quot;</span>)cheese_and_crackers(amounta + <span class="hljs-number">6000</span>, amountb + <span class="hljs-number">1000</span>)</code></pre><pre><code class="hljs vbnet">We can just give the <span class="hljs-keyword">function</span> numbers directly:You have <span class="hljs-number">20</span> cheeses!You have <span class="hljs-number">30</span> boxes <span class="hljs-keyword">of</span> crackers!Man that<span class="hljs-comment">&#x27;s enough for a party!</span><span class="hljs-keyword">Get</span> a blanket.<span class="hljs-built_in">OR</span>, we can use variables <span class="hljs-keyword">from</span> our script:You have <span class="hljs-number">10</span> cheeses!You have <span class="hljs-number">50</span> boxes <span class="hljs-keyword">of</span> crackers!Man that<span class="hljs-comment">&#x27;s enough for a party!</span><span class="hljs-keyword">Get</span> a blanket.We can even <span class="hljs-keyword">do</span> math inside too:You have <span class="hljs-number">30</span> cheeses!You have <span class="hljs-number">11</span> boxes <span class="hljs-keyword">of</span> crackers!Man that<span class="hljs-comment">&#x27;s enough for a party!</span><span class="hljs-keyword">Get</span> a blanket.<span class="hljs-built_in">And</span> we can combine the two, variables <span class="hljs-built_in">and</span> math:You have <span class="hljs-number">6010</span> cheeses!You have <span class="hljs-number">1050</span> boxes <span class="hljs-keyword">of</span> crackers!Man that<span class="hljs-comment">&#x27;s enough for a party!</span><span class="hljs-keyword">Get</span> a blanket.</code></pre><h3 id="19-2-使用函数定义四则运算"><a href="#19-2-使用函数定义四则运算" class="headerlink" title="19.2 使用函数定义四则运算"></a>19.2 使用函数定义四则运算</h3><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculation</span>(<span class="hljs-params">a, b</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> + <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>, a + b)    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> - <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>, a - b)    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> * <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>, a * b)    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> / <span class="hljs-subst">&#123;b&#125;</span> = &quot;</span>, a / b)    a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter the first number: &quot;</span>))b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please enter another one: &quot;</span>))calculation(a, b)</code></pre><pre><code class="hljs apache"><span class="hljs-attribute">please</span> enter the first number: <span class="hljs-number">666</span><span class="hljs-attribute">please</span> enter another one: <span class="hljs-number">999</span><span class="hljs-attribute">666</span> + <span class="hljs-number">999</span> =  <span class="hljs-number">1665</span><span class="hljs-attribute">666</span> - <span class="hljs-number">999</span> =  -<span class="hljs-number">333</span><span class="hljs-attribute">666</span> * <span class="hljs-number">999</span> =  <span class="hljs-number">665334</span><span class="hljs-attribute">666</span> / <span class="hljs-number">999</span> =  <span class="hljs-number">0</span>.<span class="hljs-number">6666666666666666</span></code></pre><h3 id="19-3-复制文件并在新文件中加入字符串"><a href="#19-3-复制文件并在新文件中加入字符串" class="headerlink" title="19.3 复制文件并在新文件中加入字符串"></a>19.3 复制文件并在新文件中加入字符串</h3><blockquote><p>python3  ex19.3.py  txt1  txt2</p></blockquote><pre><code class="hljs python"><span class="hljs-comment"># function TEST</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">TEST</span>(<span class="hljs-params">str1, str2</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">50</span>) <span class="hljs-comment">#####</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this is the combination for str1 &amp;&amp; str2 : &quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;str1&#125;</span>&quot;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;str2&#125;</span>&quot;</span>)x = <span class="hljs-string">&#x27;\n&#x27;</span>str1 = <span class="hljs-string">&quot;HERE YOU CAN SEE WHAT I WANNA SAY !&quot;</span>str2 = <span class="hljs-string">&quot;THERE IS NO ANY CONTENT FOR THE PAGE!&quot;</span><span class="hljs-comment"># function copy</span><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, file1, file2 = argv<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ready to copy <span class="hljs-subst">&#123;file1&#125;</span> to <span class="hljs-subst">&#123;file2&#125;</span>....&quot;</span>)data = <span class="hljs-built_in">open</span>(file1).read()<span class="hljs-comment"># show what is in the file1 and add what you wanna say</span>TEST(str1, str2)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;file1 shows that: <span class="hljs-subst">&#123;x&#125;</span><span class="hljs-subst">&#123;data&#125;</span>&quot;</span>)y = <span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;here you can write to file2 <span class="hljs-subst">&#123;x&#125;</span>&quot;</span>)plusdata = data + str1 + x + str2 + x + yqiao = <span class="hljs-built_in">open</span>(file2, <span class="hljs-string">&#x27;w&#x27;</span>)qiao.write(plusdata)    qiao.close()  <span class="hljs-comment"># attention ! we need to close the &#x27;qiao&#x27;</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;copy successfully !&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">50</span>) <span class="hljs-comment">#####</span></code></pre><pre><code class="hljs clean">ready to copy txt1 to txt2....##################################################this is the combination for str1 &amp;&amp; str2 :HERE YOU CAN SEE WHAT I WANNA SAY !THERE IS NO ANY CONTENT FOR THE PAGE!file1 shows that:Do you still remember the first time I met you ?here you can write to file2I miss ucopy successfully !##################################################</code></pre><blockquote><p>19.3 open new txt2:</p></blockquote><pre><code class="hljs css">Do you still remember the first <span class="hljs-selector-tag">time</span> <span class="hljs-selector-tag">I</span> met you ?HERE YOU CAN SEE WHAT <span class="hljs-selector-tag">I</span> WANNA SAY !THERE IS NO ANY <span class="hljs-attribute">CONTENT</span> FOR THE PAGE!<span class="hljs-selector-tag">I</span> miss u</code></pre><blockquote><p>txt1</p></blockquote><pre><code class="hljs coq">Do you still <span class="hljs-built_in">remember</span> the <span class="hljs-built_in">first</span> <span class="hljs-built_in">time</span> I met you ?</code></pre><blockquote><p>txt2</p></blockquote><pre><code class="hljs pgsql"><span class="hljs-keyword">Do</span> you still remember the first <span class="hljs-type">time</span> I met you ?HERE YOU CAN SEE WHAT I WANNA SAY !THERE <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NO</span> <span class="hljs-keyword">ANY</span> CONTENT <span class="hljs-keyword">FOR</span> THE PAGE!yes , come <span class="hljs-keyword">on</span> !</code></pre><h2 id="20-1-定义函数使其打印文本内容且显示行数"><a href="#20-1-定义函数使其打印文本内容且显示行数" class="headerlink" title="20.1 定义函数使其打印文本内容且显示行数"></a>20.1 定义函数使其打印文本内容且显示行数</h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, input_file = argv<span class="hljs-comment"># function to print input_file</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_all</span>(<span class="hljs-params">f</span>):    <span class="hljs-built_in">print</span>(f.read())    <span class="hljs-comment"># function to move the cursor to the start of the file</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">rewind</span>(<span class="hljs-params">f</span>):    f.seek(<span class="hljs-number">0</span>)<span class="hljs-comment"># function to print line count (number) and file</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_a_line</span>(<span class="hljs-params">line_count, f</span>):    <span class="hljs-built_in">print</span>(line_count, f.readline())    current_file = <span class="hljs-built_in">open</span>(input_file)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;first let&#x27;s print the whole file:\n&quot;</span>)print_all(current_file)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;now let&#x27;s rewind, kind of like a tape.&quot;</span>)rewind(current_file)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;let&#x27;s print three lines:&quot;</span>)current_line = <span class="hljs-number">1</span>print_a_line(current_line, current_file)current_line = current_line + <span class="hljs-number">1</span>print_a_line(current_line, current_file)current_line = current_line + <span class="hljs-number">1</span>print_a_line(current_line, current_file)</code></pre><pre><code class="hljs vbnet">first <span class="hljs-keyword">let</span><span class="hljs-comment">&#x27;s print the whole file:</span>THIS <span class="hljs-built_in">IS</span> JUST <span class="hljs-keyword">FOR</span> TESTTHIS <span class="hljs-built_in">IS</span> JUST <span class="hljs-keyword">FOR</span> TESTTHIS <span class="hljs-built_in">IS</span> JUST <span class="hljs-keyword">FOR</span> TESTnow <span class="hljs-keyword">let</span><span class="hljs-comment">&#x27;s rewind, kind of like a tape.</span><span class="hljs-keyword">let</span><span class="hljs-comment">&#x27;s print three lines:</span><span class="hljs-number">1</span> THIS <span class="hljs-built_in">IS</span> JUST <span class="hljs-keyword">FOR</span> TEST<span class="hljs-number">2</span> THIS <span class="hljs-built_in">IS</span> JUST <span class="hljs-keyword">FOR</span> TEST<span class="hljs-number">3</span> THIS <span class="hljs-built_in">IS</span> JUST <span class="hljs-keyword">FOR</span> TEST</code></pre><h3 id="20-2-定义函数复制文本参数且多行打印"><a href="#20-2-定义函数复制文本参数且多行打印" class="headerlink" title="20.2 定义函数复制文本参数且多行打印"></a>20.2 定义函数复制文本参数且多行打印</h3><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argvscript, infile = argv<span class="hljs-keyword">def</span> <span class="hljs-title function_">prints</span>(<span class="hljs-params">tar5</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;infile * 5 = &quot;</span>)    <span class="hljs-built_in">print</span>(tar5 * <span class="hljs-number">5</span>)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">def inputs():</span><span class="hljs-string">    input(&quot;here you can input one number: \n&quot;)</span><span class="hljs-string">    print(&quot;write successfully !&quot;)</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>tar = <span class="hljs-built_in">open</span>(infile).read()<span class="hljs-comment"># something = inputs()</span>x = <span class="hljs-string">&#x27;\n&#x27;</span>tarfive = tar + xprints(tarfive)<span class="hljs-comment">## there I met something wrong !</span></code></pre><pre><code class="hljs sas"><span class="hljs-keyword">infile</span> <span class="hljs-comment">* 5 =</span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment"></span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment"></span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment"></span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment"></span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment">THIS IS JUST FOR TEST</span><span class="hljs-comment"></span></code></pre><p><em>教程参考：learn python the hard way</em></p>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl 备份问题</title>
      <link href="/2023/06/18/blog-5-wsl-debug/"/>
      <url>/2023/06/18/blog-5-wsl-debug/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="备份乌班图子系统时出的一点小问题"><a href="#备份乌班图子系统时出的一点小问题" class="headerlink" title="备份乌班图子系统时出的一点小问题"></a>备份乌班图子系统时出的一点小问题</h1><pre><code class="hljs shell">C:\Users\uncle&gt;wsl -l -v  NAME            STATE           VERSION* Ubuntu-22.04    Running         2  Ubuntu-20.04    Stopped         2C:\Users\uncle&gt;shutdown Ubuntu-22.04 NAME            STATE           VERSION* Ubuntu-22.04    Stopped         2  Ubuntu-20.04    Stopped         2C:\Users\uncle&gt;wsl --export  Ubuntu-22.04 d:\linux拒绝访问。Error code: Wsl/E_ACCESSDENIED</code></pre><p>网上搜了一通，有人说是权限问题，我就用管理员身份打开了powershell，依旧无济于事……</p><p>后面才发觉，是输入的时候没有指定备份文件的名称（上次也没指定但是却可以……）</p><p>于是做以下修改：</p><pre><code class="hljs shell">C:\Users\uncle&gt;wsl --export  Ubuntu-22.04 d:\linux\Ubuntu-22.04.tar</code></pre><p>ok，问题解决，成功备份到D盘！</p><h4 id="关于文件压缩：http-sobereva-com-672"><a href="#关于文件压缩：http-sobereva-com-672" class="headerlink" title="关于文件压缩：http://sobereva.com/672"></a>关于文件压缩：<a target="_blank" rel="noopener" href="http://sobereva.com/672">http://sobereva.com/672</a></h4>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 学习记录(1-10)</title>
      <link href="/2023/06/15/blog-4-python/"/>
      <url>/2023/06/15/blog-4-python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python-学习记录"><a href="#python-学习记录" class="headerlink" title="python 学习记录"></a>python 学习记录</h1><h2 id="1-打印字符串"><a href="#1-打印字符串" class="headerlink" title="1. 打印字符串"></a>1. 打印字符串</h2><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world!&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello again&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I like typing this.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is fun.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Yay! Printing.&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I&#x27;d much rather you &#x27;not&#x27;.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I &quot;said&quot; do not touch this.&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;right?&quot;</span>)</code></pre><pre><code class="hljs erlang">hello world!hello againI like typing this.This is <span class="hljs-keyword">fun</span>.Yay! Printing.I&#x27;d much rather you &#x27;<span class="hljs-keyword">not</span>&#x27;.I <span class="hljs-string">&quot;said&quot;</span> do <span class="hljs-keyword">not</span> touch this.right?I could have code like this.this will run.</code></pre><h2 id="2-写注释"><a href="#2-写注释" class="headerlink" title="2. 写注释"></a>2. 写注释</h2><pre><code class="hljs python"><span class="hljs-comment"># A comment, this is so you can read your program later.</span><span class="hljs-comment"># Anything after the # is ignored by python</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I could have code like this.&quot;</span>)<span class="hljs-comment"># You can also use a vomment to &quot;disable&quot; or comment out code: print(&quot;this won&#x27;t run.&quot;)</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this will run.&quot;</span>)</code></pre><pre><code class="hljs kotlin">I could have code like <span class="hljs-keyword">this</span>.<span class="hljs-keyword">this</span> will run.</code></pre><h2 id="3-四则运算"><a href="#3-四则运算" class="headerlink" title="3. 四则运算"></a>3. 四则运算</h2><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I will now count my chickens:&quot;</span>)         <span class="hljs-comment"># the title </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hens&quot;</span>, <span class="hljs-number">25</span> + <span class="hljs-number">30</span> / <span class="hljs-number">6</span>)                     <span class="hljs-comment"># 30.0</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Roosters&quot;</span>, <span class="hljs-number">100</span> - <span class="hljs-number">25</span> * <span class="hljs-number">3</span> % <span class="hljs-number">4</span>)            <span class="hljs-comment"># 100 - 75 % 4 = 97</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Now I will count the eggs:&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> + <span class="hljs-number">2</span> + <span class="hljs-number">1</span> - <span class="hljs-number">5</span> + <span class="hljs-number">4</span> % <span class="hljs-number">2</span> - <span class="hljs-number">1</span> / <span class="hljs-number">4</span> + <span class="hljs-number">6</span>)       <span class="hljs-comment"># 7 - 1 / 4 = 6.75</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Is it true that 3 + 2 &lt; 5 - 7 ?&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-number">3</span> + <span class="hljs-number">2</span> &lt; <span class="hljs-number">5</span> - <span class="hljs-number">7</span>)                           <span class="hljs-comment"># False </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;What is 3 + 2?&quot;</span>, <span class="hljs-number">3</span> + <span class="hljs-number">2</span>)                 <span class="hljs-comment"># 5</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;What is 5 - 7?&quot;</span>, <span class="hljs-number">5</span> - <span class="hljs-number">7</span>)                 <span class="hljs-comment"># -2</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh, that&#x27;s why it&#x27;s False.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;How about some more.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Is it greater?&quot;</span>, <span class="hljs-number">5</span> &gt; -<span class="hljs-number">2</span>)                <span class="hljs-comment"># True</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Is it greater or equal?&quot;</span>, <span class="hljs-number">5</span> &gt;= -<span class="hljs-number">2</span>)      <span class="hljs-comment"># True</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Is it less or equal?&quot;</span> , <span class="hljs-number">5</span> &lt;= -<span class="hljs-number">2</span>)        <span class="hljs-comment"># False</span><span class="hljs-comment"># my own test</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;change these numbers to float point:&quot;</span>)  <span class="hljs-comment"># calculate test</span><span class="hljs-built_in">print</span>(<span class="hljs-number">25.0</span> + <span class="hljs-number">30.0</span> / <span class="hljs-number">6</span>)                         <span class="hljs-comment"># 30.0 </span><span class="hljs-built_in">print</span>(<span class="hljs-number">7.0</span> - <span class="hljs-number">1.0</span> / <span class="hljs-number">4.0</span>)                         <span class="hljs-comment"># 6.75</span></code></pre><pre><code class="hljs applescript">I will now <span class="hljs-built_in">count</span> <span class="hljs-keyword">my</span> chickens:Hens <span class="hljs-number">30.0</span>Roosters <span class="hljs-number">97</span>Now I will <span class="hljs-built_in">count</span> <span class="hljs-keyword">the</span> eggs:<span class="hljs-number">6.75</span>Is <span class="hljs-keyword">it</span> <span class="hljs-literal">true</span> <span class="hljs-keyword">that</span> <span class="hljs-number">3</span> + <span class="hljs-number">2</span> &lt; <span class="hljs-number">5</span> - <span class="hljs-number">7</span> ?FalseWhat <span class="hljs-keyword">is</span> <span class="hljs-number">3</span> + <span class="hljs-number">2</span>? <span class="hljs-number">5</span>What <span class="hljs-keyword">is</span> <span class="hljs-number">5</span> - <span class="hljs-number">7</span>? <span class="hljs-number">-2</span>Oh, <span class="hljs-keyword">that</span>&#x27;s why <span class="hljs-keyword">it</span>&#x27;s False.How <span class="hljs-keyword">about</span> <span class="hljs-keyword">some</span> more.Is <span class="hljs-keyword">it</span> greater? TrueIs <span class="hljs-keyword">it</span> greater <span class="hljs-keyword">or</span> <span class="hljs-keyword">equal</span>? TrueIs <span class="hljs-keyword">it</span> less <span class="hljs-keyword">or</span> <span class="hljs-keyword">equal</span>? Falsechange these numbers <span class="hljs-keyword">to</span> float point:<span class="hljs-number">30.0</span><span class="hljs-number">6.75</span></code></pre><h2 id="4-定义变量和引入计算"><a href="#4-定义变量和引入计算" class="headerlink" title="4. 定义变量和引入计算"></a>4. 定义变量和引入计算</h2><pre><code class="hljs python"><span class="hljs-comment"># calculate the cars and passengers</span>cars = <span class="hljs-number">100</span>space_in_a_car = <span class="hljs-number">4.0</span>drivers = <span class="hljs-number">30</span>passengers = <span class="hljs-number">90</span>cars_not_driven = cars - driverscars_driven = driverscarpool_capacity = cars_driven * space_in_a_caraverage_passengers_per_car = passengers / cars_driven<span class="hljs-comment"># show the result of the computation</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;there are&quot;</span>, cars, <span class="hljs-string">&quot;cars available.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;there are only&quot;</span>, drivers,<span class="hljs-string">&quot;drivers available.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;there will be&quot;</span>, cars_not_driven, <span class="hljs-string">&quot;empty cars today.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we can transport&quot;</span>, carpool_capacity, <span class="hljs-string">&quot;people today.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we have&quot;</span>, passengers, <span class="hljs-string">&quot;to carpool today.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;we need to put about&quot;</span>, average_passengers_per_car, <span class="hljs-string">&quot;in each car.&quot;</span>)<span class="hljs-comment"># SyntaxError: invalid syntax. Perhaps you forgot a comma?</span><span class="hljs-comment"># be careful to the comma &quot;,&quot; !!!</span><span class="hljs-comment"># my own test </span>my_phone_number_is = <span class="hljs-number">19923281341</span>my_qq_number_is = <span class="hljs-number">2734972186</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my_phone_number_is&quot;</span> ,my_phone_number_is)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;my_qq_number_is&quot;</span> , my_qq_number_is)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;what if my qq minus phone&quot;</span>, my_qq_number_is - my_phone_number_is ,<span class="hljs-string">&quot;interesting !&quot;</span>)</code></pre><pre><code class="hljs apache"><span class="hljs-attribute">there</span> are <span class="hljs-number">100</span> cars available.<span class="hljs-attribute">there</span> are only <span class="hljs-number">30</span> drivers available.<span class="hljs-attribute">there</span> will be <span class="hljs-number">70</span> empty cars today.<span class="hljs-attribute">we</span> can transport <span class="hljs-number">120</span>.<span class="hljs-number">0</span> people today.<span class="hljs-attribute">we</span> have <span class="hljs-number">90</span> to carpool today.<span class="hljs-attribute">we</span> need to put about <span class="hljs-number">3</span>.<span class="hljs-number">0</span> in each car.<span class="hljs-attribute">my_phone_number_is</span> <span class="hljs-number">19923281341</span><span class="hljs-attribute">my_qq_number_is</span> <span class="hljs-number">2734972186</span><span class="hljs-attribute">what</span> if my qq minus phone -<span class="hljs-number">17188309155</span> interesting !</code></pre><h2 id="5-print-f”-“"><a href="#5-print-f”-“" class="headerlink" title="5. print(f” “)"></a>5. print(f” “)</h2><pre><code class="hljs python"><span class="hljs-comment"># this is my own message</span>my_name = <span class="hljs-string">&#x27;yl&#x27;</span>my_age = <span class="hljs-number">23</span>             <span class="hljs-comment"># years old </span>my_height = <span class="hljs-number">165</span>         <span class="hljs-comment"># centimeters</span>my_weight = <span class="hljs-number">95</span>          <span class="hljs-comment"># half of kilogram</span>my_eyes = <span class="hljs-string">&#x27;black&#x27;</span>my_teeth = <span class="hljs-string">&#x27;white&#x27;</span>my_hair = <span class="hljs-string">&#x27;yellow&#x27;</span><span class="hljs-comment"># let me introduce myself here</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;let&#x27;s talk about <span class="hljs-subst">&#123;my_name&#125;</span>.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;he&#x27;s <span class="hljs-subst">&#123;my_weight&#125;</span> half of kilogram heavy.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;he&#x27;s <span class="hljs-subst">&#123;my_height&#125;</span> centimeters tall.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;he&#x27;s got <span class="hljs-subst">&#123;my_eyes&#125;</span> eyes and <span class="hljs-subst">&#123;my_hair&#125;</span> hair.&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;his teeth are usually <span class="hljs-subst">&#123;my_teeth&#125;</span> depending on the coffee.&quot;</span>)<span class="hljs-comment"># this is one kind of calculation just for fun</span>total = my_age + my_height + my_weight<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;if I add <span class="hljs-subst">&#123;my_age&#125;</span>, <span class="hljs-subst">&#123;my_height&#125;</span>, <span class="hljs-subst">&#123;my_weight&#125;</span>, I get <span class="hljs-subst">&#123;total&#125;</span>.&quot;</span>)<span class="hljs-comment"># my own test one</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this program is just for showing how long I stayed in the world&quot;</span>)years = <span class="hljs-number">23</span> days = <span class="hljs-number">365</span> * yearshours = <span class="hljs-number">24</span> * daysminutes = <span class="hljs-number">60</span> * hoursseconds = <span class="hljs-number">60</span> * minutes<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I stayed in the world for <span class="hljs-subst">&#123;years&#125;</span> years, that is <span class="hljs-subst">&#123;days&#125;</span> days, the same as <span class="hljs-subst">&#123;hours&#125;</span> hours, equall to <span class="hljs-subst">&#123;minutes&#125;</span> minutes, just <span class="hljs-subst">&#123;seconds&#125;</span> seconds, now I still struggle for myself !&quot;</span>)<span class="hljs-comment"># my own test two</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;this program is just for converting the units&quot;</span>)height_cm = <span class="hljs-number">165</span>height_dm = <span class="hljs-number">165</span>/<span class="hljs-number">10</span>height_m = <span class="hljs-number">165</span>/<span class="hljs-number">100.0</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;my height is <span class="hljs-subst">&#123;height_cm&#125;</span> cm ,equall to <span class="hljs-subst">&#123;height_m&#125;</span> m or <span class="hljs-subst">&#123;height_dm&#125;</span> dm&quot;</span>)</code></pre><pre><code class="hljs pgsql">let<span class="hljs-string">&#x27;s talk about yl.</span><span class="hljs-string">he&#x27;</span>s <span class="hljs-number">95</span> half <span class="hljs-keyword">of</span> kilogram heavy.h<span class="hljs-string">e&#x27;s 165 centimeters tall.</span><span class="hljs-string">he&#x27;</span>s got black eyes <span class="hljs-keyword">and</span> yellow hair.his teeth are usually white depending <span class="hljs-keyword">on</span> the coffee.<span class="hljs-keyword">if</span> I <span class="hljs-keyword">add</span> <span class="hljs-number">23</span>, <span class="hljs-number">165</span>, <span class="hljs-number">95</span>, I <span class="hljs-keyword">get</span> <span class="hljs-number">283.</span>this program <span class="hljs-keyword">is</span> just <span class="hljs-keyword">for</span> showing how long I stayed <span class="hljs-keyword">in</span> the worldI stayed <span class="hljs-keyword">in</span> the world <span class="hljs-keyword">for</span> <span class="hljs-number">23</span> years, that <span class="hljs-keyword">is</span> <span class="hljs-number">8395</span> days, the same <span class="hljs-keyword">as</span> <span class="hljs-number">201480</span> hours, equall <span class="hljs-keyword">to</span> <span class="hljs-number">12088800</span> minutes, just <span class="hljs-number">725328000</span> seconds, now I still struggle <span class="hljs-keyword">for</span> myself !this program <span class="hljs-keyword">is</span> just <span class="hljs-keyword">for</span> converting the unitsmy height <span class="hljs-keyword">is</span> <span class="hljs-number">165</span> cm ,equall <span class="hljs-keyword">to</span> <span class="hljs-number">1.65</span> m <span class="hljs-keyword">or</span> <span class="hljs-number">16.5</span> dm</code></pre><h2 id="6-f与-format"><a href="#6-f与-format" class="headerlink" title="6. f与.format"></a>6. f与.format</h2><pre><code class="hljs python"><span class="hljs-comment"># define the variables : type_of_people </span>types_of_people = <span class="hljs-number">10</span><span class="hljs-comment"># define the string</span>x = <span class="hljs-string">f&quot;there are <span class="hljs-subst">&#123;types_of_people&#125;</span> types of people.&quot;</span><span class="hljs-comment"># define the variables : binary &amp;&amp; do_not</span>binary = <span class="hljs-string">&quot;binary&quot;</span>do_not = <span class="hljs-string">&quot;don&#x27;t&quot;</span><span class="hljs-comment"># define the string</span>y = <span class="hljs-string">f&quot;those who know <span class="hljs-subst">&#123;binary&#125;</span> and those who <span class="hljs-subst">&#123;do_not&#125;</span>.&quot;</span><span class="hljs-comment"># print the two strings x &amp;&amp; y</span><span class="hljs-built_in">print</span>(x)<span class="hljs-built_in">print</span>(y)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I said: <span class="hljs-subst">&#123;x&#125;</span>&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I also said: &#x27;<span class="hljs-subst">&#123;y&#125;</span>&#x27;&quot;</span>)<span class="hljs-comment"># define and print the variables : hilarious &amp;&amp; joke_evaluation</span>hilarious = <span class="hljs-literal">False</span>joke_evaluation = <span class="hljs-string">&quot;Isn&#x27;t that joke so funny ?! &#123;&#125;&quot;</span><span class="hljs-built_in">print</span>(joke_evaluation.<span class="hljs-built_in">format</span>(hilarious))<span class="hljs-comment"># define the two strings w &amp;&amp; e</span>w = <span class="hljs-string">&quot;this is the left side of ... &quot;</span>e = <span class="hljs-string">&quot;a string with a right side.&quot;</span><span class="hljs-comment"># added the two strings and print it</span><span class="hljs-built_in">print</span>(w + e)<span class="hljs-comment"># my own test one</span>a = <span class="hljs-string">&quot;I &quot;</span>b = <span class="hljs-string">&quot;really &quot;</span>c = <span class="hljs-string">&quot;love &quot;</span>d = <span class="hljs-string">&quot;you &quot;</span>f = <span class="hljs-string">&quot;for &quot;</span>e = <span class="hljs-string">&quot;5 &quot;</span>g = <span class="hljs-string">&quot;years&quot;</span>s = <span class="hljs-string">&quot; ! &quot;</span>x = <span class="hljs-string">f&quot;how I aspire to be your half one , <span class="hljs-subst">&#123;a&#125;</span><span class="hljs-subst">&#123;b&#125;</span><span class="hljs-subst">&#123;c&#125;</span><span class="hljs-subst">&#123;d&#125;</span><span class="hljs-subst">&#123;f&#125;</span><span class="hljs-subst">&#123;e&#125;</span><span class="hljs-subst">&#123;g&#125;</span> !&quot;</span><span class="hljs-built_in">print</span>(x)<span class="hljs-built_in">print</span>(a + b + c + d + f + e + g + s)<span class="hljs-comment"># my own test two</span>h = <span class="hljs-number">6</span>i = <span class="hljs-string">f&quot;I can just say <span class="hljs-subst">&#123;h&#125;</span><span class="hljs-subst">&#123;h&#125;</span><span class="hljs-subst">&#123;h&#125;</span>&quot;</span>j = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;x&#125;</span> ,oh what the fuck ! <span class="hljs-subst">&#123;i&#125;</span> ~ xswl&quot;</span> <span class="hljs-built_in">print</span>(j)</code></pre><pre><code class="hljs vhdl">there are <span class="hljs-number">10</span> types <span class="hljs-keyword">of</span> people.those who know binary <span class="hljs-keyword">and</span> those who don<span class="hljs-symbol">&#x27;t</span>.I said: there are <span class="hljs-number">10</span> types <span class="hljs-keyword">of</span> people.I also said: <span class="hljs-symbol">&#x27;those</span> who know binary <span class="hljs-keyword">and</span> those who don<span class="hljs-symbol">&#x27;t</span>.&#x27;Isn<span class="hljs-symbol">&#x27;t</span> that joke so funny ?! <span class="hljs-literal">False</span>this <span class="hljs-keyword">is</span> the left <span class="hljs-literal">side</span> <span class="hljs-keyword">of</span> ... a <span class="hljs-built_in">string</span> <span class="hljs-keyword">with</span> a right <span class="hljs-literal">side</span>.how I aspire <span class="hljs-keyword">to</span> be your half one , I really love you <span class="hljs-keyword">for</span> <span class="hljs-number">5</span> years !I really love you <span class="hljs-keyword">for</span> <span class="hljs-number">5</span> years !how I aspire <span class="hljs-keyword">to</span> be your half one , I really love you <span class="hljs-keyword">for</span> <span class="hljs-number">5</span> years ! ,oh what the fuck ! I can just say <span class="hljs-number">666</span> ~ xswl</code></pre><h2 id="7-print和-format"><a href="#7-print和-format" class="headerlink" title="7. print和{}.format()"></a>7. print和{}.format()</h2><pre><code class="hljs python"><span class="hljs-comment"># how to add different varialbes and print them in total</span><span class="hljs-comment"># how to mutiply the mark &quot;#&quot; * 10 to print ##########</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mary had a little lamb.&quot;</span>)<span class="hljs-comment"># using &#123;&#125; with .format(&#x27;snow&#x27;) to realize printing the word snow</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Its fleece was white as &#123;&#125;.&quot;</span> .<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;snow&#x27;</span>))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;And everywhere that Mary went.&quot;</span>)<span class="hljs-comment"># put out ten points just like this : ..........</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;.&quot;</span> * <span class="hljs-number">10</span>) <span class="hljs-comment"># define different variables</span>end1 = <span class="hljs-string">&quot;C&quot;</span>end2 = <span class="hljs-string">&quot;h&quot;</span>end3 = <span class="hljs-string">&quot;e&quot;</span>end4 = <span class="hljs-string">&quot;s&quot;</span>end5 = <span class="hljs-string">&quot;s&quot;</span>end6 = <span class="hljs-string">&quot;e&quot;</span>end7 = <span class="hljs-string">&quot;B&quot;</span>end8 = <span class="hljs-string">&quot;u&quot;</span>end9 = <span class="hljs-string">&quot;r&quot;</span>end10 = <span class="hljs-string">&quot;g&quot;</span>end11 = <span class="hljs-string">&quot;e&quot;</span>end12 = <span class="hljs-string">&quot;r&quot;</span><span class="hljs-comment"># the existence of end=&#x27; &#x27; at the end.</span><span class="hljs-built_in">print</span>(end1 + end2 + end3 + end4 + end5 + end6, end=<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-built_in">print</span>(end7 + end8 + end9 + end10 + end11 + end12)<span class="hljs-comment"># none existence of end=&#x27; &#x27; at the end.</span><span class="hljs-built_in">print</span>(end1 + end2 + end3 + end4 + end5 + end6)<span class="hljs-built_in">print</span>(end7 + end8 + end9 + end10 + end11 + end12)<span class="hljs-comment"># my own test one</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;every time I feel &#123;&#125;.&quot;</span> .<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;painful&#x27;</span>))x = <span class="hljs-string">f&quot;choose to bear on my own &quot;</span>y = <span class="hljs-string">&quot;than &quot;</span>z = <span class="hljs-string">&quot;talk to others &quot;</span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;I would rather <span class="hljs-subst">&#123;x&#125;</span><span class="hljs-subst">&#123;y&#125;</span><span class="hljs-subst">&#123;z&#125;</span>&quot;</span>)<span class="hljs-comment"># my own test two</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>)m = <span class="hljs-string">&quot;don&#x27;t be worry &quot;</span>n = <span class="hljs-string">&quot;I will cheer up right now &quot;</span>k = <span class="hljs-string">&#x27;!&#x27;</span> * <span class="hljs-number">3</span><span class="hljs-built_in">print</span>(m + k, end=<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;as the matter of fact &quot;</span>)<span class="hljs-built_in">print</span>(m + k, end=<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-built_in">print</span>(n + k)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>)<span class="hljs-comment"># error : forgot to distinguish the difference between end=&#x27;&#x27; &amp;&amp; end=&#x27; &#x27;.</span><span class="hljs-comment"># error : forgot &lt;f&gt; , &lt;&quot;&quot;&gt; , &lt;&#123;&#125;&gt; when I prepare for referencing variables : f&quot;this is &#123;a&#125;&quot;</span></code></pre><pre><code class="hljs coffeescript">Mary had a little lamb.Its fleece was white <span class="hljs-keyword">as</span> snow.And everywhere that Mary went...........Chesse BurgerChesseBurger<span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">###</span><span class="hljs-comment">every time I feel painful.</span><span class="hljs-comment">I would rather choose to bear on my own than talk to others</span><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span>don<span class="hljs-string">&#x27;t be worry !!! as the matter of fact</span><span class="hljs-string">don&#x27;</span>t be worry !!! I will cheer up right now !!!<span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">###</span></code></pre><h2 id="8-同时打印多个参数"><a href="#8-同时打印多个参数" class="headerlink" title="8. 同时打印多个参数"></a>8. 同时打印多个参数</h2><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># define an new function called &lt;formatter&gt; , it&#x27;s used for passing arguments </span>formatter = <span class="hljs-string">&quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span><span class="hljs-comment"># create sets of string that every set concludes four arguments ,and use the formatter function to print them</span><span class="hljs-built_in">print</span>(formatter.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<span class="hljs-built_in">print</span>(formatter.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>, <span class="hljs-string">&quot;four&quot;</span>))<span class="hljs-built_in">print</span>(formatter.<span class="hljs-built_in">format</span>(<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>))<span class="hljs-built_in">print</span>(formatter.<span class="hljs-built_in">format</span>(formatter, formatter, formatter, formatter))<span class="hljs-built_in">print</span>(formatter.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;try your&quot;</span>, <span class="hljs-string">&quot;own text here&quot;</span>, <span class="hljs-string">&quot;maybe a poem&quot;</span>, <span class="hljs-string">&quot;or a song about fear&quot;</span>))     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># my own test one : practice the using of y.format()</span>x = <span class="hljs-literal">True</span>y = <span class="hljs-string">&quot;go ahead , what you say is &#123;&#125;&quot;</span><span class="hljs-built_in">print</span>(y.<span class="hljs-built_in">format</span>(x))<span class="hljs-comment"># my own  test two : practice the using of x=&#123;&#125;&#123;&#125;&#123;&#125; + y.format(, , ,)</span>m = <span class="hljs-string">&quot;&#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>n = <span class="hljs-string">f&quot;of course , everything that spoke from your mouth is&quot;</span>k = <span class="hljs-string">&#x27; &#x27;</span><span class="hljs-built_in">print</span>(n + k + m.<span class="hljs-built_in">format</span>(<span class="hljs-literal">True</span> , <span class="hljs-literal">True</span> , <span class="hljs-literal">True</span>))<span class="hljs-built_in">print</span>(n + k + m.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>))<span class="hljs-comment"># my own test three : practice the using of  * y.format&#123;&#125;</span>s = <span class="hljs-string">&#x27;sb &#x27;</span>b = <span class="hljs-string">&quot;actually , that is what I wanna say &#123;&#125;&quot;</span><span class="hljs-built_in">print</span>(b.<span class="hljs-built_in">format</span>(s) + s * <span class="hljs-number">5</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># IndexError: Replacement index 1 out of range for positional arguments tuple !  (unmatched number of argumants)</span><span class="hljs-comment"># SyntaxError: unterminated string literal !                                     (unstopped string, error from &lt;&quot;&gt;)</span><span class="hljs-comment"># NameError: name &#x27;true&#x27; is not defined. Did you mean:&#x27;True&#x27;?                    (error from &lt;true&gt; &amp;&amp; &lt;True&gt;)</span><span class="hljs-comment"># SyntaxError: f-string: empty expression not allowed !!!!!!!</span><span class="hljs-comment"># error from : don&#x27;t use the expression that includes nothing                    (error from b = &lt;f&gt;)     </span></code></pre><pre><code class="hljs clean">###########################################################################<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>one two three four<span class="hljs-literal">True</span> <span class="hljs-literal">False</span> <span class="hljs-literal">False</span> <span class="hljs-literal">True</span>&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;try your own text here maybe a poem or a song about fear###########################################################################go ahead , what you say is <span class="hljs-literal">True</span><span class="hljs-keyword">of</span> course , everything that spoke <span class="hljs-keyword">from</span> your mouth is <span class="hljs-literal">True</span> <span class="hljs-literal">True</span> <span class="hljs-literal">True</span><span class="hljs-keyword">of</span> course , everything that spoke <span class="hljs-keyword">from</span> your mouth is true true trueactually , that is what I wanna say sb sb sb sb sb sb###########################################################################</code></pre><h2 id="9-多行注释和换行"><a href="#9-多行注释和换行" class="headerlink" title="9. 多行注释和换行"></a>9. 多行注释和换行</h2><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># here&#x27;s some new strange stuff, remember type it exactly.</span>days = <span class="hljs-string">&quot;Mon Tue Wen Thu Fri Sat Sun&quot;</span>months = <span class="hljs-string">&quot;\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug&quot;</span>  <span class="hljs-comment"># &lt;\n&gt; means shift</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here are the days: &quot;</span>, days)backspace = <span class="hljs-string">&#x27; &#x27;</span><span class="hljs-built_in">print</span>(backspace)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;here are the months: &quot;</span>, months)<span class="hljs-comment"># there&#x27;s something going on here</span><span class="hljs-comment"># with the three double-quotes &lt;&quot;&quot;&quot;&gt;</span><span class="hljs-comment"># we&#x27;ll be able to type as much as we like, even 4,5,6...... lines </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;&quot; </span><span class="hljs-string">there&#x27;s something going on here. </span><span class="hljs-string">with the three double-quotes. </span><span class="hljs-string">we&#x27;ll be able to type as much as we like.</span><span class="hljs-string">even 4 lines if we want ,or 5 , or 6.&quot;&quot;&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># my own test one (test &lt;&quot;&quot;&quot;&gt;)</span><span class="hljs-comment"># print(&quot;this is</span><span class="hljs-comment">#                very funny&quot;)</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;&quot;this is</span><span class="hljs-string">                 very interesting &quot;&quot;&quot;</span> )<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># SyntaxError: unterminated string literal (detected at line 26) </span><span class="hljs-comment"># error from unstopped string (clear to see the difference between &lt;&quot;&gt; and &lt;&quot;&quot;&quot;&gt;)</span></code></pre><pre><code class="hljs coffeescript"><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">###</span><span class="hljs-comment">here are the days:  Mon Tue Wen Thu Fri Sat Sun</span><span class="hljs-comment"></span><span class="hljs-comment">here are the months:</span><span class="hljs-comment">Jan</span><span class="hljs-comment">Feb</span><span class="hljs-comment">Mar</span><span class="hljs-comment">Apr</span><span class="hljs-comment">May</span><span class="hljs-comment">Jun</span><span class="hljs-comment">Jul</span><span class="hljs-comment">Aug</span><span class="hljs-comment"></span><span class="hljs-comment">there&#x27;s something going on here.</span><span class="hljs-comment">with the three double-quotes.</span><span class="hljs-comment">we&#x27;ll be able to type as much as we like.</span><span class="hljs-comment">even 4 lines if we want ,or 5 , or 6.</span><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span>this <span class="hljs-keyword">is</span>                 very interesting<span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">###</span></code></pre><h2 id="10-转义字符"><a href="#10-转义字符" class="headerlink" title="10. 转义字符"></a>10. 转义字符</h2><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span>tabby_cat = <span class="hljs-string">&quot;\tI&#x27;m tabbed in.&quot;</span>           <span class="hljs-comment"># &lt;\t&gt; : tab</span>persian_cat = <span class="hljs-string">&quot;I&#x27;m split\non a line.&quot;</span>    <span class="hljs-comment"># &lt;\n&gt; : escape lines</span>backslash_cat = <span class="hljs-string">&quot;I&#x27;m \\ a \\ cat.&quot;</span>       <span class="hljs-comment"># &lt;\\&gt; : \</span>fat_cat = <span class="hljs-string">&quot;&quot;&quot;                            </span><span class="hljs-string">I&#x27;ll do a list:</span><span class="hljs-string">\t* cat food</span><span class="hljs-string">\t* fishied</span><span class="hljs-string">\t* catnip\n\t* grass &quot;&quot;&quot;</span>                <span class="hljs-comment"># &lt;&quot;&quot;&quot;&gt; : code multiple lines</span><span class="hljs-built_in">print</span>(tabby_cat)<span class="hljs-built_in">print</span>(persian_cat)<span class="hljs-built_in">print</span>(backslash_cat)<span class="hljs-built_in">print</span>(fat_cat)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># look at the difference between &lt;\&#x27;&gt; and &lt;\&quot;&gt;</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am 6&#x27;2\&quot; tall.&quot;</span>)               <span class="hljs-comment"># escape double-quote inside string</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I am 6\&#x27;2&quot; tall.&#x27;</span>)               <span class="hljs-comment"># escape single-quote inside string</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># my own test one </span>a = <span class="hljs-string">&quot; when to have a haircut ? I \a ask myself ...&quot;</span>    <span class="hljs-comment"># ASCII bell</span>b = <span class="hljs-string">&quot; when to have a haircut ? I \b ask myself ...&quot;</span>    <span class="hljs-comment"># ASCII backspace</span>c = <span class="hljs-string">&quot; when to have a haircut ? I \f ask myself ...&quot;</span>    <span class="hljs-comment"># ASCII formfeed</span>d = <span class="hljs-string">&quot; when to have a haircut ? I \r ask myself ...&quot;</span>    <span class="hljs-comment"># Carriage return</span>e = <span class="hljs-string">&quot; when to have a haircut ? I \v ask myself ...&quot;</span>    <span class="hljs-comment"># ASCII vertical tab</span><span class="hljs-built_in">print</span>(a)<span class="hljs-built_in">print</span>(b)<span class="hljs-built_in">print</span>(c)<span class="hljs-built_in">print</span>(d)<span class="hljs-built_in">print</span>(e)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># my own test two</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;here I wanna distinguish</span><span class="hljs-string">escape sequences \&#x27;\&#x27;\&#x27; from \&quot;\&quot;\&quot; </span><span class="hljs-string">and how to use them naturally &#x27;&#x27;&#x27;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;&quot;here I wanna distinguish</span><span class="hljs-string">escape sequences \&#x27;\&#x27;\&#x27; from \&quot;\&quot;\&quot; </span><span class="hljs-string">and how to use them naturally &quot;&quot;&quot;</span>)<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># my own test three</span>time = <span class="hljs-string">&quot;waste time&quot;</span>yeah = <span class="hljs-string">&quot;&quot;&quot;after the test </span><span class="hljs-string">I find that there is nothing difference</span><span class="hljs-string">between  \&#x27;\&#x27;\&#x27; and \&quot;\&quot;\&quot;;</span><span class="hljs-string">when I decide to use one of them to code multiple lines,</span><span class="hljs-string">I would not &#123;&#125; any more to choose which one is better !&quot;&quot;&quot;</span><span class="hljs-comment"># be attention to use &lt;f&gt; when the strings contain &#123;variables&#125; that you defined before</span>two = <span class="hljs-number">2</span>ok = <span class="hljs-string">f&quot;About <span class="hljs-subst">&#123;two&#125;</span> tests have been executed successfully!\n&quot;</span>  shift = <span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-built_in">print</span>(yeah.<span class="hljs-built_in">format</span>(time))<span class="hljs-built_in">print</span>(shift + ok + yeah.<span class="hljs-built_in">format</span>(time))<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#&quot;</span> * <span class="hljs-number">75</span>) <span class="hljs-comment">#####</span><span class="hljs-comment"># SyntaxError: f-string: empty expression not allowed &lt;error from wrong use of f&gt;</span><span class="hljs-comment"># Traceback (most recent call last): KeyError: &#x27;time&#x27; &lt;error from .format(ok)&gt;</span></code></pre><pre><code class="hljs coffeescript"><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">###</span><span class="hljs-comment">        I&#x27;m tabbed in.</span><span class="hljs-comment">I&#x27;m split</span><span class="hljs-comment">on a line.</span><span class="hljs-comment">I&#x27;m \ a \ cat.</span><span class="hljs-comment"></span><span class="hljs-comment">I&#x27;ll do a list:</span><span class="hljs-comment">        * cat food</span><span class="hljs-comment">        * fishied</span><span class="hljs-comment">        * catnip</span><span class="hljs-comment">        * grass</span><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span>I am <span class="hljs-number">6</span><span class="hljs-string">&#x27;2&quot; tall.</span><span class="hljs-string">I am 6&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&quot; tall.</span><span class="hljs-string">###########################################################################</span><span class="hljs-string"> when to have a haircut ? I  ask myself ...</span><span class="hljs-string"> when to have a haircut ? I ask myself ...</span><span class="hljs-string"> when to have a haircut ? I</span><span class="hljs-string">                             ask myself ...</span><span class="hljs-string"> ask myself ... haircut ? I</span><span class="hljs-string"> when to have a haircut ? I</span><span class="hljs-string">                             ask myself ...</span><span class="hljs-string">###########################################################################</span><span class="hljs-string">here I wanna distinguish</span><span class="hljs-string">escape sequences &#x27;&#x27;&#x27; from &quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">and</span> how to use them naturallyhere I wanna distinguish<span class="hljs-built_in">escape</span> sequences <span class="hljs-string">&#x27;&#x27;&#x27; from &quot;&quot;&quot;</span><span class="hljs-string">and how to use them naturally</span><span class="hljs-string">###########################################################################</span><span class="hljs-string">after the test</span><span class="hljs-string">I find that there is nothing difference</span><span class="hljs-string">between  &#x27;&#x27;&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;&quot;&quot;;</span><span class="hljs-string">when I decide to use one of them to code multiple lines,</span><span class="hljs-string">I would not waste time any more to choose which one is better !</span><span class="hljs-string"></span><span class="hljs-string">About 2 tests have been executed successfully!</span><span class="hljs-string">after the test</span><span class="hljs-string">I find that there is nothing difference</span><span class="hljs-string">between  &#x27;&#x27;&#x27; and &quot;&quot;&quot;</span>;<span class="hljs-keyword">when</span> I decide to use one <span class="hljs-keyword">of</span> them to code multiple lines,I would <span class="hljs-keyword">not</span> waste time any more to choose which one <span class="hljs-keyword">is</span> better !<span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">###</span></code></pre><p><em>教程参考：learn python the hard way</em></p>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 配置问题</title>
      <link href="/2023/06/10/blog-3-hexo-debug/"/>
      <url>/2023/06/10/blog-3-hexo-debug/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="本地hexo无响应"><a href="#本地hexo无响应" class="headerlink" title="本地hexo无响应"></a>本地hexo无响应</h1><h2 id="输入-hexo-g-amp-amp-hexo-s"><a href="#输入-hexo-g-amp-amp-hexo-s" class="headerlink" title="输入 hexo g &amp;&amp; hexo s"></a>输入 hexo g &amp;&amp; hexo s</h2><pre><code class="hljs asciidoc">Usage: hexo &lt;command&gt;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</code></pre><p>周而复始一直没办法执行命令</p><p>更改文件位置之后出现新的问题:</p><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR </span>Cannot find module &#x27;hexo&#x27; from &#x27;/home/uncle_yang/blog&#x27;<span class="hljs-keyword">ERROR </span>Local hexo loading failed in ~/blog<span class="hljs-keyword">ERROR </span>Try running: &#x27;rm -rf node_modules &amp;&amp; npm install --force&#x27;</code></pre><h2 id="输入-rm-rf-node-modules-amp-amp-npm-install-–force"><a href="#输入-rm-rf-node-modules-amp-amp-npm-install-–force" class="headerlink" title="输入 rm -rf node_modules &amp;&amp; npm install –force"></a>输入 rm -rf node_modules &amp;&amp; npm install –force</h2><p>再执行hexo命令就解决问题了</p><h2 id="新增解决方法"><a href="#新增解决方法" class="headerlink" title="新增解决方法"></a>新增解决方法</h2><p>需要进入blog目录下，而不要在具体某个文件夹下去执行hexo的命令</p><h2 id="复盘（1）"><a href="#复盘（1）" class="headerlink" title="复盘（1）"></a>复盘（1）</h2><p>文件之类的东西务必时刻记住备份！备份！备份！！！</p><h2 id="复盘（2）"><a href="#复盘（2）" class="headerlink" title="复盘（2）"></a>复盘（2）</h2><p>遇到问题先看终端的报错信息，然后分析问题，看能不能解决；不行的话，复制报错信息到【谷歌】和【必应】，不要用辣鸡【百度】，查看相关解决办法！</p>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 基础命令</title>
      <link href="/2023/06/08/blog-2-linux-vasp/"/>
      <url>/2023/06/08/blog-2-linux-vasp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="linux命令行"><a href="#linux命令行" class="headerlink" title="linux命令行"></a>linux命令行</h1><h2 id="1-做计算常用的linux命令"><a href="#1-做计算常用的linux命令" class="headerlink" title="1.做计算常用的linux命令"></a>1.做计算常用的linux命令</h2><pre><code class="hljs bash"><span class="hljs-comment"># convert the format between windows and linux</span>$ dos2linux INCAR  <span class="hljs-comment"># using of grep : quilk positioning for the information you wanna know</span>$ <span class="hljs-built_in">ls</span> Fe*Fe_GW: POTCAR  Fe_pv: POTCAR  $ grep ZVAL Fe*/POTCARFe_GW/POTCAR:   POMASS =   55.847; ZVAL   =    8.000    mass and valenzFe_pv/POTCAR:   POMASS =   55.847; ZVAL   =   14.000    mass and valenz<span class="hljs-comment"># some basic commands of linux used in the first principle calculation</span>$ <span class="hljs-built_in">ls</span>$ <span class="hljs-built_in">cd</span>$ <span class="hljs-built_in">pwd</span>               <span class="hljs-comment"># show the local directory : /home/lei/exvasp</span>$ man <span class="hljs-built_in">cat</span>           <span class="hljs-comment"># cat --help</span>$ <span class="hljs-built_in">cat</span>  INCAR -n$ more INCAR$ grep EMAX POTCAR$ <span class="hljs-built_in">mkdir</span> exvasp_dir$ <span class="hljs-built_in">touch</span> exvasp_file $ <span class="hljs-built_in">cp</span> file1 file2    <span class="hljs-comment"># cp ~/exvasp/file1 . = cp /home/lei/exvasp/file1 /home/lei/exvasp</span>$ <span class="hljs-built_in">mv</span> exvasp exqe    <span class="hljs-comment"># mv ~/exvasp ~/exqe  </span>$ <span class="hljs-built_in">mkdir</span> exvasp &amp;&amp; <span class="hljs-built_in">cd</span> exvasp &amp;&amp; <span class="hljs-built_in">touch</span> file1$ <span class="hljs-built_in">pwd</span>               <span class="hljs-comment"># print the local directory : /home/lei/exvasp/file1 = ~/exvasp/file1</span>$ tree              <span class="hljs-comment"># print the directory structure just like tree</span>$ <span class="hljs-built_in">tail</span> OUTCAR -n 6  <span class="hljs-comment"># print the last 6 lines</span>$ <span class="hljs-built_in">head</span> OUTCAR -n 6  <span class="hljs-comment"># print the head 6 lines</span></code></pre><h2 id="2-vasp文件简介"><a href="#2-vasp文件简介" class="headerlink" title="2.vasp文件简介"></a>2.vasp文件简介</h2><pre><code class="hljs tap"><span class="hljs-comment"># all files from vasp calculation list below</span>INCAR      in     **STOPCAR    instout      outPOTCAR     in     **KPOINTS    in     **IBZKPT     outPOSCAR     in     **CONTCAR    outCHGCAR     in/outCHG        outWAVECAR    in/outTMPCAR     in/outEIGENVAL   outDOSCAR     outPROCAR     outOSZICAR    outPCDAT      outXDATCAR    outLOCPOT     outELFCAR     outPROOUT     out<span class="hljs-comment"># four files must be prepared for vasp : INCAR KPOINTS POTCAR POSCAR</span><span class="hljs-comment"># three files that contain a lot of information generated from vasp : CONTCAR OUTCAR OSZICAR</span>``` <span class="hljs-comment">### 2.1.vasp的三个重要输出文件</span>```bash<span class="hljs-comment"># After calculated successfully ,three files generated from vasp : CONTCAR OUTCAR OSZICAR</span><span class="hljs-comment"># CONTCAR</span><span class="hljs-comment"># CONTCAR : store the structural information that the model has been optimized  </span><span class="hljs-comment"># be attention to back up the file when the calculation was broken down ! ! !</span><span class="hljs-comment"># some differences between POSCAR and CONTCAR list below </span>$ cat -n POSCAR     1O atom in a box      21.0                 38.0 0.0 0.0        40.0 8.0 0.0       50.0 0.0 8.0      6O               71              8Cartesian     90<span class="hljs-number"> 0 </span>0  $ cat -n CONTCAR     1O atom in a box                              2   1.00000000000000          3     8.0000000000000000    0.0000000000000000    0.0000000000000000     4     0.0000000000000000    8.0000000000000000    0.0000000000000000     5     0.0000000000000000    0.0000000000000000    8.0000000000000000     6   O      7     1     8Direct     9  0.0000000000000000  0.0000000000000000  0.0000000000000000    10     11  0.00000000E+00  0.00000000E+00  0.00000000E+00<span class="hljs-comment"># OSZICAR</span><span class="hljs-comment"># OSZICAR : store the convergence speed information about the current step  </span><span class="hljs-comment"># N : iterations of the electronic structure</span><span class="hljs-comment"># 1 : iterations of geometric structure optimizations</span><span class="hljs-comment"># E0 : equall to energy (sigma-&gt;0) from OUTCAR . this parameter is important ! ! !</span>$ cat OSZICAR       N       E                     dE             d eps       ncg     rms          rms（c）DAV:  <span class="hljs-number"> 1 </span>    0.324969965196E+02    0.32497E+02   -0.10270E+03   <span class="hljs-number"> 48 </span>  0.977E+01DAV:  <span class="hljs-number"> 2 </span>    0.501749892771E+00   -0.31995E+02   -0.31995E+02   <span class="hljs-number"> 72 </span>  0.202E+01DAV:  <span class="hljs-number"> 3 </span>   -0.182605770767E-01   -0.52001E+00   -0.50521E+00   <span class="hljs-number"> 48 </span>  0.521E+00DAV:  <span class="hljs-number"> 4 </span>   -0.203547758465E-01   -0.20942E-02   -0.20860E-02   <span class="hljs-number"> 96 </span>  0.333E-01DAV:  <span class="hljs-number"> 5 </span>   -0.203547873947E-01   -0.11548E-07   -0.11210E-07   <span class="hljs-number"> 48 </span>  0.844E-04    0.307E-01DAV:  <span class="hljs-number"> 6 </span>   -0.213726161828E-01   -0.10178E-02   -0.17884E-03   <span class="hljs-number"> 48 </span>  0.111E-01    0.155E-01DAV:  <span class="hljs-number"> 7 </span>   -0.214708381542E-01   -0.98222E-04   -0.23522E-04   <span class="hljs-number"> 48 </span>  0.459E-02  <span class="hljs-number"> 1 </span>F= -.21470838E-01 E0= -.13757722E-01  d E =-.154262E-01 <span class="hljs-comment"># OUTCAR</span><span class="hljs-comment"># some useful commands to find the important information you want to know</span>$ grep POTCAR OUTCAR$ grep TIT OUTCAR$ grep ENMAX OUTCAR$ grep ZVAL OUTCAR                <span class="hljs-comment"># seek the number of valence electronic</span>$ grep irreducible OUTCAR         <span class="hljs-comment"># seek the number of k points</span>$ grep E-fermi OUTCAR     $ grep sigma OUTCAR | tail -n<span class="hljs-number"> 1 </span>  <span class="hljs-comment"># E0 = energy(sigma-&gt;0)</span></code></pre><h3 id="2-2-vasp的四个必备输入文件"><a href="#2-2-vasp的四个必备输入文件" class="headerlink" title="2.2.vasp的四个必备输入文件"></a>2.2.vasp的四个必备输入文件</h3><pre><code class="hljs bash"><span class="hljs-comment"># four files must be prepared for vasp : INCAR KPOINTS POTCAR POSCAR ,here are some examples</span><span class="hljs-comment"># INCAR : the easier ,the better ,don&#x27;t put parameters that unknown in the INCAR file </span><span class="hljs-comment"># INCAR example for oxygen </span>SYSTEM = O atom       ISMEAR = 0            SIGMA = 0.01        <span class="hljs-comment"># KPOINTS example for oxygen</span>K-POINTS0Gamma1 1 10 0 0  <span class="hljs-comment"># POSCAR example for oxygen</span>O atom <span class="hljs-keyword">in</span> a box1.0 8.0 0.0 0.00.0 8.0 0.00.0 0.0 8.0O1cartesian0 0 0<span class="hljs-comment"># POTCAR example for oxygen</span>PAW_PBE Fe 06Sep20008.00000000000000000parameters from PSCTR are:  VRHFIN =Fe:  d7 s1  LEXCH  = PE  EATOM  =   594.4687 eV,   43.6922 Ry  TITEL  = PAW_PBE Fe 06Sep2000  LULTRA =        F    use ultrasoft PP ?  IUNSCR =        1    unscreen: 0-lin 1-nonlin 2-no  RPACOR =    2.000    partial core radius  POMASS =   55.847; ZVAL   =    8.000    mass and valenz  RCORE  =    2.300    outmost cutoff radius  RWIGS  =    2.460; RWIGS  =    1.302    wigner-seitz radius (au A)  ENMAX  =  267.883; ENMIN  =  200.912 eV  RCLOC  =    1.701    cutoff <span class="hljs-keyword">for</span> <span class="hljs-built_in">local</span> pot  LCOR   =        T    correct aug charges  LPAW   =        T    paw PP  EAUG   =  511.368  DEXC   =    -.022  RMAX   =    2.817    core radius <span class="hljs-keyword">for</span> proj-oper  RAUG   =    1.300    <span class="hljs-built_in">factor</span> <span class="hljs-keyword">for</span> augmentation sphere  RDEP   =    2.442    radius <span class="hljs-keyword">for</span> radial grids  QCUT   =   -4.437; QGAM   =    8.874    optimization parameters</code></pre><h2 id="3-用于批量处理的for循环体"><a href="#3-用于批量处理的for循环体" class="headerlink" title="3.用于批量处理的for循环体"></a>3.用于批量处理的for循环体</h2><pre><code class="hljs bash"><span class="hljs-comment"># for loop : batch processing for data</span>$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..9&#125; ; <span class="hljs-keyword">do</span> <span class="hljs-built_in">cp</span> file_0 file_<span class="hljs-variable">$i</span> -r ; <span class="hljs-keyword">done</span>$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;a..z&#125; ; <span class="hljs-keyword">do</span> <span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$i</span> ; <span class="hljs-keyword">done</span>$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;A..Z&#125; ; <span class="hljs-keyword">do</span> <span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$i</span> &amp;&amp; <span class="hljs-built_in">rmdir</span> <span class="hljs-variable">$i</span> ; <span class="hljs-keyword">done</span></code></pre><h3 id="3-1-vasp四个输入文件的批量化处理"><a href="#3-1-vasp四个输入文件的批量化处理" class="headerlink" title="3.1.vasp四个输入文件的批量化处理"></a>3.1.vasp四个输入文件的批量化处理</h3><pre><code class="hljs bash"><span class="hljs-comment"># batch processing for vasp files : INCAR KPOINTS POTCAR POSCAR</span><span class="hljs-comment"># POTCAR</span><span class="hljs-comment"># combined three POTCARs from different directories into one</span>$ <span class="hljs-built_in">cat</span> ~/pot/Al/POTCAR ~/pot/C/POTCAR ~/pot/H/POTCAR &gt; POTCAR<span class="hljs-comment"># INCAR </span><span class="hljs-comment"># using sed to convert the value of INCAR directly (1)  </span>$ sed <span class="hljs-string">&#x27;3s/0.01/0.02/g&#x27;</span> INCAR &gt; INCAR_NEW$ <span class="hljs-built_in">cat</span> INCAR_NEW -n<span class="hljs-built_in">mv</span> INCAR_NEW INCAR<span class="hljs-comment"># using sed to convert the value directly (2)</span>$ sed <span class="hljs-string">&#x27;3s/0.01/0.02/g&#x27;</span> INCAR $ <span class="hljs-built_in">cat</span> INCAR -n $ sed <span class="hljs-string">&#x27;3s/0.01/0.02/g&#x27;</span> -i INCAR <span class="hljs-comment"># revise the value of INCAR with batch processing </span>$ <span class="hljs-built_in">ls</span>0.01  0.02  0.03  0.04  0.05  $ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> *; <span class="hljs-keyword">do</span> sed -i <span class="hljs-string">&quot;3s/0.05/<span class="hljs-variable">$i</span>/g&quot;</span> <span class="hljs-variable">$i</span>/INCAR ; <span class="hljs-keyword">done</span><span class="hljs-comment"># for i in * = for i in &#123;0.01 0.02 0.03 0.04 0.05&#125;, be attention to the &quot; </span>$ grep SIGMA */INCAR0.01/INCAR:SIGMA = 0.010.02/INCAR:SIGMA = 0.020.03/INCAR:SIGMA = 0.030.04/INCAR:SIGMA = 0.040.05/INCAR:SIGMA = 0.05<span class="hljs-comment"># KPOINTS</span><span class="hljs-comment"># revise the KPOINTS with batch processing (1)</span>$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..5&#125; ; <span class="hljs-keyword">do</span> <span class="hljs-built_in">cp</span> ~/exvasp/000 <span class="hljs-variable">$&#123;i&#125;</span><span class="hljs-variable">$&#123;i&#125;</span><span class="hljs-variable">$&#123;i&#125;</span> -r ; <span class="hljs-keyword">done</span>$ <span class="hljs-built_in">ls</span> 111 222 333 444 555$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..5&#125;; <span class="hljs-keyword">do</span> sed -i <span class="hljs-string">&quot;4s/1 1 1/<span class="hljs-variable">$i</span> <span class="hljs-variable">$i</span> <span class="hljs-variable">$i</span>/g&quot;</span> <span class="hljs-variable">$&#123;i&#125;</span><span class="hljs-variable">$&#123;i&#125;</span><span class="hljs-variable">$&#123;i&#125;</span>/KPOINTS ; <span class="hljs-keyword">done</span><span class="hljs-comment"># revise the KPOINTS with batch processing (2)</span>$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..6&#125;; <span class="hljs-keyword">do</span> sed -i <span class="hljs-string">&#x27;4s/1 1 1/$i $i $i/g&#x27;</span> <span class="hljs-variable">$&#123;i&#125;</span><span class="hljs-variable">$&#123;i&#125;</span><span class="hljs-variable">$&#123;i&#125;</span>/KPOINTS ; <span class="hljs-keyword">done</span>$ <span class="hljs-built_in">cat</span> ~/exvasp/111/KPOINTS K-POINTS  0  Gamma<span class="hljs-variable">$i</span> <span class="hljs-variable">$i</span> <span class="hljs-variable">$i</span>0 0 0 <span class="hljs-comment"># be attention to the &quot; and &#x27; , using \$i instead of $i to convert back</span>$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..6&#125; ; <span class="hljs-keyword">do</span> sed -i <span class="hljs-string">&quot;s/\$i \$i \$i/<span class="hljs-variable">$i</span> <span class="hljs-variable">$i</span> <span class="hljs-variable">$i</span>/g&quot;</span> $i$i<span class="hljs-variable">$i</span>/KPOINTS ; <span class="hljs-keyword">done</span><span class="hljs-comment"># POSCAR</span><span class="hljs-comment"># revise the POSCAR with batch processing</span>$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 8 2 16); <span class="hljs-keyword">do</span> <span class="hljs-built_in">cp</span> -r ~/POSCAR <span class="hljs-variable">$&#123;i&#125;</span><span class="hljs-variable">$&#123;i&#125;</span><span class="hljs-variable">$&#123;i&#125;</span> ; <span class="hljs-keyword">done</span>$ <span class="hljs-built_in">ls</span>888 101010  121212  141414  161616<span class="hljs-comment"># for i in $(seq 8 2 6) = for i in &#123;8 10 12 14 16&#125;</span>$ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 8 2 16) ; <span class="hljs-keyword">do</span> sed -i <span class="hljs-string">&quot;3,5s/8/<span class="hljs-variable">$i</span>/g&quot;</span> <span class="hljs-variable">$&#123;i&#125;</span><span class="hljs-variable">$&#123;i&#125;</span><span class="hljs-variable">$&#123;i&#125;</span>/POSCAR ; <span class="hljs-keyword">done</span><span class="hljs-comment"># show the details of the POSCAR</span>$ <span class="hljs-built_in">cat</span> ~/101010/POSACR O atom <span class="hljs-keyword">in</span> a box 1.0            10.0 0.0 0.0   0.0 10.0 0.0  0.0 0.0 10.0 O          1         Cartesian0 0 0</code></pre><p><em>References：<a target="_blank" rel="noopener" href="https://www.bigbrosci.com/">https://www.bigbrosci.com/</a></em></p>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vasp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 基础语法</title>
      <link href="/2023/06/06/blog-1-markdown/"/>
      <url>/2023/06/06/blog-1-markdown/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h1><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，使用该语法编写的文档可以导出 HTML 、Word、PDF、Epub 等多种格式的文档。</p><h2 id="1-Markdown-标题格式"><a href="#1-Markdown-标题格式" class="headerlink" title="1.Markdown 标题格式"></a>1.Markdown 标题格式</h2><pre><code class="hljs clean"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="2-Markdown-字体"><a href="#2-Markdown-字体" class="headerlink" title="2.Markdown 字体"></a>2.Markdown 字体</h2><pre><code class="hljs markdown"><span class="hljs-emphasis">*斜体*</span><span class="hljs-strong">**粗体**</span><span class="hljs-strong">**<span class="hljs-emphasis">*粗斜体*</span>**</span></code></pre><p><em>斜体</em><br><strong>粗体</strong><br><strong><em>粗斜体</em></strong></p><h2 id="3-Markdown-无序列表"><a href="#3-Markdown-无序列表" class="headerlink" title="3.Markdown 无序列表"></a>3.Markdown 无序列表</h2><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>第一项<span class="hljs-bullet">* </span>第二项<span class="hljs-bullet">* </span>第三项</code></pre><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><h2 id="4-Markdown-有序列表"><a href="#4-Markdown-有序列表" class="headerlink" title="4.Markdown 有序列表"></a>4.Markdown 有序列表</h2><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<span class="hljs-bullet">2.</span> 第二项<span class="hljs-bullet">3.</span> 第三项</code></pre><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h2 id="5-Markdown-列表嵌套"><a href="#5-Markdown-列表嵌套" class="headerlink" title="5.Markdown 列表嵌套"></a>5.Markdown 列表嵌套</h2><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项：<span class="hljs-bullet">    *</span> 第一项嵌套的第一个元素<span class="hljs-bullet">    *</span> 第一项嵌套的第二个元素<span class="hljs-bullet">2.</span> 第二项：<span class="hljs-bullet">    *</span> 第二项嵌套的第一个元素<span class="hljs-bullet">    *</span> 第二项嵌套的第二个元素</code></pre><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h2 id="6-Markdown-区块"><a href="#6-Markdown-区块" class="headerlink" title="6.Markdown 区块"></a>6.Markdown 区块</h2><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p><h3 id="6-1-Markdown-区块"><a href="#6-1-Markdown-区块" class="headerlink" title="6.1.Markdown 区块"></a>6.1.Markdown 区块</h3><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">区块引用</span><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">简单示例</span><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">注意区分它们之间的差别</span></code></pre><blockquote><p>区块引用<br>简单示例<br>注意区分它们之间的差别</p></blockquote><h3 id="6-2-Markdown-区块嵌套"><a href="#6-2-Markdown-区块嵌套" class="headerlink" title="6.2.Markdown 区块嵌套"></a>6.2.Markdown 区块嵌套</h3><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">最外层</span><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; 第一层嵌套</span><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; &gt; 第二层嵌套</span></code></pre><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h3 id="6-3-Markdown-区块中使用列表"><a href="#6-3-Markdown-区块中使用列表" class="headerlink" title="6.3.Markdown 区块中使用列表"></a>6.3.Markdown 区块中使用列表</h3><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">区块中使用列表</span><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">1.</span> 第一项</span><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">2.</span> 第二项</span><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">* 第一项</span><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">* 第二项</span><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">* 第三项</span></code></pre><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h3 id="6-4-Markdown-列表中使用区块"><a href="#6-4-Markdown-列表中使用区块" class="headerlink" title="6.4.Markdown 列表中使用区块"></a>6.4.Markdown 列表中使用区块</h3><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>第一项<span class="hljs-code">    &gt; 简单示例</span><span class="hljs-code">    &gt; 注意区分其差别</span><span class="hljs-bullet">* </span>第二项</code></pre><ul><li>第一项<blockquote><p>简单示例<br>注意区分其差别</p></blockquote></li><li>第二项</li></ul><h2 id="7-Markdown-代码"><a href="#7-Markdown-代码" class="headerlink" title="7.Markdown 代码"></a>7.Markdown 代码</h2><pre><code class="hljs autohotkey">`function()` # 使用``实现代码输入或者直接使用tab<span class="hljs-comment">;</span># 使用```开始```结尾可以实现多行代码输入<span class="hljs-comment">;</span></code></pre><h2 id="8-Markdown-链接"><a href="#8-Markdown-链接" class="headerlink" title="8.Markdown 链接"></a>8.Markdown 链接</h2><pre><code class="hljs scss"><span class="hljs-selector-attr">[链接名称]</span>(链接地址)&lt;链接地址&gt;</code></pre><p>个人网页 <a href="https://uncleleiy.github.io/">Uncle_yang</a><br>个人网页 (<a href="https://uncleleiy.github.io/">https://uncleleiy.github.io/</a>)</p><h2 id="9-Markdown-图片"><a href="#9-Markdown-图片" class="headerlink" title="9.Markdown 图片"></a>9.Markdown 图片</h2><pre><code class="hljs awk">![xswl 图标](https:<span class="hljs-regexp">//u</span>ncleleiy.github.io<span class="hljs-regexp">/img/</span>hello.gif <span class="hljs-string">&quot;xswl&quot;</span>)</code></pre><p><img src="https://uncleleiy.github.io/img/hello.gif" alt="xswl 图标" title="xswl"></p><h2 id="10-Markdown-表格"><a href="#10-Markdown-表格" class="headerlink" title="10.Markdown 表格"></a>10.Markdown 表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行；</p><pre><code class="hljs gherkin">|<span class="hljs-string">  表头   </span>|<span class="hljs-string"> 表头  </span>||<span class="hljs-string">  ----  </span>|<span class="hljs-string"> ----  </span>||<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>||<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|</code></pre><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>表格对齐方式；</p><p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。</p><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 右对齐 </span>|<span class="hljs-string"> 居中对齐 </span>||<span class="hljs-string"> :-----</span>|<span class="hljs-string"> ----: </span>|<span class="hljs-string"> :----: </span>||<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>||<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="11-Markdown-转义字符"><a href="#11-Markdown-转义字符" class="headerlink" title="11.Markdown 转义字符"></a>11.Markdown 转义字符</h2><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号</p><pre><code class="hljs markdown">\   反斜线`   反引号<span class="hljs-bullet">*</span>   星号_   下划线&#123;&#125;  花括号[]  方括号()  小括号<span class="hljs-section">#   井字号</span><span class="hljs-bullet">+</span>   加号<span class="hljs-bullet">-</span>   减号.   英文句点!   感叹号</code></pre><p>示例：</p><pre><code class="hljs asciidoc"><span class="hljs-strong">**文本加粗**</span> \*\* 正常显示星号 \*\*</code></pre><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><p><em>Reference: <a target="_blank" rel="noopener" href="https://www.runoob.com/markdown/md-tutorial.html">https://www.runoob.com/markdown/md-tutorial.html</a></em></p>]]></content>
      
      
      <categories>
          
          <category> grammar </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
